idRef {
  id: "55c66a6a3537331407000956"
}
ui_name: "LTG - Bit Store"
nodes {
  idRef {
    id: "55c66c23353733140700095c"
  }
  index: 0
  text: "{{GM}}A holographic service agent flickers to life as you approach the register. It appears cleverly designed, projected from outside the node to prevent its code from being exposed. The effect makes its voice sound distant, like the echo of a tin can{{/GM}}\n\nGreetings, program. Welcome to the Bit Store, seller of the highest quality quantum code this side of the Pacific Rim. You can purchase a prepackaged Bit, or you can use the Build-A-Bit workshop to build one."
  branches {
    responseText: ""
    nextNodeIndex: 1
  }
  nodeType: ConversationNodeType_Simple
  sourceInSceneRef {
    id: "53e487bd373361dc060052e3"
  }
}
nodes {
  idRef {
    id: "55c676b135373314070009a3"
  }
  index: 1
  text: ""
  branches {
    responseText: "{{CC}}500\302\245{{/CC}} {{GM}}Buy a Little Bit.{{/GM}}"
    conditions {
      ops {
        functionName: "Evaluate Nuyen"
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 3
            }
          }
        }
        args {
          int_value: 500
        }
      }
    }
    actions {
      ops {
        functionName: "Add Item to Team"
        args {
          call_value {
            functionName: "Get Map Item (Item)"
            args {
              string_value: "item_LTG-Little_Bit"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (string)"
            args {
              string_value: "FactionList"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "WithOrWithout"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (SceneDimension)"
            args {
              string_value: "Default"
            }
          }
        }
      }
      ops {
        functionName: "Remove Nuyen"
        args {
          int_value: 500
        }
      }
    }
    nextNodeIndex: -1
  }
  branches {
    responseText: "How much does the Workshop cost?"
    nextNodeIndex: 2
  }
  branches {
    responseText: "How does the Workshop work?"
    nextNodeIndex: 3
  }
  branches {
    responseText: "Why can I only have one Bit on me at a time?"
    nextNodeIndex: 6
    hideIfUnavailable: true
    onlyOnce: true
    idRef {
      id: "55c677f235373314070009b4"
    }
  }
  branches {
    responseText: "{{GM}}Walk away.{{/GM}}"
    nextNodeIndex: -1
  }
  nodeType: ConversationNodeType_Simple
  sourceInSceneRef {
    id: "53e487bd373361dc060052e3"
  }
}
nodes {
  idRef {
    id: "55c66ec93537331407000961"
  }
  index: 2
  text: "Placing code in a server node costs one nuyen to pay for upkeep and to prevent spamming. The total cost is determined by how efficient your coding is. Most professional coders can build a bit for less than ten nuyen.\n\n{{GM}}The agent continues in hurried tones explaining the legal disclaimer that the Bit Store is not responsible for amateur coding costs racking up a heftier bill.{{/GM}}"
  branches {
    responseText: "{{CC}}500\302\245{{/CC}} {{GM}}Buy a Little Bit.{{/GM}}"
    conditions {
      ops {
        functionName: "Evaluate Nuyen"
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 3
            }
          }
        }
        args {
          int_value: 500
        }
      }
    }
    actions {
      ops {
        functionName: "Add Item to Team"
        args {
          call_value {
            functionName: "Get Map Item (Item)"
            args {
              string_value: "item_LTG-Little_Bit"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (string)"
            args {
              string_value: "FactionList"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "WithOrWithout"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (SceneDimension)"
            args {
              string_value: "Default"
            }
          }
        }
      }
      ops {
        functionName: "Remove Nuyen"
        args {
          int_value: 500
        }
      }
    }
    nextNodeIndex: -1
  }
  branches {
    responseText: "{{GM}}Main menu.{{/GM}}"
    nextNodeIndex: 1
    auxiliaryLink: true
  }
  branches {
    responseText: "{{GM}}Walk away.{{/GM}}"
    nextNodeIndex: -1
  }
  nodeType: ConversationNodeType_Simple
  sourceInSceneRef {
    id: "53e487bd373361dc060052e3"
  }
}
nodes {
  idRef {
    id: "55caa491353733a80a000ec0"
  }
  index: 3
  text: "{{GM}}The agent splays its hands.{{/GM}}\n\nYes, it can be confusing to people not used to holographic programing. Quantum servers need to be separated to prevent random entanglement. This separation is achieved first, by oscillating the data stream between the two server racks."
  branches {
    responseText: "{{GM}}Continue tutorial.{{/GM}}"
    nextNodeIndex: 4
  }
  branches {
    responseText: "{{GM}}Main menu.{{/GM}}"
    nextNodeIndex: 1
    auxiliaryLink: true
  }
  branches {
    responseText: "{{GM}}Walk away.{{/GM}}"
    nextNodeIndex: -1
  }
  nodeType: ConversationNodeType_Simple
  sourceInSceneRef {
    id: "53e487bd373361dc060052e3"
  }
}
nodes {
  idRef {
    id: "55caa6d6353733a80a000ec4"
  }
  index: 4
  text: "You begin by threading data into the servers, first activating the linked oscillator. Then encode data to each server as they become unlocked. The firewalls will prevent them from collapsing, so you can\'t thread into servers until the previous server is encoded."
  branches {
    responseText: "{{GM}}Continue tutorial.{{/GM}}"
    nextNodeIndex: 5
  }
  branches {
    responseText: "{{GM}}Main menu.{{/GM}}"
    nextNodeIndex: 1
    auxiliaryLink: true
  }
  branches {
    responseText: "{{GM}}Walk away.{{/GM}}"
    nextNodeIndex: -1
  }
  nodeType: ConversationNodeType_Simple
  sourceInSceneRef {
    id: "53e487bd373361dc060052e3"
  }
}
nodes {
  idRef {
    id: "55caa6d6353733a80a000ec4"
  }
  index: 5
  text: "Once you have the servers encoded, execute your code and a bit will be built at the final server. If you already have a bit, it will instantly entangle the built bit, even with the separation, so don\'t execute code if you have a bit. The trick is that it\'s simpler than you might be thinking."
  branches {
    responseText: "{{GM}}Main menu.{{/GM}}"
    nextNodeIndex: 1
    auxiliaryLink: true
  }
  branches {
    responseText: "{{GM}}Walk away.{{/GM}}"
    nextNodeIndex: -1
  }
  nodeType: ConversationNodeType_Simple
  sourceInSceneRef {
    id: "53e487bd373361dc060052e3"
  }
}
nodes {
  idRef {
    id: "55c676e535373314070009b2"
  }
  index: 6
  text: "{{GM}}The hologram cocks its head at you.{{/GM}}\n\nBits are very fragile, $(l.sir). If they are taken out of active memory, they degrade instantly. If two or more Bits are placed in the same optical memory space, they entangle and become an inert byte. Perhaps you would be better buying one than building it..."
  branches {
    responseText: "It was just a question..."
    nextNodeIndex: 1
    auxiliaryLink: true
  }
  branches {
    responseText: "{{GM}}Main menu.{{/GM}}"
    nextNodeIndex: 1
    auxiliaryLink: true
  }
  branches {
    responseText: "{{GM}}Walk away.{{/GM}}"
    nextNodeIndex: -1
  }
  nodeType: ConversationNodeType_Simple
  sourceInSceneRef {
    id: "53e487bd373361dc060052e3"
  }
}
roots {
  nextNodeIndex: 0
}
