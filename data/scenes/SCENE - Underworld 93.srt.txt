triggers {
  name: "--==== Interior Triggers ====--"
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: true
  idRef {
    id: "546fbe9e6665388408000886"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Interior.MapLoad"
  events {
    ops {
      functionName: "On Map Start"
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "bol_NewtConversation"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Set Animation State Of Actor To Animation Modifier"
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "AnimationState"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "54692cff666538980e0013ad"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (AnimationModifiers)"
          args {
            string_value: "bouncer"
          }
          args {
            string_value: "bouncer"
          }
        }
      }
    }
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "54692c60666538980e0013ac"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "Seattle:General/standing_idle_flirty"
          }
        }
      }
    }
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "5469329d666538980e0013b1"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "Berlin:General/standing_idle_leaning"
          }
        }
      }
    }
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "bol_PlayerHasWeapon"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Set Actor Display Name"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "54701bad666538ac03001cec"
              }
            }
          }
          args {
          }
        }
      }
      args {
        string_value: "Mr. Johnson"
      }
    }
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "bol_StudioOccupied"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Set Animation State Of Actor To Animation Modifier"
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "AnimationState"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "548633f06665386c06007a80"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (AnimationModifiers)"
          args {
            string_value: "mentalPatient_rocking"
          }
          args {
            string_value: "rocking"
          }
        }
      }
    }
    ops {
      functionName: "Set Animation State Of Actor To Animation Modifier"
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "AnimationState"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "548634236665386c06007a83"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (AnimationModifiers)"
          args {
            string_value: "btltweaking"
          }
          args {
            string_value: "btltweaking"
          }
        }
      }
    }
    ops {
      functionName: "Set Animation State Of Actor To Animation Modifier"
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "AnimationState"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "548632b86665386c06007a7e"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (AnimationModifiers)"
          args {
            string_value: "mentalPatient_headbanging"
          }
          args {
            string_value: "headBanging"
          }
        }
      }
    }
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "54b98c0f666538c000000870"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "Seattle:General/standing_idle_sexy"
          }
        }
      }
    }
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "54b48e9d666538ec0c004cca"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "Berlin:General/standing_idle_leaning"
          }
        }
      }
    }
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "5543293666313674130043d5"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "Seattle:General/rigging_dizzy_dumpshock"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "54693e95666538980e0013c1"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Interior.ReturnToExterior"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "5534fed03733613010004b02"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Teleport Actor"
      args {
        call_value {
          functionName: "All Actors on Team"
          args {
            call_value {
              functionName: "Get Preset Value (string)"
              args {
                string_value: "FactionList"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (SceneDimension)"
              args {
                string_value: "Default"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Center of Region"
          args {
            call_value {
              functionName: "Get Map Item (Region)"
              args {
                string_value: "54926e986665386c04004156"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 3
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "54b16c086665382009000fb9"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Interior.SecurityScanFailure"
  events {
    ops {
      functionName: "On Region Enter"
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "5469346f666538980e0013bb"
          }
        }
      }
    }
  }
  conditions {
    ops {
      functionName: "AND"
      args {
        call_value {
          functionName: "Comparison (bool)"
          args {
            call_value {
              functionName: "Get Variable (bool)"
              args {
                string_value: "bol_BypassedSecurity"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "IsOrIsNot"
              }
              args {
                int_value: 1
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "bool"
              }
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Comparison (bool)"
          args {
            call_value {
              functionName: "Get Variable (bool)"
              args {
                string_value: "bol_PlayerHasWeapon"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "IsOrIsNot"
              }
              args {
                int_value: 1
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "bool"
              }
              args {
                int_value: 1
              }
            }
          }
        }
      }
    }
    ops {
      functionName: "Comparison (Actor)"
      args {
        call_value {
          functionName: "Triggering Actor"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Player)"
          args {
            int_value: 0
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Light Transition"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "54693552666538980e0013be"
          }
        }
      }
      args {
        string_value: "hard:1:FF0000"
      }
    }
    ops {
      functionName: "Light Transition"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "54693426666538980e0013ba"
          }
        }
      }
      args {
        string_value: "hard:1:FF0000"
      }
    }
    ops {
      functionName: "Start Conversation"
      args {
        call_value {
          functionName: "Get Map Item (Conversation)"
          args {
            string_value: "546ff4746665388408000a2d"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "54692cff666538980e0013ad"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "546934d2666538980e0013bc"
  }
  elseActions {
    ops {
      functionName: "Light Transition"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "54693552666538980e0013be"
          }
        }
      }
      args {
        string_value: "cubic:1:000000"
      }
    }
    ops {
      functionName: "Light Transition"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "54693426666538980e0013ba"
          }
        }
      }
      args {
        string_value: "cubic:1:000000"
      }
    }
  }
  is_oneshot: false
}
triggers {
  name: "Interior.SecurityScanReset"
  events {
    ops {
      functionName: "On Region Exit"
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "5469346f666538980e0013bb"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Light Transition"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "54693552666538980e0013be"
          }
        }
      }
      args {
        string_value: "hard:1:000000"
      }
    }
    ops {
      functionName: "Light Transition"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "54693426666538980e0013ba"
          }
        }
      }
      args {
        string_value: "hard:1:000000"
      }
    }
  }
  isActive: true
  idRef {
    id: "548642ee6665386c06007b00"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Interior.WeaponsClerkInteraction"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "54692c60666538980e0013ac"
          }
        }
      }
    }
  }
  conditions {
    ops {
      functionName: "AND"
      args {
        call_value {
          functionName: "Comparison (bool)"
          args {
            call_value {
              functionName: "Get Variable (bool)"
              args {
                string_value: "bol_BypassedSecurity"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "IsOrIsNot"
              }
              args {
                int_value: 1
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "bool"
              }
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Comparison (bool)"
          args {
            call_value {
              functionName: "Get Variable (bool)"
              args {
                string_value: "bol_PlayerHasWeapon"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "IsOrIsNot"
              }
              args {
                int_value: 1
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "bool"
              }
              args {
                int_value: 1
              }
            }
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Start Conversation"
      args {
        call_value {
          functionName: "Get Map Item (Conversation)"
          args {
            string_value: "54694269666538980e0013c3"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "54692c60666538980e0013ac"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "547005dc6665388408000aa2"
  }
  elseActions {
    ops {
      functionName: "Display Text over Actor"
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "54692c60666538980e0013ac"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TextPopupStyle"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        string_value: "Enjoy your evening, $(l.sir)."
      }
      args {
        float_value: 255
      }
      args {
        float_value: 108
      }
      args {
        float_value: 253
      }
      args {
        float_value: 255
      }
      args {
        float_value: 8
      }
      args {
        float_value: 3
      }
      args {
        float_value: 0
      }
    }
    ops {
      functionName: "Enable/Disable Interactable Object"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "54692c60666538980e0013ac"
          }
        }
      }
    }
  }
  is_oneshot: false
}
triggers {
  name: "Interior.DoorGuardInteraction"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "54692cff666538980e0013ad"
          }
        }
      }
    }
  }
  conditions {
    ops {
      functionName: "AND"
      args {
        call_value {
          functionName: "Comparison (bool)"
          args {
            call_value {
              functionName: "Get Variable (bool)"
              args {
                string_value: "bol_BypassedSecurity"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "IsOrIsNot"
              }
              args {
                int_value: 1
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "bool"
              }
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Comparison (bool)"
          args {
            call_value {
              functionName: "Get Variable (bool)"
              args {
                string_value: "bol_PlayerHasWeapon"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "IsOrIsNot"
              }
              args {
                int_value: 1
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "bool"
              }
              args {
                int_value: 1
              }
            }
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Start Conversation"
      args {
        call_value {
          functionName: "Get Map Item (Conversation)"
          args {
            string_value: "546ff4746665388408000a2d"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "54692cff666538980e0013ad"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "547008556665388408000aa3"
  }
  elseActions {
    ops {
      functionName: "Display Text over Actor"
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "54692cff666538980e0013ad"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TextPopupStyle"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        string_value: "Go on in."
      }
      args {
        float_value: 0
      }
      args {
        float_value: 255
      }
      args {
        float_value: 0
      }
      args {
        float_value: 128
      }
      args {
        float_value: 7
      }
      args {
        float_value: 3
      }
      args {
        float_value: 0
      }
    }
    ops {
      functionName: "Enable/Disable Interactable Object"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "54692cff666538980e0013ad"
          }
        }
      }
    }
  }
  is_oneshot: false
}
triggers {
  name: "Interior.WeaponRemoval"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eWeaponSurrender"
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Enable/Disable Interactable Object"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "54b48e9d666538ec0c004cca"
          }
        }
      }
    }
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "bol_PlayerHasWeapon"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "54700f246665388408000af4"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "     Team"
  events {
    ops {
      functionName: "On Region Enter"
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "5537bdb3373361b416007727"
          }
        }
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (Actor)"
      args {
        call_value {
          functionName: "Triggering Actor"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Player)"
          args {
            int_value: 0
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Remove Item from Actor"
      args {
        call_value {
          functionName: "Get Map Item (Item)"
          args {
            string_value: "Berlin_Sh 1 Benelli (Sawed Off)"
          }
        }
      }
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Nearest Tagged Actor to Actor"
              args {
                call_value {
                  functionName: "Tag From String"
                  args {
                    string_value: "isBlight"
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 0
                  }
                }
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Remove Item from Actor"
      args {
        call_value {
          functionName: "Get Map Item (Item)"
          args {
            string_value: "Berlin_AR 1 Semopal vz88v (Smartlink)"
          }
        }
      }
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Nearest Tagged Actor to Actor"
              args {
                call_value {
                  functionName: "Tag From String"
                  args {
                    string_value: "isElJefe"
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 0
                  }
                }
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Remove Item from Actor"
      args {
        call_value {
          functionName: "Get Map Item (Item)"
          args {
            string_value: "Berlin_DroneAttackC_Doberman"
          }
        }
      }
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Nearest Tagged Actor to Actor"
              args {
                call_value {
                  functionName: "Tag From String"
                  args {
                    string_value: "isElJefe"
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 0
                  }
                }
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Remove Item from Actor"
      args {
        call_value {
          functionName: "Get Map Item (Item)"
          args {
            string_value: "Gunners vz88v"
          }
        }
      }
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Nearest Tagged Actor to Actor"
              args {
                call_value {
                  functionName: "Tag From String"
                  args {
                    string_value: "isGunner"
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 0
                  }
                }
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Remove Item from Actor"
      args {
        call_value {
          functionName: "Get Map Item (Item)"
          args {
            string_value: "Sword 2 Axe"
          }
        }
      }
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Nearest Tagged Actor to Actor"
              args {
                call_value {
                  functionName: "Tag From String"
                  args {
                    string_value: "isLuna"
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 0
                  }
                }
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Remove Item from Actor"
      args {
        call_value {
          functionName: "Get Map Item (Item)"
          args {
            string_value: "SMG 1 Uzi III (Silencer)"
          }
        }
      }
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Nearest Tagged Actor to Actor"
              args {
                call_value {
                  functionName: "Tag From String"
                  args {
                    string_value: "isNebel"
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 0
                  }
                }
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Remove Item from Actor"
      args {
        call_value {
          functionName: "Get Map Item (Item)"
          args {
            string_value: "Berlin_Pi 1 Taser"
          }
        }
      }
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Nearest Tagged Actor to Actor"
              args {
                call_value {
                  functionName: "Tag From String"
                  args {
                    string_value: "isPadre"
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 0
                  }
                }
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Remove Item from Actor"
      args {
        call_value {
          functionName: "Get Map Item (Item)"
          args {
            string_value: "Shivers Super WarHawk"
          }
        }
      }
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Nearest Tagged Actor to Actor"
              args {
                call_value {
                  functionName: "Tag From String"
                  args {
                    string_value: "isShiver"
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 0
                  }
                }
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Remove Item from Actor"
      args {
        call_value {
          functionName: "Get Map Item (Item)"
          args {
            string_value: "Pi 1 Ceska Black Scorpion (Silencer)"
          }
        }
      }
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Nearest Tagged Actor to Actor"
              args {
                call_value {
                  functionName: "Tag From String"
                  args {
                    string_value: "isSilverArrow"
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 0
                  }
                }
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Remove Item from Actor"
      args {
        call_value {
          functionName: "Get Map Item (Item)"
          args {
            string_value: "Berlin_AR 1 AK98 (Smartlink)"
          }
        }
      }
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Nearest Tagged Actor to Actor"
              args {
                call_value {
                  functionName: "Tag From String"
                  args {
                    string_value: "isSucio"
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 0
                  }
                }
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Trigger"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "551f15fa663136f4130059c0"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "551f15fa663136f4130059c0"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "     Player"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eWeaponSurrender"
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Remove Item from Actor"
      args {
        call_value {
          functionName: "Get Map Item (Item)"
          args {
            string_value: "Pi 1 Fichetti Security 500"
          }
        }
      }
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 0
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "551f19cc663136f4130059d6"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Interior.SecurityBypass"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eSecurityBypassed"
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "bol_BypassedSecurity"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Set Goal Status"
      args {
        call_value {
          functionName: "Get Map Item (Goal)"
          args {
            string_value: "Bypass Security"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "GoalStatus"
          }
          args {
            int_value: 2
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "54700f6f6665388408000af5"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Interior.GoBackStage"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "553acd2e663136380c00134d"
          }
        }
      }
    }
  }
  conditions {
    ops {
      functionName: "Evaluate Goal"
      args {
        call_value {
          functionName: "Get Map Item (Goal)"
          args {
            string_value: "Find a way backstage"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "GoalStatus"
          }
          args {
            int_value: 2
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Set Goal Status"
      args {
        call_value {
          functionName: "Get Map Item (Goal)"
          args {
            string_value: "Find a way backstage"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "GoalStatus"
          }
          args {
            int_value: 2
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Set Screen Label"
      args {
        string_value: "Objective"
      }
      args {
        string_value: "Meet Mr. Johnson backstage"
      }
    }
    ops {
      functionName: "Set Screen Label"
      args {
        string_value: "Location"
      }
      args {
        string_value: "Location: U93 Backstage"
      }
    }
    ops {
      functionName: "Teleport Actor"
      args {
        call_value {
          functionName: "All Actors on Team"
          args {
            call_value {
              functionName: "Get Preset Value (string)"
              args {
                string_value: "FactionList"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (SceneDimension)"
              args {
                string_value: "Default"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Center of Region"
          args {
            call_value {
              functionName: "Get Map Item (Region)"
              args {
                string_value: "5470220a6665384809001323"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 7
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Teleport Camera To Actor"
      args {
        call_value {
          functionName: "Get Map Item (Player)"
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Set Waypoint on Prop"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "PrimaryOrSecondary"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "5534f76537336130100044e0"
          }
        }
      }
    }
    ops {
      functionName: "Add Actor Karma"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 0
              }
            }
          }
          args {
          }
        }
      }
      args {
        int_value: 5
      }
    }
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "547016536665388408000b78"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "Seattle:General/standing_idle_junky"
          }
        }
      }
    }
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "54b95a18666538900b00590f"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "Seattle:General/standing_idle_preen"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "547022676665384809001325"
  }
  elseActions {
    ops {
      functionName: "Set Screen Label"
      args {
        string_value: "Objective"
      }
      args {
        string_value: "Meet Mr. Johnson backstage"
      }
    }
    ops {
      functionName: "Set Screen Label"
      args {
        string_value: "Location"
      }
      args {
        string_value: "Location: U93 Backstage"
      }
    }
    ops {
      functionName: "Teleport Actor"
      args {
        call_value {
          functionName: "All Actors on Team"
          args {
            call_value {
              functionName: "Get Preset Value (string)"
              args {
                string_value: "FactionList"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (SceneDimension)"
              args {
                string_value: "Default"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Center of Region"
          args {
            call_value {
              functionName: "Get Map Item (Region)"
              args {
                string_value: "5470220a6665384809001323"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 7
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Teleport Camera To Actor"
      args {
        call_value {
          functionName: "Get Map Item (Player)"
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Set Waypoint on Prop"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "PrimaryOrSecondary"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "5534f76537336130100044e0"
          }
        }
      }
    }
  }
  is_oneshot: false
}
triggers {
  name: "Interior.ReturnFromBackStage"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "5466d1bc613131f810006123"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Set Screen Label"
      args {
        string_value: "Location"
      }
      args {
        string_value: "Location: U93 Interior"
      }
    }
    ops {
      functionName: "Teleport Actor"
      args {
        call_value {
          functionName: "All Actors on Team"
          args {
            call_value {
              functionName: "Get Preset Value (string)"
              args {
                string_value: "FactionList"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (SceneDimension)"
              args {
                string_value: "Default"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Center of Region"
          args {
            call_value {
              functionName: "Get Map Item (Region)"
              args {
                string_value: "553acdd4663136380c001351"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Teleport Camera To Actor"
      args {
        call_value {
          functionName: "Get Map Item (Player)"
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "547023766665384809001327"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Interior.StoreRoomUnlock"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "5466d1bc613131f81000621d"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Start Conversation"
      args {
        call_value {
          functionName: "Get Map Item (Conversation)"
          args {
            string_value: "547024d26665384809001337"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "54702c9c6665384809001367"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "54702c456665384809001366"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Interior.FemaleBartender"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "5470cf45666538c40b000b36"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Start Conversation"
      args {
        call_value {
          functionName: "Get Map Item (Conversation)"
          args {
            string_value: "5470e485666538c40b000b59"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "5470cf45666538c40b000b36"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "5470fbc9666538c40b000c7d"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Interior.MaleBartender"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "5470cf94666538c40b000b37"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Start Conversation"
      args {
        call_value {
          functionName: "Get Map Item (Conversation)"
          args {
            string_value: "5470e8f7666538c40b000b9e"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "5470cf94666538c40b000b37"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "5470fbe5666538c40b000c7e"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Interior.Rumor"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateRumor"
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Set Variable (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "int_Rumor"
          }
        }
      }
      args {
        call_value {
          functionName: "Random (int)"
          args {
            int_value: 1
          }
          args {
            int_value: 8
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "5470eff7666538c40b000c66"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "   Rumor1"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateRumor"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "int_Rumor"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 1
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "str_Rumor"
          }
        }
      }
      args {
        string_value: "I heard that the combat biker team BurnOut is looking to recruit our big troll guard."
      }
    }
  }
  isActive: true
  idRef {
    id: "5470f03c666538c40b000c67"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "   Rumor2"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateRumor"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "int_Rumor"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 2
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "str_Rumor"
          }
        }
      }
      args {
        string_value: "I heard there was a big falling out between Mercurial and her old manager."
      }
    }
  }
  isActive: true
  idRef {
    id: "5470f08a666538c40b000c6d"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "   Rumor3"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateRumor"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "int_Rumor"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 3
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "str_Rumor"
          }
        }
      }
      args {
        string_value: "Heard some \'hero cop\' here in Seattle got the key to the city after he caught the Ripper.   Rumor has it that it was actually some shadowrunner, but it\'s not like the mayor going to honor one of them..."
      }
    }
  }
  isActive: true
  idRef {
    id: "5470f08c666538c40b000c6e"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "   Rumor4"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateRumor"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "int_Rumor"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 4
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "str_Rumor"
          }
        }
      }
      args {
        string_value: "Did you hear?   There is a group of deckers working together from all over the globe building some sort of big mods?  Rumor has it that they could be anywhere!"
      }
    }
  }
  isActive: true
  idRef {
    id: "5470f08d666538c40b000c6f"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "   Rumor5"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateRumor"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "int_Rumor"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 5
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "str_Rumor"
          }
        }
      }
      args {
        string_value: "You know, I used to be adventurous like you... until I took a round in the knee..."
      }
    }
  }
  isActive: true
  idRef {
    id: "5470f08e666538c40b000c70"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "   Rumor6"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateRumor"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "int_Rumor"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 6
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "str_Rumor"
          }
        }
      }
      args {
        string_value: "I\'ve heard that there is an armored car traveling across Seattle, loaded with some serious high-tech loot... Huge payday for someone with the skills to pull it off."
      }
    }
  }
  isActive: true
  idRef {
    id: "5470f090666538c40b000c71"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "   Rumor7"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateRumor"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "int_Rumor"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 7
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "str_Rumor"
          }
        }
      }
      args {
        string_value: "I heard Mecurial\'s actually some sort of government spy! Think about it... who get more access and fewer restrictions than a rock star! \n\nSuppose to be here to meet her contact tonight... Keep your eyes open...\n"
      }
    }
  }
  isActive: true
  idRef {
    id: "5470f091666538c40b000c72"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "   Rumor8"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateRumor"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "int_Rumor"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 8
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "str_Rumor"
          }
        }
      }
      args {
        string_value: "I heard there was a meeting set up at a local Stuffer Shack where the Johnson was killed. Last I heard, all the runners disappeared, and there is some SERIOUS corp types investigating."
      }
    }
  }
  isActive: true
  idRef {
    id: "5470f0ab666538c40b000c73"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Interior.BackStageGuard"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "548635c56665386c06007a85"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Start Conversation"
      args {
        call_value {
          functionName: "Get Map Item (Conversation)"
          args {
            string_value: "548636f06665386c06007a97"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "548635c56665386c06007a85"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "54863b376665386c06007ac9"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Interior.BackRoomDesk"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "5466d1bc613131f81000635c"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Add Nuyen"
      args {
        call_value {
          functionName: "Random (int)"
          args {
            int_value: 212
          }
          args {
            int_value: 376
          }
        }
      }
    }
    ops {
      functionName: "Add Item to Actor"
      args {
        call_value {
          functionName: "Get Map Item (Item)"
          args {
            string_value: "Pi 1 Ceska Black Scorpion"
          }
        }
      }
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Triggering Actor"
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Interactable Object"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "5466d1bc613131f81000635c"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "54b48d11666538ec0c004cc6"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Interior.BackRoomRack"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "553adc95663136380c001440"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Add Item to Actor"
      args {
        call_value {
          functionName: "Get Map Item (Item)"
          args {
            string_value: "Player_DeckerFedora"
          }
        }
      }
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Triggering Actor"
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Interactable Object"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "553adc95663136380c001440"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "54b48e0b666538ec0c004cc9"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Interior.ShadyPatron"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "54b48e9d666538ec0c004cca"
          }
        }
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "str_BackRoomAccessCode"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        string_value: "Access Code: 5-1-5-0"
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "str_ShadyIntro"
          }
        }
      }
      args {
        string_value: "Tough break losing your drek like that... If I was to tell you I knew where you could find some serviceable replacements... would you be interested?"
      }
    }
    ops {
      functionName: "Start Conversation"
      args {
        call_value {
          functionName: "Get Map Item (Conversation)"
          args {
            string_value: "54b4908d666538ec0c004ccd"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "54b48e9d666538ec0c004cca"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "54b48fe7666538ec0c004ccc"
  }
  elseActions {
    ops {
      functionName: "Display Text over Actor"
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "54b48e9d666538ec0c004cca"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TextPopupStyle"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        string_value: "I ain\'t got nothing else for ya..."
      }
      args {
        float_value: 0
      }
      args {
        float_value: 0
      }
      args {
        float_value: 0
      }
      args {
        float_value: 0
      }
      args {
        float_value: 6
      }
      args {
        float_value: 3
      }
      args {
        float_value: 0
      }
    }
    ops {
      functionName: "Enable/Disable Interactable Object"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "54b48e9d666538ec0c004cca"
          }
        }
      }
    }
  }
  is_oneshot: false
}
triggers {
  name: "Interior.LoneStarWarning"
  events {
    ops {
      functionName: "On Region Enter"
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "54b98dd4666538c0000008a7"
          }
        }
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (Actor)"
      args {
        call_value {
          functionName: "Triggering Actor"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Player)"
          args {
            int_value: 0
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Set Region Enabled"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "54b98dd4666538c0000008a7"
          }
        }
      }
    }
    ops {
      functionName: "Display Text over Actor"
      args {
        call_value {
          functionName: "Get Random Actor on Team"
          args {
            call_value {
              functionName: "Get Preset Value (string)"
              args {
                string_value: "FactionList"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (SceneDimension)"
              args {
                string_value: "Default"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TextPopupStyle"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        string_value: "Sure is quite a bit of LoneStar roaming around here... Better be careful."
      }
      args {
        float_value: 0
      }
      args {
        float_value: 255
      }
      args {
        float_value: 0
      }
      args {
        float_value: 128
      }
      args {
        float_value: 7
      }
      args {
        float_value: 3
      }
      args {
        float_value: 0
      }
    }
    ops {
      functionName: "Clear Waypoint from Actor"
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "54692c60666538980e0013ac"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "54b98e28666538c0000008a8"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Interior.TalkingWithTellin"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "54b98095666538b409004df3"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Start Conversation"
      args {
        call_value {
          functionName: "Get Map Item (Conversation)"
          args {
            string_value: "54bb13bc666538f00e006d17"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "54b98095666538b409004df3"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "54bb1b8e666538f00e006da8"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Interior.TalkingWithAaron"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "54bb1eed666538f00e006e26"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Start Conversation"
      args {
        call_value {
          functionName: "Get Map Item (Conversation)"
          args {
            string_value: "54bb20eb666538f00e006e83"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "54bb1eed666538f00e006e26"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "54bb1fc9666538f00e006e28"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Interior.BackstageAccessDenied"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eDeniedBackstageAccess"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "bBackstageDenied"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Display Text over Actor"
      args {
        call_value {
          functionName: "Get Random Actor on Team"
          args {
            call_value {
              functionName: "Get Preset Value (string)"
              args {
                string_value: "FactionList"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (SceneDimension)"
              args {
                string_value: "Default"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TextPopupStyle"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        string_value: "Hmm... Guess we\'ll have to make some alternative arrangments..."
      }
      args {
        float_value: 0
      }
      args {
        float_value: 255
      }
      args {
        float_value: 0
      }
      args {
        float_value: 128
      }
      args {
        float_value: 7
      }
      args {
        float_value: 3
      }
      args {
        float_value: 0
      }
    }
    ops {
      functionName: "Set Screen Label"
      args {
        string_value: "Objective"
      }
      args {
        string_value: "Find a way backstage."
      }
    }
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "bAlternatePath"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "5503c97c6631364c07005a02"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Interior.BathroomFire"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "5534f7653733613010004345"
          }
        }
      }
    }
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "5534f76537336130100042b9"
          }
        }
      }
    }
  }
  conditions {
    ops {
      functionName: "Evaluate Tag for Prop"
      args {
        call_value {
          functionName: "Triggering Prop"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "HasOrHasNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isMale"
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Set Prop Visible"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "5503cc0d6631364c07005a5a"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Interactable Object"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "5534f7653733613010004345"
          }
        }
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eBathroomFire"
          }
        }
      }
      args {
        float_value: 5
      }
    }
  }
  isActive: true
  idRef {
    id: "5503ccc06631364c07005a81"
  }
  elseActions {
    ops {
      functionName: "Set Prop Visible"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "5503cc066631364c07005a59"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Interactable Object"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "5534f76537336130100042b9"
          }
        }
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eBathroomFire"
          }
        }
      }
      args {
        float_value: 5
      }
    }
  }
  is_oneshot: true
}
triggers {
  name: "Interior.BackStageGuard [React Fire]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eBathroomFire"
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Set Actor In Passive Mode"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "548635c56665386c06007a85"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Set Actor Run Speed"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "548635c56665386c06007a85"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "RunSpeedMethod"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Order Actor to Move To (Region)"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "548635c56665386c06007a85"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "5503ce5d6631364c07005a86"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 7
          }
        }
      }
    }
    ops {
      functionName: "Suspend Team\'s Turn"
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 2
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Trigger: Wait for Rounds"
      args {
        int_value: 1
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "5503ce216631364c07005a85"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Interior.BackStageGuard [Fire Comment]"
  events {
    ops {
      functionName: "On Region Enter"
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "5503ce5d6631364c07005a86"
          }
        }
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (Actor)"
      args {
        call_value {
          functionName: "Triggering Actor"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "548635c56665386c06007a85"
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Add Camera Point of Interest (Actors)"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "548635c56665386c06007a85"
              }
            }
          }
          args {
          }
        }
      }
      args {
        float_value: 1
      }
    }
    ops {
      functionName: "Display Text over Actor"
      args {
        call_value {
          functionName: "Triggering Actor"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TextPopupStyle"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        string_value: "What the hell is going on over there?"
      }
      args {
        float_value: 255
      }
      args {
        float_value: 0
      }
      args {
        float_value: 0
      }
      args {
        float_value: 128
      }
      args {
        float_value: 7
      }
      args {
        float_value: 3
      }
      args {
        float_value: 0
      }
    }
    ops {
      functionName: "Set Region Enabled"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "5503ce5d6631364c07005a86"
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Interactable Object"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "548635c56665386c06007a85"
          }
        }
      }
    }
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "bBackstageDenied"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "5503cea36631364c07005a87"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Interior.BypassBackStageGuard"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "553519433733612413004262"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Set Screen Label"
      args {
        string_value: "Objective"
      }
      args {
        string_value: "Go meet Mr. Johnson backstage"
      }
    }
    ops {
      functionName: "Clear All Waypoints"
    }
    ops {
      functionName: "Set Waypoint on Prop"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "PrimaryOrSecondary"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "553acd2e663136380c00134d"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "5503cdb96631364c07005a84"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: ""
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: true
  idRef {
    id: "546fbec56665388408000888"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "--==== Exterior Triggers ====--"
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: true
  idRef {
    id: "546fbebf6665388408000887"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Exterior.DisablePlayer(s) For Bus Arrival"
  events {
    ops {
      functionName: "On Curtains Up"
    }
  }
  conditions {
    ops {
      functionName: "Comparison (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "bNoSpawn_FOR_THOMAS"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Enable/Disable Team\'s Turn"
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "54b48967666538ec0c004c3b"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Exterior.MapLoad"
  events {
    ops {
      functionName: "On Map Start"
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Set Environmental Effect Amount"
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "EnvironmentalEffects"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 750
      }
    }
    ops {
      functionName: "Set Screen Label"
      args {
        string_value: "Location"
      }
      args {
        string_value: "Location: U93 Exterior"
      }
    }
    ops {
      functionName: "Set Screen Label"
      args {
        string_value: "Objective"
      }
      args {
        string_value: "Enter the Club"
      }
    }
    ops {
      functionName: "Set Waypoint on Actor"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "PrimaryOrSecondary"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "54838b45666538ac0900674f"
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "BusOpen"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "BusPartial"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "BusLights"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Teleport Camera To Point"
      args {
        call_value {
          functionName: "Center of Region"
          args {
            call_value {
              functionName: "Get Map Item (Region)"
              args {
                string_value: "5470fd7c666538c40b000c82"
              }
            }
          }
        }
      }
    }
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "bol_SavedByMaria"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Set Animation State Of Actor To Animation Modifier"
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "AnimationState"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "54838b45666538ac0900674f"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (AnimationModifiers)"
          args {
            string_value: "bouncer"
          }
          args {
            string_value: "bouncer"
          }
        }
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eBusNew"
          }
        }
      }
      args {
        call_value {
          functionName: "Random (float)"
          args {
            float_value: 1
          }
          args {
            float_value: 3
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isFire"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "54838b45666538ac0900674f"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "Seattle:General/standing_idle_bouncer"
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isFenceBroken"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isSmoke"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isTires"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isSiren"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "546fbcf1666538840800087f"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Exterior.DEBUGGERMODE"
  events {
    ops {
      functionName: "On Map Start"
    }
  }
  conditions {
    ops {
      functionName: "Comparison (bool)"
      args {
        call_value {
          functionName: "Get Story Variable (bool)"
          args {
            string_value: "542848a8633464d816001ad5"
          }
          args {
            string_value: "DEBUGGERMODE"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Enable/Disable Interactable Object"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "5537adcb373361b4160076e0"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55452849663136a4130019fb"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Exterior.ClubEntry"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "546fe1db66653884080008ba"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Clear All Waypoints"
    }
    ops {
      functionName: "Set Environmental Effect Amount"
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "EnvironmentalEffects"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 0
      }
    }
    ops {
      functionName: "Set Goal Status"
      args {
        call_value {
          functionName: "Get Map Item (Goal)"
          args {
            string_value: "Enter Underworld 93"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "GoalStatus"
          }
          args {
            int_value: 2
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Set Goal Status"
      args {
        call_value {
          functionName: "Get Map Item (Goal)"
          args {
            string_value: "Find a way backstage"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "GoalStatus"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Trigger"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "546fc046666538840800088a"
          }
        }
      }
    }
    ops {
      functionName: "Set Screen Label"
      args {
        string_value: "Objective"
      }
      args {
        string_value: "Meet Mr. Johnson backstage."
      }
    }
    ops {
      functionName: "Set Screen Label"
      args {
        string_value: "Location"
      }
      args {
        string_value: "Location: U93 Interior"
      }
    }
    ops {
      functionName: "Teleport Actor"
      args {
        call_value {
          functionName: "All Actors on Team"
          args {
            call_value {
              functionName: "Get Preset Value (string)"
              args {
                string_value: "FactionList"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (SceneDimension)"
              args {
                string_value: "Default"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Center of Region"
          args {
            call_value {
              functionName: "Get Map Item (Region)"
              args {
                string_value: "546fe24466653884080008bd"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Teleport Camera To Actor"
      args {
        call_value {
          functionName: "Get Map Item (Player)"
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Set Waypoint on Actor"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "PrimaryOrSecondary"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "54692c60666538980e0013ac"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "546fe1df66653884080008bb"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Exterior.ClubApproach"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "54838b45666538ac0900674f"
          }
        }
      }
    }
  }
  conditions {
    ops {
      functionName: "Evaluate If Actor is Inside Region"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "54838b45666538ac0900674f"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "AreOrAreNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "54926e986665386c04004156"
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Start Conversation"
      args {
        call_value {
          functionName: "Get Map Item (Conversation)"
          args {
            string_value: "5503d52b6631364c07005af2"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "54838b45666538ac0900674f"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "54926eca6665386c04004157"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Exterior.Heckling [Start Hecklers]"
  events {
    ops {
      functionName: "On Region Enter"
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "54926e986665386c04004156"
          }
        }
      }
    }
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eHeckling"
      }
    }
  }
  conditions {
    ops {
      functionName: "Evaluate If Actor is Inside Region"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 0
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "AreOrAreNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "54926e986665386c04004156"
          }
        }
      }
    }
    ops {
      functionName: "Comparison (Actor)"
      args {
        call_value {
          functionName: "Triggering Actor"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Player)"
          args {
            int_value: 0
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eHeckling"
          }
        }
      }
      args {
        call_value {
          functionName: "Random (float)"
          args {
            float_value: 4
          }
          args {
            float_value: 8
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "5486577e666538ec0e007b6e"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Exterior.Heckling"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eHeckling"
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Set Variable (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "int_Heckler"
          }
        }
      }
      args {
        call_value {
          functionName: "Random (int)"
          args {
            int_value: 1
          }
          args {
            int_value: 8
          }
        }
      }
    }
    ops {
      functionName: "Set Variable (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "int_HecklerMessage"
          }
        }
      }
      args {
        call_value {
          functionName: "Random (int)"
          args {
            int_value: 1
          }
          args {
            int_value: 6
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "549271086665386c04004164"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "   Heckler-1"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eHeckling"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "int_HecklerMessage"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 1
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "str_HecklerText"
          }
        }
      }
      args {
        string_value: "Back of the line, drek-head!"
      }
    }
  }
  isActive: true
  idRef {
    id: "549271966665386c04004167"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "   Heckler-2"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eHeckling"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "int_HecklerMessage"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 2
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "str_HecklerText"
          }
        }
      }
      args {
        string_value: "Lines over here, pal."
      }
    }
  }
  isActive: true
  idRef {
    id: "549271dc6665386c04004168"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "   Heckler-3"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eHeckling"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "int_HecklerMessage"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 3
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "str_HecklerText"
          }
        }
      }
      args {
        string_value: "I wish I was a $(l.race)... then I could cut the line too!"
      }
    }
  }
  isActive: true
  idRef {
    id: "549271dd6665386c04004169"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "   Heckler-4"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eHeckling"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "int_HecklerMessage"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 4
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "str_HecklerText"
          }
        }
      }
      args {
        string_value: "Frag that!  You go to the end of the line!"
      }
    }
  }
  isActive: true
  idRef {
    id: "549271df6665386c0400416a"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "   Heckler-5"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eHeckling"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "int_HecklerMessage"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 5
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "str_HecklerText"
          }
        }
      }
      args {
        string_value: "Fraggin $(l.guy)... Cutting in line!"
      }
    }
  }
  isActive: true
  idRef {
    id: "549271e06665386c0400416b"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "   Heckler-6"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eHeckling"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "int_HecklerMessage"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 6
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "str_HecklerText"
          }
        }
      }
      args {
        string_value: "Wait till I get in there... I\'m gonna fraggin\' kill you..."
      }
    }
  }
  isActive: true
  idRef {
    id: "549271e16665386c0400416c"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Exterior.DisplayHecklerText"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eHeckling"
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Display Text over Prop"
      args {
        call_value {
          functionName: "Nearest Tagged Prop to Prop"
          args {
            call_value {
              functionName: "Tag From String"
              args {
                call_value {
                  functionName: "Append (string)"
                  args {
                    call_value {
                      functionName: "Convert (int) to (string)"
                      args {
                        call_value {
                          functionName: "Get Variable (int)"
                          args {
                            string_value: "int_Heckler"
                          }
                        }
                      }
                    }
                  }
                  args {
                    string_value: "Heckler "
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (Prop)"
              args {
                string_value: "546fe1db66653884080008ba"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TextPopupStyle"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        string_value: "$(scene.str_HecklerText)"
      }
      args {
        call_value {
          functionName: "Random (float)"
          args {
            float_value: 0
          }
          args {
            float_value: 255
          }
        }
      }
      args {
        call_value {
          functionName: "Random (float)"
          args {
            float_value: 0
          }
          args {
            float_value: 255
          }
        }
      }
      args {
        call_value {
          functionName: "Random (float)"
          args {
            float_value: 0
          }
          args {
            float_value: 255
          }
        }
      }
      args {
        float_value: 128
      }
      args {
        float_value: 8
      }
      args {
        float_value: 3
      }
      args {
        float_value: 0
      }
    }
  }
  isActive: true
  idRef {
    id: "549271e36665386c0400416d"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: ""
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: true
  idRef {
    id: "546fc068666538840800088b"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "--==== Bus Travel ====--"
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: true
  idRef {
    id: "546fc071666538840800088c"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "   Start Bus Route"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eBusNew"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "bNoSpawn_FOR_THOMAS"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "5534f764373361301000401e"
          }
        }
      }
      args {
        call_value {
          functionName: "Specified Point (2D)"
          args {
            float_value: 24.7
          }
          args {
            float_value: 131
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isBus"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Send Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eBusMoveArrival"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "546fc046666538840800088a"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "      Bus Moving (Arrival)"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eBusMoveArrival"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (float)"
      args {
        call_value {
          functionName: "Point Component (float)"
          args {
            call_value {
              functionName: "Current Location of Prop"
              args {
                call_value {
                  functionName: "Get Map Item (Prop)"
                  args {
                    string_value: "5534f764373361301000401e"
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "VectorComponent"
              }
              args {
                int_value: 2
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 4
          }
        }
      }
      args {
        float_value: 184
      }
    }
  }
  actions {
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "5534f764373361301000401e"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Offset Point"
          args {
            call_value {
              functionName: "Current Location of Prop"
              args {
                call_value {
                  functionName: "Get Map Item (Prop)"
                  args {
                    string_value: "5534f764373361301000401e"
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Specified Point (2D)"
              args {
                float_value: 0
              }
              args {
                float_value: 1
              }
            }
          }
        }
      }
    }
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "5537b31d373361b4160076ed"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Offset Point"
          args {
            call_value {
              functionName: "Current Location of Prop"
              args {
                call_value {
                  functionName: "Get Map Item (Prop)"
                  args {
                    string_value: "5534f764373361301000401e"
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Specified Point (2D)"
              args {
                float_value: 0
              }
              args {
                float_value: 9
              }
            }
          }
        }
      }
    }
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "5534f7643733613010003ef7"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Offset Point"
          args {
            call_value {
              functionName: "Current Location of Prop"
              args {
                call_value {
                  functionName: "Get Map Item (Prop)"
                  args {
                    string_value: "5534f764373361301000401e"
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Specified Point (2D)"
              args {
                float_value: 0
              }
              args {
                float_value: 9
              }
            }
          }
        }
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eBusMoveArrival"
          }
        }
      }
      args {
        float_value: 0.06
      }
    }
  }
  isActive: true
  idRef {
    id: "546fc0ed666538840800088f"
  }
  elseActions {
    ops {
      functionName: "Send Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eBusArrival"
          }
        }
      }
    }
  }
  is_oneshot: false
}
triggers {
  name: "         BusArrive"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eBusArrival"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "bol_BusOpen"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Play Sound"
      args {
        call_value {
          functionName: "Get Map Item (Sound)"
          args {
            string_value: "Berlin:cyberware"
          }
          args {
            string_value: "Cyberware_Pneumatic_On"
          }
        }
      }
      args {
        float_value: 4
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "BusOpen"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "BusPartial"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "bol_BusOpen"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eBusArrival"
          }
        }
      }
      args {
        float_value: 0.25
      }
    }
  }
  isActive: true
  idRef {
    id: "546fbee66665388408000889"
  }
  elseActions {
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "BusLights"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "BusOpen"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Trigger: Run Alternate Trigger"
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "547033b06665384809001385"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WaitOrNot"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "BusPartial"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eBusDepart"
          }
        }
      }
      args {
        float_value: 6
      }
    }
  }
  is_oneshot: false
}
triggers {
  name: "            PlayerDisembark"
  events {
  }
  conditions {
    ops {
      functionName: "Comparison (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "bNoSpawn_FOR_THOMAS"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Enable/Disable Team\'s Turn"
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Teleport Actor"
      args {
        call_value {
          functionName: "All Actors on Team"
          args {
            call_value {
              functionName: "Get Preset Value (string)"
              args {
                string_value: "FactionList"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (SceneDimension)"
              args {
                string_value: "Default"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Center of Region"
          args {
            call_value {
              functionName: "Get Map Item (Region)"
              args {
                string_value: "5470fd7c666538c40b000c82"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Teleport Camera To Actor"
      args {
        call_value {
          functionName: "Get Map Item (Player)"
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Change Actor Team"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "546fbdba6665388408000884"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 3
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Play Sound"
      args {
        call_value {
          functionName: "Get Map Item (Sound)"
          args {
            string_value: "props"
          }
          args {
            string_value: "LadderClimb"
          }
        }
      }
      args {
        float_value: 3
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Trigger"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "547033b06665384809001385"
          }
        }
      }
    }
    ops {
      functionName: "Set Waypoint on Actor"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "PrimaryOrSecondary"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "54838b45666538ac0900674f"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "547033b06665384809001385"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "         BusDepart"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eBusDepart"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "bol_BusOpen"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Play Sound"
      args {
        call_value {
          functionName: "Get Map Item (Sound)"
          args {
            string_value: "Berlin:cyberware"
          }
          args {
            string_value: "Cyberware_Pneumatic_Off"
          }
        }
      }
      args {
        float_value: 4
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "BusLights"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "BusOpen"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "BusPartial"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "bol_BusOpen"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eBusDepart"
          }
        }
      }
      args {
        float_value: 0.25
      }
    }
  }
  isActive: true
  idRef {
    id: "546fc2c56665388408000890"
  }
  elseActions {
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "BusPartial"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "BusOpen"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Send Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eBusMoveDepart"
          }
        }
      }
    }
  }
  is_oneshot: false
}
triggers {
  name: "      Bus Moving (Depart)"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eBusMoveDepart"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (float)"
      args {
        call_value {
          functionName: "Point Component (float)"
          args {
            call_value {
              functionName: "Current Location of Prop"
              args {
                call_value {
                  functionName: "Get Map Item (Prop)"
                  args {
                    string_value: "5534f764373361301000401e"
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "VectorComponent"
              }
              args {
                int_value: 2
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 4
          }
        }
      }
      args {
        float_value: 316
      }
    }
  }
  actions {
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "5534f764373361301000401e"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Offset Point"
          args {
            call_value {
              functionName: "Current Location of Prop"
              args {
                call_value {
                  functionName: "Get Map Item (Prop)"
                  args {
                    string_value: "5534f764373361301000401e"
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Specified Point (2D)"
              args {
                float_value: 0
              }
              args {
                float_value: 1
              }
            }
          }
        }
      }
    }
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "5537b31d373361b4160076ed"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Offset Point"
          args {
            call_value {
              functionName: "Current Location of Prop"
              args {
                call_value {
                  functionName: "Get Map Item (Prop)"
                  args {
                    string_value: "5534f764373361301000401e"
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Specified Point (2D)"
              args {
                float_value: 0
              }
              args {
                float_value: 9
              }
            }
          }
        }
      }
    }
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "5534f7643733613010003ef7"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Offset Point"
          args {
            call_value {
              functionName: "Current Location of Prop"
              args {
                call_value {
                  functionName: "Get Map Item (Prop)"
                  args {
                    string_value: "5534f764373361301000401e"
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Specified Point (2D)"
              args {
                float_value: 0
              }
              args {
                float_value: 9
              }
            }
          }
        }
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eBusMoveDepart"
          }
        }
      }
      args {
        float_value: 0.06
      }
    }
  }
  isActive: true
  idRef {
    id: "546fc3596665388408000891"
  }
  elseActions {
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isBus"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  is_oneshot: false
}
triggers {
  name: ""
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: true
  idRef {
    id: "5470306b666538480900137a"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "--==== BackStage ====--"
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: true
  idRef {
    id: "547030676665384809001379"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Backstage.DisableMGRDoor Waypoint"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "5534f76537336130100044e0"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Clear Waypoint from Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "5534f76537336130100044e0"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "554304596631361c1100139a"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Backstage.OccupiedRoom"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "5534f7653733613010004440"
          }
        }
      }
    }
  }
  conditions {
    ops {
      functionName: "Compare Actor Gender"
      args {
        call_value {
          functionName: "Triggering Actor"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Gender"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Display Text over Actor"
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "5470165c6665388408000b7a"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TextPopupStyle"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        string_value: "Drek Bro... Occupied!"
      }
      args {
        float_value: 85
      }
      args {
        float_value: 255
      }
      args {
        float_value: 0
      }
      args {
        float_value: 128
      }
      args {
        float_value: 8
      }
      args {
        float_value: 3
      }
      args {
        float_value: 0
      }
    }
  }
  isActive: true
  idRef {
    id: "556b84d5663136e013004252"
  }
  elseActions {
    ops {
      functionName: "Display Text over Actor"
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "5470165c6665388408000b7a"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TextPopupStyle"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        string_value: "Two for one?  My lucky day!"
      }
      args {
        float_value: 85
      }
      args {
        float_value: 255
      }
      args {
        float_value: 0
      }
      args {
        float_value: 128
      }
      args {
        float_value: 8
      }
      args {
        float_value: 3
      }
      args {
        float_value: 0
      }
    }
  }
  is_oneshot: true
}
triggers {
  name: "Backstage.MaxFoley(Intro)"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "54701bad666538ac03001cec"
          }
        }
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "bol_MaxTalkedTo"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Start Conversation"
      args {
        call_value {
          functionName: "Get Map Item (Conversation)"
          args {
            string_value: "553274aa663136cc010059c1"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "54701bad666538ac03001cec"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Interactable Object"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "54701bad666538ac03001cec"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "54703079666538480900137b"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Backstage.Mercurial"
  events {
    ops {
      functionName: "On Conversation Complete"
    }
  }
  conditions {
    ops {
      functionName: "Comparison (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "bol_MaxTalkedTo"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Send Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eMariaEnters"
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Trigger"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "547260e6666538380900316d"
          }
        }
      }
    }
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "54701bad666538ac03001cec"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "Seattle:General/standing_idle"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "547260e6666538380900316d"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "   MecurialEnters"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eMariaEnters"
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Teleport Actor"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "54701d67666538ac03001cef"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Center of Region"
          args {
            call_value {
              functionName: "Get Map Item (Region)"
              args {
                string_value: "5470264a6665384809001364"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Order Actor to Move To (Region)"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "54701d67666538ac03001cef"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "548645376665386c06007b01"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 6
          }
        }
      }
    }
    ops {
      functionName: "Suspend Team\'s Turn"
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 2
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Trigger: Wait for Rounds"
      args {
        int_value: 1
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Remove Screen Label"
      args {
        string_value: "Objective"
      }
    }
  }
  isActive: true
  idRef {
    id: "548645546665386c06007b02"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "   MecurialSpeaks"
  events {
    ops {
      functionName: "On Region Enter"
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "548645376665386c06007b01"
          }
        }
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (Actor)"
      args {
        call_value {
          functionName: "Triggering Actor"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "54701d67666538ac03001cef"
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "54701d67666538ac03001cef"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "Seattle:General/standing_idle_sexy"
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Trigger"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "547260e6666538380900316d"
          }
        }
      }
    }
    ops {
      functionName: "Add Camera Point of Interest (Actors)"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "54701d67666538ac03001cef"
              }
            }
          }
          args {
          }
        }
      }
      args {
        float_value: 2
      }
    }
    ops {
      functionName: "Display Text over Actor"
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "54701d67666538ac03001cef"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TextPopupStyle"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        string_value: "Max... Darling... Who are your friends?"
      }
      args {
        float_value: 255
      }
      args {
        float_value: 108
      }
      args {
        float_value: 253
      }
      args {
        float_value: 128
      }
      args {
        float_value: 8
      }
      args {
        float_value: 3
      }
      args {
        float_value: 0
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eBadGuys"
          }
        }
      }
      args {
        float_value: 7
      }
    }
  }
  isActive: true
  idRef {
    id: "548645ce6665386c06007b03"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Backstage.FireFight"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eBadGuys"
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Enable/Disable Interactable Object"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "5466d1bc613131f810006123"
          }
        }
      }
    }
    ops {
      functionName: "Add Item to Actor"
      args {
        call_value {
          functionName: "Get Map Item (Item)"
          args {
            string_value: "Berlin_AR 1 AK98"
          }
        }
      }
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "5470165c6665388408000b7a"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Add Item to Actor"
      args {
        call_value {
          functionName: "Get Map Item (Item)"
          args {
            string_value: "Berlin_SMG 1 Uzi III"
          }
        }
      }
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "547016536665388408000b78"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Add Item to Actor"
      args {
        call_value {
          functionName: "Get Map Item (Item)"
          args {
            string_value: "Berlin_Sh 1 Street Sweeper"
          }
        }
      }
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "54b95a18666538900b00590f"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Set Actor Unkillable"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "54701bad666538ac03001cec"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Set Variable (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "int_RoundsUntilLoneStar"
          }
        }
      }
      args {
        call_value {
          functionName: "Random (int)"
          args {
            int_value: 15
          }
          args {
            int_value: 22
          }
        }
      }
    }
    ops {
      functionName: "Teleport Actor"
      args {
        call_value {
          functionName: "All Actors With Tag"
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "isBadGuy"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Center of Region"
          args {
            call_value {
              functionName: "Get Map Item (Region)"
              args {
                string_value: "5470264a6665384809001364"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Order Actor to Move To (Region)"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "547016536665388408000b78"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "54924e666665386c04004080"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Order Actor to Move To (Region)"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "54b95a18666538900b00590f"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "54924e666665386c04004080"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Order Actor to Move To (Region)"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "5470165c6665388408000b7a"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "54924e666665386c04004080"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Trigger: Wait for Rounds"
      args {
        int_value: 1
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Order Actor to Move To (Region)"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "54701d67666538ac03001cef"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "54b9dfc56665386407006835"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 8
          }
        }
      }
    }
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "54701d67666538ac03001cef"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "Seattle:General/standing_idle_cower"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "5486467a6665386c06007b04"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "   StreetSamsSpeak (Warning)"
  events {
    ops {
      functionName: "On Region Enter"
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "54924e666665386c04004080"
          }
        }
      }
    }
  }
  conditions {
    ops {
      functionName: "Evaluate Tag for Actor"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Triggering Actor"
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "HasOrHasNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isBadGuy"
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Add To Variable (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "int_BadGuysReady"
          }
        }
      }
      args {
        int_value: 1
      }
    }
  }
  isActive: true
  idRef {
    id: "54bace4b6665381c06002df9"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "   StreetSamsSpeak (Issue Warning)"
  events {
    ops {
      functionName: "On Region Enter"
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "54924e666665386c04004080"
          }
        }
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "int_BadGuysReady"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 3
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "bol_CombatActive"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Display Text over Actor"
      args {
        call_value {
          functionName: "Get Random Actor on Team"
          args {
            call_value {
              functionName: "Get Preset Value (string)"
              args {
                string_value: "FactionList"
              }
              args {
                int_value: 1
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (SceneDimension)"
              args {
                string_value: "Default"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TextPopupStyle"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        string_value: "No debiste de haber chingado a Hern\303\241ndez pinche perra."
      }
      args {
        float_value: 255
      }
      args {
        float_value: 0
      }
      args {
        float_value: 0
      }
      args {
        float_value: 128
      }
      args {
        float_value: 12
      }
      args {
        float_value: 3
      }
      args {
        float_value: 0
      }
    }
    ops {
      functionName: "Suspend Team\'s Turn"
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        int_value: 1
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Change Actor Team"
      args {
        call_value {
          functionName: "All Actors With Tag"
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "isBadGuy"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Order Actor to Hunt And Destroy (Team)"
      args {
        call_value {
          functionName: "All Actors With Tag"
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "isBadGuy"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Trigger"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "54b47df2666538ec0c004aaa"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "54b47df2666538ec0c004aaa"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "   MecurialFlees (After Warning)"
  events {
    ops {
      functionName: "On Region Enter"
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "54b9dfc56665386407006835"
          }
        }
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (Actor)"
      args {
        call_value {
          functionName: "Triggering Actor"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "54701d67666538ac03001cef"
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "54701d67666538ac03001cef"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "Seattle:General/standing_idle_cower"
          }
        }
      }
    }
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "54701bad666538ac03001cec"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "Seattle:General/standing_idle_cower"
          }
        }
      }
    }
    ops {
      functionName: "Order Actor to become a Non-Combatant"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "54701d67666538ac03001cef"
              }
            }
          }
          args {
          }
        }
      }
    }
    ops {
      functionName: "Display Text over Actor"
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "54701d67666538ac03001cef"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TextPopupStyle"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        string_value: "AAAiiiiiieeee!!!"
      }
      args {
        float_value: 255
      }
      args {
        float_value: 108
      }
      args {
        float_value: 253
      }
      args {
        float_value: 128
      }
      args {
        float_value: 7
      }
      args {
        float_value: 3
      }
      args {
        float_value: 0
      }
    }
    ops {
      functionName: "Set Region Enabled"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "54b9dfc56665386407006835"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "54bacd756665381c06002df8"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Backstage.Interventions"
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: false
  idRef {
    id: "54babdcf6665381c06002df4"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "   Mecurial"
  events {
    ops {
      functionName: "On Actor Damage"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "HPOrAP"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  conditions {
    ops {
      functionName: "AND"
      args {
        call_value {
          functionName: "Comparison (Actor)"
          args {
            call_value {
              functionName: "Triggering Target Actor"
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "IsOrIsNot"
              }
              args {
                int_value: 1
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Compare Actor Attribute"
          args {
            call_value {
              functionName: "Triggering Target Actor"
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "BaseOrCurrent"
              }
              args {
                int_value: 1
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "ActorAttributes"
              }
              args {
                int_value: 8
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "Comparison Ops"
              }
              args {
                int_value: 5
              }
            }
          }
          args {
            call_value {
              functionName: "Arithmetic (int)"
              args {
                call_value {
                  functionName: "Get Actor Attribute"
                  args {
                    call_value {
                      functionName: "Triggering Target Actor"
                    }
                  }
                  args {
                    call_value {
                      functionName: "Get Preset Value (int)"
                      args {
                        string_value: "BaseOrCurrent"
                      }
                      args {
                        int_value: 0
                      }
                    }
                  }
                  args {
                    call_value {
                      functionName: "Get Preset Value (int)"
                      args {
                        string_value: "ActorAttributes"
                      }
                      args {
                        int_value: 8
                      }
                    }
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Preset Value (int)"
                  args {
                    string_value: "Arithmetic Ops"
                  }
                  args {
                    int_value: 3
                  }
                }
              }
              args {
                int_value: 2
              }
            }
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "bol_SavedByMaria"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Set Animation State Of Actor To Animation Modifier"
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "AnimationState"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "54701d67666538ac03001cef"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (AnimationModifiers)"
          args {
            string_value: "combat"
          }
          args {
            string_value: "alert"
          }
        }
      }
    }
    ops {
      functionName: "Play FX on Actor"
      args {
        string_value: "JessicaDummyBuffHitReaction"
      }
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "54701d67666538ac03001cef"
              }
            }
          }
          args {
          }
        }
      }
    }
    ops {
      functionName: "Add Item to Actor"
      args {
        call_value {
          functionName: "Get Map Item (Item)"
          args {
            string_value: "SMG 2 Ingram Smartgun"
          }
        }
      }
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "54701d67666538ac03001cef"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Change Actor Control"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "54701d67666538ac03001cef"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "PlayerOrAI"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Change Actor Team"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "54701d67666538ac03001cef"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Order Actor to Hunt And Destroy (Team)"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "54701d67666538ac03001cef"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Trigger"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "54babdf56665381c06002df5"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "54babdf56665381c06002df5"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "   Newt & Tellin (Team Downed 40%)"
  events {
    ops {
      functionName: "On Actor Death"
    }
  }
  conditions {
    ops {
      functionName: "Evaluate Team Survival Percentage"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 3
          }
        }
      }
      args {
        int_value: 40
      }
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "bol_HelpArrived"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Send Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eBackupArrives"
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Trigger"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "54b99824666538c0000008b2"
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Trigger"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "54babfb86665381c06002df6"
          }
        }
      }
    }
  }
  isActive: false
  idRef {
    id: "54babfb86665381c06002df6"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "      Newt & Tellin (Summon Team)"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eBackupArrives"
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "bol_HelpArrived"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Add Item to Actor"
      args {
        call_value {
          functionName: "Get Map Item (Item)"
          args {
            string_value: "Berlin_AR 1 Semopal vz88v"
          }
        }
      }
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "54838b45666538ac0900674f"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Add Item to Actor"
      args {
        call_value {
          functionName: "Get Map Item (Item)"
          args {
            string_value: "Berlin_Sh 1 Street Sweeper"
          }
        }
      }
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "54b98095666538b409004df3"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Interactable Object"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "54838b45666538ac0900674f"
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Interactable Object"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "54b98095666538b409004df3"
          }
        }
      }
    }
    ops {
      functionName: "Add Item to Actor"
      args {
        call_value {
          functionName: "Get Map Item (Item)"
          args {
            string_value: "Grenade 1 (Frag)"
          }
        }
      }
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "54b98095666538b409004df3"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Teleport Actor"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "54b98095666538b409004df3"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Center of Region"
          args {
            call_value {
              functionName: "Get Map Item (Region)"
              args {
                string_value: "5470264a6665384809001364"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Teleport Actor"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "54838b45666538ac0900674f"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Center of Region"
          args {
            call_value {
              functionName: "Get Map Item (Region)"
              args {
                string_value: "5470264a6665384809001364"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Change Actor Control"
      args {
        call_value {
          functionName: "All Actors on Team"
          args {
            call_value {
              functionName: "Get Preset Value (string)"
              args {
                string_value: "FactionList"
              }
              args {
                int_value: 5
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (SceneDimension)"
              args {
                string_value: "Default"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "PlayerOrAI"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Change Actor Team"
      args {
        call_value {
          functionName: "All Actors on Team"
          args {
            call_value {
              functionName: "Get Preset Value (string)"
              args {
                string_value: "FactionList"
              }
              args {
                int_value: 5
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (SceneDimension)"
              args {
                string_value: "Default"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Order Actor to Seek And Destroy (Team)"
      args {
        call_value {
          functionName: "All Actors on Team"
          args {
            call_value {
              functionName: "Get Preset Value (string)"
              args {
                string_value: "FactionList"
              }
              args {
                int_value: 5
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (SceneDimension)"
              args {
                string_value: "Default"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Set Actor Unkillable"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "54838b45666538ac0900674f"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Set Actor Unkillable"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "54b98095666538b409004df3"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Set Variable (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "542848a8633464d816001ad5"
          }
          args {
            string_value: "int_NPC_Status_Foley"
          }
        }
      }
      args {
        int_value: 1
      }
    }
    ops {
      functionName: "Start Conversation"
      args {
        call_value {
          functionName: "Get Map Item (Conversation)"
          args {
            string_value: "553274aa663136cc010059c1"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "54838b45666538ac0900674f"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "54b9646a6665388c05002713"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "         NewtCoversExit"
  events {
    ops {
      functionName: "On Conversation Complete"
    }
  }
  conditions {
    ops {
      functionName: "Comparison (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "bol_NewtConversation"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Display Text over Actor"
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "54838b45666538ac0900674f"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TextPopupStyle"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        string_value: "Go... Better get out of here quick."
      }
      args {
        float_value: 0
      }
      args {
        float_value: 255
      }
      args {
        float_value: 0
      }
      args {
        float_value: 128
      }
      args {
        float_value: 7
      }
      args {
        float_value: 3
      }
      args {
        float_value: 2
      }
    }
    ops {
      functionName: "Enable/Disable Trigger"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "549254d26665386c04004085"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "549254d26665386c04004085"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "            Team [Weapons Return]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eReturnGear"
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Add Item to Actor"
      args {
        call_value {
          functionName: "Get Map Item (Item)"
          args {
            string_value: "Berlin_Sh 1 Benelli (Sawed Off)"
          }
        }
      }
      args {
        call_value {
          functionName: "All Actors With Tag"
          args {
            call_value {
              functionName: "Tag From String"
              args {
                string_value: "isBlight"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Add Item to Actor"
      args {
        call_value {
          functionName: "Get Map Item (Item)"
          args {
            string_value: "Berlin_AR 1 Semopal vz88v (Smartlink)"
          }
        }
      }
      args {
        call_value {
          functionName: "All Actors With Tag"
          args {
            call_value {
              functionName: "Tag From String"
              args {
                string_value: "isElJefe"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Add Item to Actor"
      args {
        call_value {
          functionName: "Get Map Item (Item)"
          args {
            string_value: "Berlin_DroneAttackC_Doberman"
          }
        }
      }
      args {
        call_value {
          functionName: "All Actors With Tag"
          args {
            call_value {
              functionName: "Tag From String"
              args {
                string_value: "isElJefe"
              }
            }
          }
          args {
            call_value {
              functionName: "Nothing Selected"
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Add Item to Actor"
      args {
        call_value {
          functionName: "Get Map Item (Item)"
          args {
            string_value: "Gunners vz88v"
          }
        }
      }
      args {
        call_value {
          functionName: "All Actors With Tag"
          args {
            call_value {
              functionName: "Tag From String"
              args {
                string_value: "isGunner"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Add Item to Actor"
      args {
        call_value {
          functionName: "Get Map Item (Item)"
          args {
            string_value: "Sword 2 Axe"
          }
        }
      }
      args {
        call_value {
          functionName: "All Actors With Tag"
          args {
            call_value {
              functionName: "Tag From String"
              args {
                string_value: "isLuna"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Add Item to Actor"
      args {
        call_value {
          functionName: "Get Map Item (Item)"
          args {
            string_value: "SMG 1 Uzi III (Silencer)"
          }
        }
      }
      args {
        call_value {
          functionName: "All Actors With Tag"
          args {
            call_value {
              functionName: "Tag From String"
              args {
                string_value: "isNebel"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Add Item to Actor"
      args {
        call_value {
          functionName: "Get Map Item (Item)"
          args {
            string_value: "Berlin_Pi 1 Taser"
          }
        }
      }
      args {
        call_value {
          functionName: "All Actors With Tag"
          args {
            call_value {
              functionName: "Tag From String"
              args {
                string_value: "isPadre"
              }
            }
          }
          args {
            call_value {
              functionName: "Nothing Selected"
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Add Item to Actor"
      args {
        call_value {
          functionName: "Get Map Item (Item)"
          args {
            string_value: "Shivers Super WarHawk"
          }
        }
      }
      args {
        call_value {
          functionName: "All Actors With Tag"
          args {
            call_value {
              functionName: "Tag From String"
              args {
                string_value: "isShiver"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Add Item to Actor"
      args {
        call_value {
          functionName: "Get Map Item (Item)"
          args {
            string_value: "Pi 1 Ceska Black Scorpion (Silencer)"
          }
        }
      }
      args {
        call_value {
          functionName: "All Actors With Tag"
          args {
            call_value {
              functionName: "Tag From String"
              args {
                string_value: "isSilverArrow"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Add Item to Actor"
      args {
        call_value {
          functionName: "Get Map Item (Item)"
          args {
            string_value: "Berlin_AR 1 AK98 (Smartlink)"
          }
        }
      }
      args {
        call_value {
          functionName: "All Actors With Tag"
          args {
            call_value {
              functionName: "Tag From String"
              args {
                string_value: "isSucio"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Trigger"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "551f1bc9663136f4130059d7"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "551f1bc9663136f4130059d7"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "            Player [Weapons Return]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eReturnGear"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "bol_PlayerHasWeapon"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Add Item to Actor"
      args {
        call_value {
          functionName: "Get Map Item (Item)"
          args {
            string_value: "Pi 1 Fichetti Security 500"
          }
        }
      }
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 0
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "551f1bc9663136f4130059d8"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Backstage.CombatRoundCounter"
  events {
    ops {
      functionName: "On New Round"
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "bol_CombatActive"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Add To Variable (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "int_CombatRound"
          }
        }
      }
      args {
        int_value: 1
      }
    }
    ops {
      functionName: "Add To Variable (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "int_RoundsUntilLoneStar"
          }
        }
      }
      args {
        int_value: -1
      }
    }
    ops {
      functionName: "Send Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eUpdateCounter"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "54b99459666538c0000008ae"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "   Display Screen Label Countdown"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eUpdateCounter"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "int_RoundsUntilLoneStar"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 2
          }
        }
      }
      args {
        int_value: 1
      }
    }
  }
  actions {
    ops {
      functionName: "Set Screen Label"
      args {
        string_value: "CombatCounter"
      }
      args {
        call_value {
          functionName: "Append (string)"
          args {
            string_value: " rounds until LoneStar arrives."
          }
          args {
            call_value {
              functionName: "Convert (int) to (string)"
              args {
                call_value {
                  functionName: "Get Variable (int)"
                  args {
                    string_value: "int_RoundsUntilLoneStar"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "54bac1456665381c06002df7"
  }
  elseActions {
    ops {
      functionName: "Set Screen Label"
      args {
        string_value: "CombatCounter"
      }
      args {
        call_value {
          functionName: "Append (string)"
          args {
            string_value: " rounds until LoneStar arrives."
          }
          args {
            call_value {
              functionName: "Convert (int) to (string)"
              args {
                call_value {
                  functionName: "Get Variable (int)"
                  args {
                    string_value: "int_RoundsUntilLoneStar"
                  }
                }
              }
            }
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Trigger"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "54bac1456665381c06002df7"
          }
        }
      }
    }
  }
  is_oneshot: false
}
triggers {
  name: "   Round 2 - Too Noisy"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eUpdateCounter"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "int_CombatRound"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 2
      }
    }
  }
  actions {
    ops {
      functionName: "Display Text over Actor"
      args {
        call_value {
          functionName: "Get Random Actor on Team"
          args {
            call_value {
              functionName: "Get Preset Value (string)"
              args {
                string_value: "FactionList"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (SceneDimension)"
              args {
                string_value: "Default"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TextPopupStyle"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        string_value: "Lonestar has to have heard that. We\'ve got to get out of here!"
      }
      args {
        float_value: 0
      }
      args {
        float_value: 255
      }
      args {
        float_value: 0
      }
      args {
        float_value: 128
      }
      args {
        float_value: 8
      }
      args {
        float_value: 3
      }
      args {
        float_value: 0
      }
    }
  }
  isActive: true
  idRef {
    id: "54b99641666538c0000008b1"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "   Round 5 - Backup Arrives"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eUpdateCounter"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "int_CombatRound"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 5
      }
    }
  }
  actions {
    ops {
      functionName: "Enable/Disable Trigger"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "54babfb86665381c06002df6"
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Trigger"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "54b99824666538c0000008b2"
          }
        }
      }
    }
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "bol_HelpArrived"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Send Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eBackupArrives"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "54b99824666538c0000008b2"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Backstage.NewtsArrival"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eUpdateCounter"
      }
    }
  }
  conditions {
    ops {
      functionName: "Evaluate Team Survival Percentage"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 100
      }
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "bol_CombatActive"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Remove Screen Label"
      args {
        string_value: "CombatCounter"
      }
    }
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "54701d67666538ac03001cef"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "Seattle:General/standing_idle_flirty"
          }
        }
      }
    }
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "54701bad666538ac03001cec"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "Seattle:General/standing_idle"
          }
        }
      }
    }
    ops {
      functionName: "Send Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eBackupArrives"
          }
        }
      }
    }
  }
  isActive: false
  idRef {
    id: "54864f99666538ec0e007a67"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Backstage.WaypointRemoval"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "548654d5666538ec0e007ad3"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Clear Waypoint from Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "548654d5666538ec0e007ad3"
          }
        }
      }
    }
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "54701bad666538ac03001cec"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "Seattle:General/standing_idle_repairing"
          }
        }
      }
    }
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Story Variable (string)"
          args {
            string_value: "542848a8633464d816001ad5"
          }
          args {
            string_value: "str_SceneDetails"
          }
        }
      }
      args {
        string_value: "You start Newt\'s borrowed van, and wince as you smash through the barriers blocking any fans from getting behind U93 for a look at Maria. \n\nYou burn out onto the street, and head for I-5, hoping to lose any pursuit in the traffic of the freeway. It\'s a harrowing few minutes, and then Max directs you to take an off-ramp that leads you to a small japanese restaraunt. \n\n\"Yoshiro\'s\" the sign proudly proclaims in english. Max hops out of the van when you stop, followed by Maria and you shut the van off- it shudders in a way that can\'t mean anything good, and you get the feeling that Newt is going to regret loaning you his van.\n\nWhat now?"
      }
    }
  }
  isActive: true
  idRef {
    id: "54f2a32d66313664000036a7"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Backstage.ExitPropInteraction"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "548654d5666538ec0e007ad3"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Send Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eGetAway"
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Trigger"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "54bac1456665381c06002df7"
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Trigger"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "54b9963e666538c0000008b0"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55431e4166313674130042f0"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Backstage.SceneExit"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eSceneExit"
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Change Actor Control"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "54701d67666538ac03001cef"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "PlayerOrAI"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Change Actor Team"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "54701d67666538ac03001cef"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 3
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Change Actor Control"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "54701bad666538ac03001cec"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "PlayerOrAI"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Change Actor Team"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "54701bad666538ac03001cec"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 3
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Change Actor Control"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "54b98095666538b409004df3"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "PlayerOrAI"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Change Actor Team"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "54b98095666538b409004df3"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 3
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Change Actor Control"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "54838b45666538ac0900674f"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "PlayerOrAI"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Change Actor Team"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "54838b45666538ac0900674f"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 3
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Set Variable (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "542848a8633464d816001ad5"
          }
          args {
            string_value: "int_NPC_Status_Foley"
          }
        }
      }
      args {
        int_value: 1
      }
    }
    ops {
      functionName: "Set Variable (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "542848a8633464d816001ad5"
          }
          args {
            string_value: "int_NPC_Status_Mecurial"
          }
        }
      }
      args {
        int_value: 1
      }
    }
    ops {
      functionName: "Open Scene"
      args {
        call_value {
          functionName: "Get Map Item (Scene)"
          args {
            string_value: "SCENE - Yoshiros"
          }
        }
      }
    }
    ops {
      functionName: "Set Variable (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "542848a8633464d816001ad5"
          }
          args {
            string_value: "int_NPC_Status_Foley"
          }
        }
      }
      args {
        int_value: 2
      }
    }
  }
  isActive: true
  idRef {
    id: "55334931663136f012005265"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: ""
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: true
  idRef {
    id: "5486577b666538ec0e007b6d"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "--==== Global Functions ====--"
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: false
  idRef {
    id: "54867208666538ec0e007cdb"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Global.LoneStarArrival (FAILURE)"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eUpdateCounter"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "int_RoundsUntilLoneStar"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 0
      }
    }
  }
  actions {
    ops {
      functionName: "Set Screen Label"
      args {
        string_value: "CombatCounter"
      }
      args {
        string_value: "LoneStar has Arrived..."
      }
    }
    ops {
      functionName: "Set Goal Status"
      args {
        call_value {
          functionName: "Get Map Item (Goal)"
          args {
            string_value: "LoneStar Arrived"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "GoalStatus"
          }
          args {
            int_value: 3
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "54b9963e666538c0000008b0"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Global.PlayerDeath"
  events {
    ops {
      functionName: "On Actor Death"
    }
  }
  conditions {
    ops {
      functionName: "Comparison (Actor)"
      args {
        call_value {
          functionName: "Triggering Target Actor"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Player)"
          args {
            int_value: 0
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Set Goal Status"
      args {
        call_value {
          functionName: "Get Map Item (Goal)"
          args {
            string_value: "FAILURE"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "GoalStatus"
          }
          args {
            int_value: 3
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "5486678a666538ec0e007c6d"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Global.MecurialDeath"
  events {
    ops {
      functionName: "On Actor Death"
    }
  }
  conditions {
    ops {
      functionName: "Comparison (Actor)"
      args {
        call_value {
          functionName: "Triggering Target Actor"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "54701d67666538ac03001cef"
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Set Goal Status"
      args {
        call_value {
          functionName: "Get Map Item (Goal)"
          args {
            string_value: "Mission Failure"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "GoalStatus"
          }
          args {
            int_value: 3
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "54b99ecd666538c0000008b5"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "***DELETE ME [Thomas\' Map Modifications]***"
  events {
    ops {
      functionName: "On Curtains Up"
    }
  }
  conditions {
    ops {
      functionName: "Comparison (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "bNoSpawn_FOR_THOMAS"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Enable/Disable Team\'s Turn"
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Teleport Camera To Actor"
      args {
        call_value {
          functionName: "Get Map Item (Player)"
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Change Actor Team"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "546fbdba6665388408000884"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 3
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "553b12ae6631369c0e00466a"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: ""
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: true
  idRef {
    id: "55430c4d66313674130042e3"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "--==== Get Away Triggers ====--"
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: false
  idRef {
    id: "55430c4d66313674130042e4"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "GetAway.Test"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "5537adcb373361b4160076e0"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Set Variable (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iGetAwayProgession"
          }
        }
      }
      args {
        int_value: 0
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isTires"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isSmoke"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "5534f7643733613010004005"
          }
        }
      }
      args {
        call_value {
          functionName: "Specified Point (3D)"
          args {
            float_value: 10.5
          }
          args {
            float_value: 0.6
          }
          args {
            float_value: 214
          }
        }
      }
    }
    ops {
      functionName: "Send Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eGetAway"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55430c4566313674130042e2"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "GetAway.Setup"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGetAway"
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Set Environmental Effect Amount"
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "EnvironmentalEffects"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 750
      }
    }
    ops {
      functionName: "Teleport Actor"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "546fbdba6665388408000884"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Specified Point (2D)"
          args {
            float_value: 27
          }
          args {
            float_value: 210
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "55432aae66313674130043da"
          }
        }
      }
      args {
        call_value {
          functionName: "Specified Point (2D)"
          args {
            float_value: 18.5
          }
          args {
            float_value: 208.8
          }
        }
      }
    }
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "55432a8066313674130043d7"
          }
        }
      }
      args {
        call_value {
          functionName: "Specified Point (2D)"
          args {
            float_value: 22.5
          }
          args {
            float_value: 227.8
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isSiren"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Team\'s Turn"
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Team\'s Turn"
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Team\'s Turn"
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 3
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Change Actor Team"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "546fbdba6665388408000884"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Apply Camera Zoom"
      args {
        float_value: 0.5
      }
    }
    ops {
      functionName: "Teleport Camera To Actor"
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "546fbdba6665388408000884"
          }
        }
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eGetAwayProgression"
          }
        }
      }
      args {
        float_value: 1.75
      }
    }
    ops {
      functionName: "Display Text over Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "55452bc5663136a413001a02"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TextPopupStyle"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        string_value: "Check out that rad 90\302\260 turn!"
      }
      args {
        float_value: 0
      }
      args {
        float_value: 255
      }
      args {
        float_value: 0
      }
      args {
        float_value: 128
      }
      args {
        float_value: 8
      }
      args {
        float_value: 3
      }
      args {
        float_value: 1.85
      }
    }
  }
  isActive: true
  idRef {
    id: "55452736663136a4130019f9"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "GetAway.TireMarks"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGetAwayProgression"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iGetAwayProgession"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 4
          }
        }
      }
      args {
        int_value: 5
      }
    }
  }
  actions {
    ops {
      functionName: "Add To Variable (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iGetAwayProgession"
          }
        }
      }
      args {
        int_value: 1
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Tag From String"
          args {
            call_value {
              functionName: "Append (string)"
              args {
                call_value {
                  functionName: "Convert (int) to (string)"
                  args {
                    call_value {
                      functionName: "Get Variable (int)"
                      args {
                        string_value: "iGetAwayProgession"
                      }
                    }
                  }
                }
              }
              args {
                string_value: "isSmoke"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Tag From String"
          args {
            call_value {
              functionName: "Append (string)"
              args {
                call_value {
                  functionName: "Convert (int) to (string)"
                  args {
                    call_value {
                      functionName: "Get Variable (int)"
                      args {
                        string_value: "iGetAwayProgession"
                      }
                    }
                  }
                }
              }
              args {
                string_value: "isBurnout"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eGetAwayProgression"
          }
        }
      }
      args {
        float_value: 0.7
      }
    }
  }
  isActive: true
  idRef {
    id: "55430d4566313674130042e5"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "GetAway.Position [1]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGetAwayProgression"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iGetAwayProgession"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 1
      }
    }
  }
  actions {
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isFenceBroken"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isFenceIntact"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Play Sound"
      args {
        call_value {
          functionName: "Get Map Item (Sound)"
          args {
            string_value: "props"
          }
          args {
            string_value: "MetalScrape1"
          }
        }
      }
      args {
        float_value: 10
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Move Prop with Speed"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "5534f7643733613010004005"
          }
        }
      }
      args {
        call_value {
          functionName: "Specified Point (3D)"
          args {
            float_value: 20.5
          }
          args {
            float_value: 0.6
          }
          args {
            float_value: 214
          }
        }
      }
      args {
        float_value: 16
      }
    }
  }
  isActive: true
  idRef {
    id: "5543132066313674130042ea"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "GetAway.Position [2]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGetAwayProgression"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iGetAwayProgession"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 2
      }
    }
  }
  actions {
    ops {
      functionName: "Play Sound"
      args {
        call_value {
          functionName: "Get Map Item (Sound)"
          args {
            string_value: "ambient_underground"
          }
          args {
            string_value: "Screech"
          }
        }
      }
      args {
        float_value: 20
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "554309ce66313674130042e0"
          }
        }
      }
      args {
        call_value {
          functionName: "Specified Point (3D)"
          args {
            float_value: 22.5
          }
          args {
            float_value: 0.6
          }
          args {
            float_value: 212
          }
        }
      }
    }
    ops {
      functionName: "Move Prop with Speed"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "554309ce66313674130042e0"
          }
        }
      }
      args {
        call_value {
          functionName: "Specified Point (3D)"
          args {
            float_value: 20.2
          }
          args {
            float_value: 0.6
          }
          args {
            float_value: 143
          }
        }
      }
      args {
        float_value: 12
      }
    }
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "5534f7643733613010004005"
          }
        }
      }
      args {
        call_value {
          functionName: "Center of Region"
          args {
            call_value {
              functionName: "Get Map Item (Region)"
              args {
                string_value: "547015c96665388408000b67"
              }
            }
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "5543137a66313674130042eb"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "GetAway.Position [3]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGetAwayProgression"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iGetAwayProgession"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 3
      }
    }
  }
  actions {
  }
  isActive: true
  idRef {
    id: "554313f566313674130042ec"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "GetAway.Position [4]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGetAwayProgression"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iGetAwayProgession"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 4
      }
    }
  }
  actions {
    ops {
      functionName: "Fade Camera Out"
      args {
        float_value: 1.25
      }
      args {
        float_value: 0
      }
    }
    ops {
      functionName: "Change Actor Team"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "546fbdba6665388408000884"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 3
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eSceneTransition"
          }
        }
      }
      args {
        float_value: 1.5
      }
    }
  }
  isActive: true
  idRef {
    id: "5543142866313674130042ed"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "GetAway.SceneTransition"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eSceneTransition"
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Send Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eSceneExit"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "554528b2663136a4130019fc"
  }
  elseActions {
  }
  is_oneshot: false
}
regions {
  name: "rSecurityScan"
  position {
    x: -79
    y: 133
    width: 4
    height: 12
  }
  enabledAtStart: true
  is_camera_region: false
  idRef {
    id: "5469346f666538980e0013bb"
  }
  highlight_color {
    r: 1
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
}
regions {
  name: "rU93LobbyEntryPoint"
  position {
    x: -73
    y: 135
    width: 3
    height: 5
  }
  enabledAtStart: true
  is_camera_region: false
  idRef {
    id: "546fe24466653884080008bd"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
}
regions {
  name: "rHoldingPen"
  position {
    x: -38
    y: 216
    width: 6
    height: 18
  }
  enabledAtStart: true
  is_camera_region: true
  idRef {
    id: "547015c96665388408000b67"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  ambient_light_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
}
regions {
  name: "rBackStageEntry"
  position {
    x: -77
    y: 282
    width: 3
    height: 4
  }
  enabledAtStart: true
  is_camera_region: false
  idRef {
    id: "5470220a6665384809001323"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
}
regions {
  name: "rBackStageAccess"
  position {
    x: -86
    y: 175
    width: 5
    height: 13
  }
  enabledAtStart: true
  is_camera_region: false
  idRef {
    id: "547022276665384809001324"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
}
regions {
  name: "rBadGuyArrival"
  position {
    x: -81
    y: 244
    width: 3
    height: 4
  }
  enabledAtStart: true
  is_camera_region: false
  idRef {
    id: "5470264a6665384809001364"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
}
regions {
  name: "rBusStop"
  position {
    x: 27
    y: 189
    width: 3
    height: 3
  }
  enabledAtStart: true
  is_camera_region: false
  idRef {
    id: "5470fd7c666538c40b000c82"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
}
regions {
  name: "rMariaInRoom"
  position {
    x: -104
    y: 247
    width: 2
    height: 2
  }
  enabledAtStart: true
  is_camera_region: false
  idRef {
    id: "548645376665386c06007b01"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
}
regions {
  name: "rNewtsArrival"
  position {
    x: -96
    y: 242
    width: 5
    height: 5
  }
  enabledAtStart: true
  is_camera_region: false
  idRef {
    id: "54924e666665386c04004080"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
}
regions {
  name: "rU93Enter"
  position {
    x: 16
    y: 216
    width: 17
    height: 30
  }
  enabledAtStart: true
  is_camera_region: false
  idRef {
    id: "54926e986665386c04004156"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
}
regions {
  name: "rLoneStarWarning"
  position {
    x: -80
    y: 136
    width: 1
    height: 6
  }
  enabledAtStart: true
  is_camera_region: false
  idRef {
    id: "54b98dd4666538c0000008a7"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
}
regions {
  name: "rMariaHidingSpot"
  position {
    x: -101
    y: 251
    width: 1
    height: 1
  }
  enabledAtStart: true
  is_camera_region: false
  idRef {
    id: "54b9dfc56665386407006835"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
}
regions {
  name: "rFireReaction"
  position {
    x: -88
    y: 135
    width: 2
    height: 2
  }
  enabledAtStart: true
  is_camera_region: false
  idRef {
    id: "5503ce5d6631364c07005a86"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
}
regions {
  name: "cU93Exterior"
  position {
    x: -12
    y: 146
    width: 61
    height: 161
  }
  enabledAtStart: true
  is_camera_region: true
  idRef {
    id: "5537bd47373361b416007726"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.37254903
    g: 0.19215687
    b: 0.38431373
    a: 1
  }
  ambient_light_color {
    r: 0.10980392
    g: 0.098039217
    b: 0.81960785
    a: 1
  }
  ambience_template: "barrens-night"
  combat_music: ""
  default_music: "Seattle-Set6-Ominous"
  loop_combat_music: true
  loop_default_music: true
  no_fow_in_region: false
}
regions {
  name: "cClubInterior"
  position {
    x: -112
    y: 118
    width: 46
    height: 67
  }
  enabledAtStart: true
  is_camera_region: true
  idRef {
    id: "5537bdb3373361b416007727"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.11764706
    g: 0.11764706
    b: 0.11764706
    a: 1
  }
  ambient_light_color {
    r: 0.070588239
    g: 0.082352944
    b: 0.4509804
    a: 1
  }
  ambience_template: "bar-busy"
  combat_music: ""
  default_music: "Berlin-Set28-Combat"
  loop_combat_music: true
  loop_default_music: true
  no_fow_in_region: false
}
regions {
  name: "cBackStage"
  position {
    x: -116
    y: 238
    width: 43
    height: 51
  }
  enabledAtStart: true
  is_camera_region: true
  idRef {
    id: "5537bddf373361b416007728"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.22352941
    g: 0.38431373
    b: 0.37254903
    a: 1
  }
  ambient_light_color {
    r: 0.54901963
    g: 0.33333334
    b: 0.15686275
    a: 1
  }
  ambience_template: "bar-quiet"
  combat_music: "Seattle-Set9-Combat"
  default_music: "Seattle-Set9-Stealth"
  loop_combat_music: true
  loop_default_music: true
  no_fow_in_region: false
}
regions {
  name: "rBackStageExit"
  position {
    x: -73
    y: 178
    width: 4
    height: 5
  }
  enabledAtStart: true
  is_camera_region: false
  idRef {
    id: "553acdd4663136380c001351"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -76.9
    y: 0
    z: 129.9
  }
  orientation: ORIENTATION_S
  displayName: "U93Staff"
  idRef {
    id: "54692c60666538980e0013ac"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 3
    interactionIcon: InteractionIcon_Conversation
    interaction_info_text: "Weapons Check Clerk"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Security/HumanFemaleSecurity"
    character_sheet_id: "BaseCivilian"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Non-Combatant"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "Weapons Clerk"
    pc_spawn_number: -1
    portrait {
      filename: "pc_humanfemale_06d_pixie"
    }
    karma: 6
    is_prop_character: true
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -78.7
    y: 0
    z: 141
  }
  orientation: ORIENTATION_S
  displayName: "U93Staff"
  idRef {
    id: "54692cff666538980e0013ad"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 2
    interactionIcon: InteractionIcon_Conversation
    interaction_info_text: "Troll Bouncer"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Security/TrollMalesSecurity"
    character_sheet_id: "Lonestar_Lv4_Ork_Shotgun"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 2
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 1
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: -4
        close_combat: 5
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: -2
        smg: 0
        edged: 0
        unarmed: 5
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Non-Combatant"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    equipment {
      prefab_name: "AdeptCombatvest"
    }
    team_id: "Civilians"
    char_name: "Troll Bouncer"
    pc_spawn_number: -1
    cyberware_jack: "Berlin_Obvious Cyberskull"
    cyberware_left_arm: "Obvious Cyberarm"
    cyberware_right_arm: "Obvious Cyberarm"
    portrait {
      filename: "NPC_TrollMale_CyberZombie"
    }
    karma: 88
    is_prop_character: true
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -77
    y: 0
    z: 120.6
  }
  orientation: ORIENTATION_S
  displayName: "U93Staff"
  idRef {
    id: "5469329d666538980e0013b1"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 1
    dummyInteraciton {
    }
    interaction_info_text: ""
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Security/ElfMaleSecurity"
    character_sheet_id: "Lonestar_Lv3_Human_Pistol"
    equipment_sheet_id: "Lonestar_Lv3_Pistol_Gear"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Non-Combatant"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "Elf Security Guard"
    pc_spawn_number: -1
    cyberware_body: "Dermal Plating Mk 2"
    portrait {
      filename: "pc_elfmale_12a"
    }
    karma: 52
    is_prop_character: true
  }
}
characters {
  name: "system_spawner_playerSpawner"
  gridPoint {
    x: -36
    y: 0
    z: 231
  }
  orientation: ORIENTATION_S
  displayName: "Ego"
  idRef {
    id: "54693622666538980e0013c0"
  }
  lod: 0
  character_instance {
    character_mod {
      archetypeName: "Player"
    }
    team_id: "Shadowrunners"
    char_name: "Player"
    enabled_at_start: true
    pc_spawn_number: 0
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: 31
    y: 2
    z: 191
  }
  orientation: ORIENTATION_N
  displayName: "Watcher"
  idRef {
    id: "546fbdba6665388408000884"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 1
    dummyInteraciton {
    }
    interaction_info_text: ""
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Objects/InvisibleActor"
    character_sheet_id: "BaseCivilian"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Non-Combatant"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    team_id: "Shadowrunners"
    char_name: "BusStation"
    pc_spawn_number: -1
    ai_ignores: true
    portrait {
      filename: ""
    }
    karma: 6
    is_prop_character: true
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -86
    y: 0
    z: 279
  }
  orientation: ORIENTATION_E
  GeneralTags: "isBadGuy"
  displayName: "Thug"
  idRef {
    id: "547016536665388408000b78"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 1
    dummyInteraciton {
    }
    interaction_info_text: ""
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Core/HumanMale"
    character_sheet_id: "Lvl3_Merc_Human_CyberWarrior"
    character_mod {
      stats {
        body: -1
        quickness: -3
        strength: 1
        charisma: -1
        intelligence: -1
        willpower: -3
        essence: 0
        magic: -6
        hp: -10
        ap: 0
        armor: -3
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
        is_fearless: 0
      }
      skills {
        ranged_combat: -1
        close_combat: 6
        throwing_weapons: -2
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: -3
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: -1
        rifle: -2
        shotgun: 0
        smg: -3
        edged: 0
        unarmed: 3
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Guard - Protect"
      attitude: AttitudeAggressive
      attackRandom: AttackStyle_AllEqual
      vulnerabilities {
        normal: VulnerabilityLevel_Default
        magic: VulnerabilityLevel_Default
      }
    }
    equipment {
      prefab_name: "Player_SamuraiStarter"
    }
    team_id: "Civilians"
    char_name: "Trigger"
    GeneralTags: "isBadGuy"
    pc_spawn_number: -1
    ready_priority: -1
    portrait {
      filename: "pc_humanmale_01_roadwarrior"
    }
    portrait_code_override: "s6h1c2b0t0"
    karma: 57
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -83
    y: 0
    z: 254
  }
  orientation: ORIENTATION_E
  GeneralTags: "isBadGuy"
  displayName: "Thug"
  idRef {
    id: "5470165c6665388408000b7a"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 1
    dummyInteraciton {
    }
    interaction_info_text: ""
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Core/HumanMale"
    character_sheet_id: "Lvl3_Merc_Human_CyberWarrior"
    character_mod {
      stats {
        body: 0
        quickness: -3
        strength: -1
        charisma: -1
        intelligence: 0
        willpower: -2
        essence: 0
        magic: -6
        hp: 0
        ap: 0
        armor: -3
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
        is_fearless: 1
      }
      skills {
        ranged_combat: -1
        close_combat: 6
        throwing_weapons: -2
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: -3
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: -2
        rifle: -2
        shotgun: 0
        smg: -3
        edged: 0
        unarmed: 3
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Guard - Protect"
      attitude: AttitudeAggressive
      attackRandom: AttackStyle_AllEqual
      vulnerabilities {
        normal: VulnerabilityLevel_Default
        bleed: VulnerabilityLevel_Default
      }
    }
    equipment {
      prefab_name: "SamuraiTrenchcoat"
    }
    team_id: "Civilians"
    char_name: "Skidmark"
    GeneralTags: "isBadGuy"
    pc_spawn_number: -1
    ready_priority: -1
    portrait {
      filename: "pc_humanmale_03c_african"
    }
    portrait_code_override: "s3h2c11"
    karma: 58
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -103
    y: 0
    z: 243
  }
  orientation: ORIENTATION_E
  GeneralTags: "isFoley"
  displayName: "Fixer"
  idRef {
    id: "54701bad666538ac03001cec"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 2
    prerequisites {
      ops {
        functionName: "Evaluate Turn Mode"
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "TurnBasedOrFreeMove"
            }
            args {
              int_value: 1
            }
          }
        }
      }
    }
    interactionIcon: InteractionIcon_Conversation
    interaction_info_text: "Speak with Max?"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Wealthy/HumanMaleAutumnPony"
    character_sheet_id: "BaseCivilian"
    character_mod {
      stats {
        body: 1
        quickness: 2
        strength: 1
        charisma: 4
        intelligence: 3
        willpower: 4
        essence: 1
        hp: 0
        ap: 0
        morale: 24
        discipline: 0
        awareness: 24
        perception: 20
        authority: 0
        protect_tether_range: 5
        move_speed: 6
        is_fearless: 1
      }
      skills {
        ranged_combat: 3
        dodge: 3
        etiquette_street: 4
      }
      specializations {
        pistol: 1
      }
      archetypeName: "Non-Combatant"
      vulnerabilities {
      }
    }
    equipment {
      prefab_name: "RiggerTrenchcoat"
    }
    team_id: "Civilians"
    char_name: "Max Foley"
    GeneralTags: "isFoley"
    pc_spawn_number: -1
    ai_ignores: true
    hiring_type: HiringType_None
    cyberware_eyes: "Berlin_Laser Designator"
    portrait {
      filename: "geeked_MaxFoley"
    }
    description_bio: "Foley is in his 50s, short, fat and balding, wears latest fashions, suited to teens. He smokes large cigarettes. He\'s a talker. His constant refrain is \"Am I right?\""
    portrait_code_override: "s3h2c6b1c6t0"
    karma: 65
    hiring_cost_override: 1000
    hiring_tag: "Max Foley"
    is_prop_character: true
    has_fist: false
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -37
    y: 0
    z: 220
  }
  orientation: ORIENTATION_N
  GeneralTags: "isMercurial"
  displayName: "Mecurial(RockStar)"
  idRef {
    id: "54701d67666538ac03001cef"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 1
    dummyInteraciton {
    }
    interaction_info_text: ""
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Core/HumanFemale"
    character_sheet_id: "Lvl3_Elf_Samurai"
    equipment_sheet_id: "NPC_MariaMercurial_OffRUN"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 2
        magic: 0
        hp: 0
        ap: 1
        armor: 1
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 3
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
        is_fearless: 0
      }
      skills {
        ranged_combat: 3
        close_combat: -1
        throwing_weapons: -3
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 1
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 1
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 3
        rifle: 0
        shotgun: 0
        smg: 4
        edged: -3
        unarmed: 3
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Non-Combatant"
      attitude: AttitudeBoss
      attackRandom: AttackStyle_BestOnly
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "Maria Mercurial"
    GeneralTags: "isMercurial"
    pc_spawn_number: -1
    hiring_type: HiringType_None
    can_combat_shove: true
    cyberware_jack: "Datajack"
    cyberware_left_arm: "Obvious Cyberarm"
    cyberware_right_arm: "Obvious Cyberarm"
    cyberware_left_leg: "Obvious Cyberleg 2"
    cyberware_right_leg: "Obvious Cyberleg 2"
    portrait {
      filename: "geeked_maria_amazon"
    }
    portrait_code_override: "s4h7c1"
    karma: 103
    hiring_cost_override: 1000
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -37
    y: 0
    z: 217
  }
  orientation: ORIENTATION_S
  displayName: "U93Staff"
  idRef {
    id: "54702c9c6665384809001367"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 1
    dummyInteraciton {
    }
    interaction_info_text: ""
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Objects/InvisibleActor"
    character_sheet_id: "BaseCivilian"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Non-Combatant"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "MagLock System"
    pc_spawn_number: -1
    portrait {
      filename: "generic_machine"
    }
    karma: 6
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -106.1
    y: 0
    z: 142.1
  }
  orientation: ORIENTATION_S
  displayName: "U93Staff"
  idRef {
    id: "5470cf45666538c40b000b36"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 3
    interactionIcon: InteractionIcon_Conversation
    interaction_info_text: ""
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Wealthy/HumanFemalePeacock"
    character_sheet_id: "BaseCivilian"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Non-Combatant"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "Female Bartender"
    pc_spawn_number: -1
    portrait {
      filename: "pc_elffemale_10_punkdecker"
    }
    karma: 6
    is_prop_character: true
    has_fist: false
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -102
    y: 0
    z: 136
  }
  orientation: ORIENTATION_E
  displayName: "U93Staff"
  idRef {
    id: "5470cf94666538c40b000b37"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 3
    interactionIcon: InteractionIcon_Conversation
    interaction_info_text: ""
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Story/MrJohnson"
    character_sheet_id: "AGChemie_Cyberzombie_Lv1"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        hp: 0
        ap: 0
        armor: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        dodge: 0
      }
      specializations {
        rifle: 0
        edged: 0
        unarmed: 0
      }
      archetypeName: "Non-Combatant"
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "Male Bartender"
    pc_spawn_number: -1
    portrait {
      filename: "pc_elfmale_03b_slick"
    }
    karma: 174
    is_prop_character: true
    has_fist: false
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: 18
    y: 0
    z: 240
  }
  orientation: ORIENTATION_S
  GeneralTags: "isNewt"
  displayName: "U93Staff"
  idRef {
    id: "54838b45666538ac0900674f"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 3
    prerequisites {
      ops {
        functionName: "Evaluate If Actor is Inside Region"
        args {
          call_value {
            functionName: "Specific Actor"
            args {
              call_value {
                functionName: "Get Map Item (Actor)"
                args {
                  string_value: "54838b45666538ac0900674f"
                }
              }
            }
            args {
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "AreOrAreNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (Region)"
            args {
              string_value: "54926e986665386c04004156"
            }
          }
        }
      }
    }
    interactionIcon: InteractionIcon_Conversation
    interaction_info_text: "Talk to bouncer?"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Core/TrollMale"
    character_sheet_id: "AGChemie_Cyberzombie_Lv1"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "gumbo_Soldier"
      attitude: AttitudeBoss
      vulnerabilities {
      }
    }
    equipment {
      prefab_name: "Berlin_Fist 3 Cestus"
    }
    equipment {
      prefab_name: "DeckerFab"
    }
    team_id: "Security"
    char_name: "Newt"
    GeneralTags: "isNewt"
    pc_spawn_number: -1
    portrait {
      filename: "backer_trollmale_chriskluwe_sympathyplan"
    }
    description_bio: ""
    portrait_code_override: "s6h6c6b10c6t10"
    karma: 174
    is_prop_character: false
    has_fist: false
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -73
    y: 0
    z: 160
  }
  orientation: ORIENTATION_W
  GeneralTags: "isBand"
  displayName: "MecurialBand"
  idRef {
    id: "548632b86665386c06007a7e"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 1
    dummyInteraciton {
    }
    interaction_info_text: ""
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Punk/HumanFemaleSkirtGrayPunk"
    character_sheet_id: "AGChemie_Cyberzombie_Lv1"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        hp: 0
        ap: 0
        armor: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        dodge: 0
      }
      specializations {
        rifle: 0
        edged: 0
        unarmed: 0
      }
      archetypeName: "Non-Combatant"
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "Eliza"
    GeneralTags: "isBand"
    pc_spawn_number: -1
    portrait {
      filename: ""
    }
    karma: 174
    is_prop_character: true
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -74
    y: 0
    z: 154
  }
  orientation: ORIENTATION_N
  GeneralTags: "isBand"
  displayName: "MecurialBand"
  idRef {
    id: "548633f06665386c06007a80"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 1
    dummyInteraciton {
    }
    interaction_info_text: ""
  }
  lod: 0
  character_instance {
    prefab_name: "Berlin:Story/HumanFemaleMonika"
    character_sheet_id: "AGChemie_Cyberzombie_Lv1"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        hp: 0
        ap: 0
        armor: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        dodge: 0
      }
      specializations {
        rifle: 0
        edged: 0
        unarmed: 0
      }
      archetypeName: "Non-Combatant"
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "Shiara"
    GeneralTags: "isBand"
    pc_spawn_number: -1
    portrait {
      filename: ""
    }
    karma: 174
    is_prop_character: true
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -78
    y: 0
    z: 154
  }
  orientation: ORIENTATION_N
  GeneralTags: "isBand"
  displayName: "MecurialBand"
  idRef {
    id: "548634236665386c06007a83"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 1
    dummyInteraciton {
    }
    interaction_info_text: ""
  }
  lod: 0
  character_instance {
    prefab_name: "Berlin:Gangers/DwarfMaleBerlinGangerMohawk"
    character_sheet_id: "AGChemie_Cyberzombie_Lv1"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        hp: 0
        ap: 0
        armor: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        dodge: 0
      }
      specializations {
        rifle: 0
        edged: 0
        unarmed: 0
      }
      archetypeName: "Non-Combatant"
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "Cort"
    GeneralTags: "isBand"
    pc_spawn_number: -1
    portrait {
      filename: ""
    }
    karma: 174
    is_prop_character: true
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -84
    y: 0
    z: 175
  }
  orientation: ORIENTATION_N
  displayName: "U93Staff"
  idRef {
    id: "548635c56665386c06007a85"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 2
    interactionIcon: InteractionIcon_Conversation
    interaction_info_text: "Talk with the backstage guard?"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Security/ElfMaleSecurity"
    character_sheet_id: "Lonestar_Lv3_Human_Pistol"
    equipment_sheet_id: "Lonestar_Lv3_Pistol_Gear"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Non-Combatant"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "Backstage Guard"
    pc_spawn_number: -1
    cyberware_body: "Dermal Plating Mk 2"
    portrait {
      filename: "pc_elfmale_12a"
    }
    karma: 52
    is_prop_character: false
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -85
    y: 0
    z: 133
  }
  orientation: ORIENTATION_E
  displayName: "Patron"
  idRef {
    id: "54b48e9d666538ec0c004cca"
  }
  interactionRoot {
    isEnabled: false
    interactionRadius: 2
    interactionIcon: InteractionIcon_Conversation
    interaction_info_text: "Speak with Shady Patron?"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Punk/HumanFemaleSkirtGrayPunk"
    character_sheet_id: "BaseCivilian"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Non-Combatant"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "Shady Patron"
    pc_spawn_number: -1
    ai_ignores: true
    portrait {
      filename: "pc_humanfemale_08a_whitehair"
    }
    karma: 6
    is_prop_character: true
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -87
    y: 0
    z: 285
  }
  orientation: ORIENTATION_W
  GeneralTags: "isBadGuy"
  displayName: "Thug"
  idRef {
    id: "54b95a18666538900b00590f"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 1
    dummyInteraciton {
    }
    interaction_info_text: ""
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Core/HumanMale"
    character_sheet_id: "Lvl3_Merc_Human_CyberWarrior"
    character_mod {
      stats {
        body: 1
        quickness: -3
        strength: 1
        charisma: -1
        intelligence: -2
        willpower: -3
        essence: 0
        magic: -6
        hp: 10
        ap: 0
        armor: -2
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
        is_fearless: 0
      }
      skills {
        ranged_combat: -1
        close_combat: 2
        throwing_weapons: -2
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: -3
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: -2
        rifle: -2
        shotgun: 0
        smg: -3
        edged: 0
        unarmed: 2
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Guard - Protect"
      attitude: AttitudeAggressive
      attackRandom: AttackStyle_AllEqual
      vulnerabilities {
        normal: VulnerabilityLevel_Default
        magic: VulnerabilityLevel_Default
      }
    }
    equipment {
      prefab_name: "RiggerTrenchcoat"
    }
    equipment {
      prefab_name: "Grenade 1 (Flash)"
    }
    team_id: "Civilians"
    char_name: "Jericho"
    GeneralTags: "isBadGuy"
    pc_spawn_number: -1
    ready_priority: -1
    portrait {
      filename: "pc_humanmale_04_brawler"
    }
    portrait_code_override: "s5h0c1b10c1t0"
    karma: 42
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -92.6
    y: 0
    z: 136.3
  }
  orientation: ORIENTATION_E
  GeneralTags: "isTellin"
  displayName: "U93Staff"
  idRef {
    id: "54b98095666538b409004df3"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 4
    interactionIcon: InteractionIcon_Conversation
    interaction_info_text: "Speak with Tellin?"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Core/ElfMale"
    character_sheet_id: "BaseCivilian"
    character_mod {
      stats {
        body: 2
        quickness: 2
        strength: 2
        charisma: 4
        intelligence: 2
        willpower: 2
        essence: 1
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
      }
      skills {
        ranged_combat: 4
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 7
        dodge: 2
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 4
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "gumbo_Auto"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    equipment {
      prefab_name: "Player_RiggerStarter"
    }
    equipment {
      prefab_name: "HealthPack_hi"
    }
    equipment {
      prefab_name: "HealthPack_med"
    }
    team_id: "Security"
    char_name: "Tellin"
    GeneralTags: "isTellin"
    pc_spawn_number: -1
    hiring_type: HiringType_Hireable
    portrait {
      filename: "pc_elfmale_05b_platpunk"
    }
    portrait_code_override: "s5h5c2"
    karma: 1
    hiring_cost_override: 1025
    hiring_tag: "Mage"
    id: "sc_tellin"
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -76
    y: 0
    z: 159.5
  }
  orientation: ORIENTATION_N
  GeneralTags: "isBand"
  displayName: "OnStage"
  idRef {
    id: "54b98c0f666538c000000870"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 1
    dummyInteraciton {
    }
    interaction_info_text: ""
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Core/HumanFemale"
    character_sheet_id: "BaseCivilian"
    equipment_sheet_id: "NPC_MariaMercurial_OffRUN"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 3
        hp: 0
        ap: 0
        armor: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        dodge: 0
      }
      specializations {
        rifle: 0
        edged: 0
        unarmed: 0
      }
      archetypeName: "Non-Combatant"
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "Maria Mecurial"
    GeneralTags: "isBand"
    pc_spawn_number: -1
    ai_ignores: true
    cyberware_jack: "Datajack"
    cyberware_left_arm: "Obvious Cyberarm"
    cyberware_right_arm: "Obvious Cyberarm"
    cyberware_left_leg: "Obvious Cyberleg 2"
    cyberware_right_leg: "Obvious Cyberleg 2"
    portrait {
      filename: "geeked_maria_amazon"
    }
    portrait_code_override: "s4h7c1"
    karma: 6
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -95
    y: 0
    z: 157
  }
  orientation: ORIENTATION_S
  displayName: "Patron"
  idRef {
    id: "54bb1eed666538f00e006e26"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 2
    prerequisites {
      ops {
        functionName: "Evaluate If Actor Has Item"
        args {
          call_value {
            functionName: "Specific Actor"
            args {
              call_value {
                functionName: "Get Map Item (Player)"
                args {
                  int_value: 0
                }
              }
            }
            args {
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "HasOrHasNot"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (Item)"
            args {
              string_value: "item_BackStagePasses"
            }
          }
        }
      }
    }
    interactionIcon: InteractionIcon_Conversation
    interaction_info_text: ""
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Homeless/DwarfMaleHomelessBeard"
    character_sheet_id: "BaseCivilian"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Non-Combatant"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "Aaron"
    pc_spawn_number: -1
    portrait {
      filename: "pc_dwarfmale_01b_punk"
    }
    karma: 6
    is_prop_character: true
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -96
    y: 0
    z: 139
  }
  orientation: ORIENTATION_W
  displayName: "Kyle Morgan"
  idRef {
    id: "54fcde356131316c1f0020ae"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Story/MrJohnson"
    character_sheet_id: "Acoylte_Lv6_Human"
    character_mod {
      stats {
        body: 0
        quickness: 1
        strength: 1
        charisma: 0
        intelligence: 1
        willpower: -1
        essence: -3
        magic: -6
        hp: 0
        ap: 1
        armor: 4
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
        is_fearless: 1
      }
      skills {
        ranged_combat: 5
        close_combat: 5
        throwing_weapons: 1
        spellcasting: 0
        decking: 0
        conjuring: -5
        spirit_summoning: -6
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 1
        etiquette_security: 1
        etiquette_gang: 0
        etiquette_socialite: 1
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 5
        rifle: 5
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 5
        spirit_control: -6
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "gumbo_Auto"
      attitude: AttitudeAggressive
      vulnerabilities {
        normal: VulnerabilityLevel_Less
      }
    }
    equipment {
      prefab_name: "Wired Reflexes"
    }
    equipment {
      prefab_name: "Vision Magnification Eyes (Blitz) (Advanced)"
    }
    equipment {
      prefab_name: "Cerebral Booster"
    }
    equipment {
      prefab_name: "Berlin_AR 1 AK98 (Smartlink)"
    }
    equipment {
      prefab_name: "Berlin_Pi 2 Ares Predator (Errant)"
    }
    team_id: "Civilians"
    char_name: "Kyle Morgan"
    pc_spawn_number: -1
    hiring_type: HiringType_None
    cyberware_body: "Berlin_Suprathyroid (Bioware)"
    portrait {
      filename: "backer_humanmale_winterhawk_dralastairstone"
    }
    description_bio: "Kyle is one of the world\'s premier assassins. Never heard of him? That\'s just proof of how good he is."
    karma: 212
    hiring_cost_override: 1000
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -97
    y: 0
    z: 139
  }
  orientation: ORIENTATION_W
  displayName: "Mr Dragon"
  idRef {
    id: "54fcde416131316c1f0020af"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Wealthy/HumanFemalePeacock"
    character_sheet_id: "Acoylte_Lv6_Human"
    equipment_sheet_id: "Errant_Lv5_Spellcasting"
    equipment_sheet_id: "Errant_Lv5_Shaman"
    character_mod {
      stats {
        body: 5
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 2
        essence: 0
        magic: 0
        hp: 0
        ap: 1
        armor: 6
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 4
        vision_cone_distance: 6
        vision_cone_angle: 90
      }
      skills {
        ranged_combat: 1
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: -3
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 1
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Guard - Seek And Destroy"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "Perianwyr"
    pc_spawn_number: -1
    hiring_type: HiringType_None
    cyberware_eyes: "Vision Magnification Eyes (Blitz)"
    portrait {
      filename: "npc_humanfemale_Perianwyr"
    }
    description_bio: "This quiet woman watches you with a too-knowing look in her eyes, and her hands carefully wrapped around a goblet that would look more in place in a dragon\'s horde than here."
    karma: 224
    hiring_cost_override: 1000
  }
}
characters {
  name: "system_spawner_playerSpawner"
  gridPoint {
    x: -37
    y: 0
    z: 231
  }
  orientation: ORIENTATION_S
  idRef {
    id: "55179a10663136880d000733"
  }
  lod: 0
  character_instance {
    character_mod {
      archetypeName: "Player"
    }
    team_id: "Shadowrunners"
    char_name: "New Actor"
    enabled_at_start: true
    pc_spawn_number: 2
  }
}
characters {
  name: "system_spawner_playerSpawner"
  gridPoint {
    x: -36
    y: 0
    z: 232
  }
  orientation: ORIENTATION_S
  idRef {
    id: "55179a14663136880d000734"
  }
  lod: 0
  character_instance {
    character_mod {
      archetypeName: "Player"
    }
    team_id: "Shadowrunners"
    char_name: "New Actor"
    enabled_at_start: true
    pc_spawn_number: 1
  }
}
characters {
  name: "system_spawner_playerSpawner"
  gridPoint {
    x: -37
    y: 0
    z: 232
  }
  orientation: ORIENTATION_S
  idRef {
    id: "55179a17663136880d000735"
  }
  lod: 0
  character_instance {
    character_mod {
      archetypeName: "Player"
    }
    team_id: "Shadowrunners"
    char_name: "New Actor"
    enabled_at_start: true
    pc_spawn_number: 3
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -82.5
    y: 0
    z: 167.5
  }
  orientation: ORIENTATION_S
  displayName: "Cameo"
  idRef {
    id: "5543293666313674130043d5"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 1
    dummyInteraciton {
    }
    interaction_info_text: ""
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Story/Harlequin"
    character_sheet_id: "BaseCivilian"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Non-Combatant"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "Harlequin"
    pc_spawn_number: -1
    portrait {
      filename: "npc_elfmale_harlequin"
    }
    karma: 6
    is_prop_character: true
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -103
    y: 0
    z: 139
  }
  orientation: ORIENTATION_E
  displayName: "LoneStar"
  idRef {
    id: "556ad745663136fc0c00069d"
  }
  lod: 0
  character_instance {
    prefab_name: "Lonestar/OrkLoneStarCaptain"
    character_sheet_id: "Lonestar_Lv3_Ork_Shotgun"
    equipment_sheet_id: "Lonestar_Lv3_Shotgun_Gear"
    character_mod {
      stats {
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 2
        vision_cone_distance: 18
        vision_cone_angle: 90
        is_fearless: 0
      }
      skills {
      }
      specializations {
      }
      archetypeName: "Non-Combatant"
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "Lonestar Enforcer"
    pc_spawn_number: -1
    portrait {
      filename: ""
    }
    is_prop_character: true
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -98
    y: 0
    z: 147
  }
  orientation: ORIENTATION_W
  displayName: "LoneStar"
  idRef {
    id: "556ad747663136fc0c00069e"
  }
  lod: 0
  character_instance {
    prefab_name: "Lonestar/HumanMaleLonestarGuard"
    character_sheet_id: "Lonestar_Lv3_Human_Pistol"
    equipment_sheet_id: "Lonestar_Lv3_Pistol_Gear"
    character_mod {
      stats {
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 2
        vision_cone_distance: 18
        vision_cone_angle: 90
        is_fearless: 0
      }
      skills {
      }
      specializations {
      }
      archetypeName: "Non-Combatant"
    }
    team_id: "Civilians"
    char_name: "Lonestar Guard"
    pc_spawn_number: -1
    portrait {
      filename: ""
    }
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -92
    y: 0
    z: 143
  }
  orientation: ORIENTATION_N
  displayName: "LoneStar"
  idRef {
    id: "556ad749663136fc0c00069f"
  }
  lod: 0
  character_instance {
    prefab_name: "Lonestar/TrollMaleLoneStarHeavyGuard"
    character_sheet_id: "Lonestar_Lv3_Heavy_SMG"
    equipment_sheet_id: "Lonestar_Lv3_SMG_Gear"
    character_mod {
      stats {
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 2
        vision_cone_distance: 18
        vision_cone_angle: 90
        is_fearless: 0
      }
      skills {
      }
      specializations {
      }
      archetypeName: "Non-Combatant"
    }
    team_id: "Civilians"
    char_name: "Lonestar Heavy Gunner"
    pc_spawn_number: -1
    portrait {
      filename: ""
    }
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -72
    y: 0
    z: 120
  }
  orientation: ORIENTATION_E
  displayName: "LoneStar"
  idRef {
    id: "556ad74a663136fc0c0006a0"
  }
  lod: 0
  character_instance {
    prefab_name: "Lonestar/HumanFemaleLonestarCaptain"
    character_sheet_id: "Lonestar_Lv3_Captain"
    equipment_sheet_id: "Lonestar_Lv3_Captain_Gear"
    character_mod {
      stats {
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
      }
      specializations {
      }
      archetypeName: "Non-Combatant"
    }
    team_id: "Civilians"
    char_name: "Lonestar Captain"
    pc_spawn_number: -1
    portrait {
      filename: ""
    }
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -90
    y: 0
    z: 182
  }
  orientation: ORIENTATION_W
  displayName: "LoneStar"
  idRef {
    id: "556ad74d663136fc0c0006a1"
  }
  lod: 0
  character_instance {
    prefab_name: "Lonestar/HumanMaleLonestarMage"
    character_sheet_id: "Lonestar_Lv1_Human_Mage"
    equipment_sheet_id: "Lonestar_Lv1_Mage_Gear"
    character_mod {
      stats {
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 2
        vision_cone_distance: 18
        vision_cone_angle: 90
        is_fearless: 0
      }
      skills {
      }
      specializations {
      }
      archetypeName: "Non-Combatant"
    }
    team_id: "Civilians"
    char_name: "Lonestar Mage"
    pc_spawn_number: -1
    portrait {
      filename: ""
    }
    is_prop_character: true
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -107
    y: 0
    z: 177
  }
  orientation: ORIENTATION_S
  displayName: "LoneStar"
  idRef {
    id: "556ad750663136fc0c0006a2"
  }
  lod: 0
  character_instance {
    prefab_name: "Lonestar/HumanMaleLonestarGuard"
    character_sheet_id: "Lonestar_Lv1_Human_Pistol"
    equipment_sheet_id: "Lonestar_Lv1_Pistol_Gear"
    character_mod {
      stats {
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 2
        vision_cone_distance: 18
        vision_cone_angle: 90
        is_fearless: 0
      }
      skills {
      }
      specializations {
      }
      archetypeName: "Non-Combatant"
    }
    team_id: "Civilians"
    char_name: "Lonestar Guard"
    pc_spawn_number: -1
    portrait {
      filename: ""
    }
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -95
    y: 0
    z: 169
  }
  orientation: ORIENTATION_S
  displayName: "LoneStar"
  idRef {
    id: "556ad752663136fc0c0006a3"
  }
  lod: 0
  character_instance {
    prefab_name: "Lonestar/TrollMaleLoneStarHeavyGuard"
    character_sheet_id: "Lonestar_Lv1_Heavy_SMG"
    equipment_sheet_id: "Lonestar_Lv1_SMG_Gear"
    character_mod {
      stats {
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 2
        vision_cone_distance: 18
        vision_cone_angle: 90
        is_fearless: 0
      }
      skills {
      }
      specializations {
      }
      archetypeName: "Non-Combatant"
    }
    team_id: "Civilians"
    char_name: "Lonestar Heavy Gunner"
    pc_spawn_number: -1
    portrait {
      filename: ""
    }
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "bol_BusOpen"
    typeName: "bool"
  }
}
variables {
  bool_value: true
  variableref_value {
    scope: TsVariableScope_Scene
    name: "bol_PlayerHasWeapon"
    typeName: "bool"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "bol_BypassedSecurity"
    typeName: "bool"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "bol_ThugBattle"
    typeName: "bool"
  }
}
variables {
  string_value: ""
  variableref_value {
    scope: TsVariableScope_Scene
    name: "str_Rumor"
    typeName: "string"
  }
}
variables {
  int_value: 0
  variableref_value {
    scope: TsVariableScope_Scene
    name: "int_Rumor"
    typeName: "int"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "bol_MariaChanged"
    typeName: "bool"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "bol_MaxTalkedTo"
    typeName: "bool"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "bol_StudioOccupied"
    typeName: "bool"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "bol_SavedByMaria"
    typeName: "bool"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "bol_NewtConversation"
    typeName: "bool"
  }
}
variables {
  int_value: 0
  variableref_value {
    scope: TsVariableScope_Scene
    name: "int_Heckler"
    typeName: "int"
  }
}
variables {
  string_value: ""
  variableref_value {
    scope: TsVariableScope_Scene
    name: "str_HecklerText"
    typeName: "string"
  }
}
variables {
  int_value: 0
  variableref_value {
    scope: TsVariableScope_Scene
    name: "int_HecklerMessage"
    typeName: "int"
  }
}
variables {
  string_value: ""
  variableref_value {
    scope: TsVariableScope_Scene
    name: "str_WeaponsGirlIntro"
    typeName: "string"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "bol_BackRoomAccessed"
    typeName: "bool"
  }
}
variables {
  string_value: ""
  variableref_value {
    scope: TsVariableScope_Scene
    name: "str_BackRoomAccessCode"
    typeName: "string"
  }
}
variables {
  string_value: ""
  variableref_value {
    scope: TsVariableScope_Scene
    name: "str_ShadyIntro"
    typeName: "string"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "bol_HelpArrived"
    typeName: "bool"
  }
}
variables {
  int_value: 0
  variableref_value {
    scope: TsVariableScope_Scene
    name: "int_CombatRound"
    typeName: "int"
  }
}
variables {
  int_value: 0
  variableref_value {
    scope: TsVariableScope_Scene
    name: "int_RoundsUntilLoneStar"
    typeName: "int"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "bol_CombatActive"
    typeName: "bool"
  }
}
variables {
  int_value: 0
  variableref_value {
    scope: TsVariableScope_Scene
    name: "int_BadGuysReady"
    typeName: "int"
  }
}
variables {
  string_value: ""
  variableref_value {
    scope: TsVariableScope_Scene
    name: "str_TellinText"
    typeName: "string"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "bol_KnowsAaron"
    typeName: "bool"
  }
}
variables {
  bool_value: true
  variableref_value {
    scope: TsVariableScope_Scene
    name: "bBackstageDenied"
    typeName: "bool"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "bAlternatePath"
    typeName: "bool"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "bNoSpawn_FOR_THOMAS"
    typeName: "bool"
  }
}
variables {
  int_value: 0
  variableref_value {
    scope: TsVariableScope_Scene
    name: "iGetAwayProgession"
    typeName: "int"
  }
}
variables {
  int_value: 0
  variableref_value {
    scope: TsVariableScope_Scene
    name: "int_Bartender"
    typeName: "int"
  }
}
mapEvents: "eBusArrival"
mapEvents: "eBusDepart"
mapEvents: "eBusNew"
mapEvents: "eBusMoveArrival"
mapEvents: "eBusMoveDepart"
mapEvents: "eWeaponSurrender"
mapEvents: "eSecurityBypassed"
mapEvents: "eGenerateRumor"
mapEvents: "eMariaEnters"
mapEvents: "eBadGuys"
mapEvents: "eHeckling"
mapEvents: "eLoneStarArrives"
mapEvents: "eBackupArrives"
mapEvents: "eCallNewt"
mapEvents: "eUpdateCounter"
mapEvents: "eDeniedBackstageAccess"
mapEvents: "eBathroomFire"
mapEvents: "eReturnGear"
mapEvents: "eGetAway"
mapEvents: "eGetAwayProgression"
mapEvents: "eSceneExit"
mapEvents: "eSceneTransition"
mapEvents: "eDELETEME"
goals {
  name: "FAILURE"
  type: GoalType_Primary
  status: GoalStatus_Hidden
  description: "You have been killed..."
}
goals {
  name: "Bypass Security"
  type: GoalType_Secondary
  status: GoalStatus_Hidden
  description: "Bypass the security station, keeping your weapon."
}
goals {
  name: "Enter Underworld 93"
  type: GoalType_Primary
  status: GoalStatus_Started
  description: "Get into the club."
}
goals {
  name: "Find a way backstage"
  type: GoalType_Primary
  status: GoalStatus_Hidden
  description: "Find a way to enter the private VIP area backstage."
}
goals {
  name: "LoneStar Arrived"
  type: GoalType_Primary
  status: GoalStatus_Hidden
  description: "Caught red-handed in a firefight.   Maybe you ought to try to leave before the badges show up next time?"
}
goals {
  name: "Mission Failure"
  type: GoalType_Primary
  status: GoalStatus_Hidden
  description: "Maria Mecurial has been killed... Some protecter you turned out to be."
}
worldMapLocation {
  filename: ""
  location {
    x: 0
    y: 0
  }
}
mapName: "SCENE - Underworld 93"
parentStory: ""
scene_title: "Underworld 93"
scene_subtitle: ""
scene_synopsis: "With your team selected, and hopes of a big payday you stand at the bus stop waiting for the CityMetro transport to show up. Waiting for the bus isn\'t glamorous, but it has its advantages. Buses are automated since the mob war of 2030, and drivers have been replaced by riggers and software drivers.\n\nNo driver to look at the weapons you\'re packing, no one on the bus this time of night to ask questions, you just get a peaceful ride in silence. You board the bus as it arrives, and head toward Underworld 93, the legendary club in the ashes of Pullayup. \n\nMaria Mercurial is playing a show there tonight, and just being there is bragging rights- not to mention what it\'ll do for your shadow rep. You imagine that people will be saying \"Did you see? $(story.str_RunnerName) was here!\"\n\nStay frosty, chummer, don\'t get ahead of yourself. You don\'t even know what the job is yet."
scene_image: "marialoading"
scene_continue_button_skip: false
scene_restore_runner_health: true
directional_light_dir {
  x: -0.5
  y: -1
  z: -0.75
}
directional_light_color {
  r: 0.50196081
  g: 0.50196081
  b: 0.50196081
}
ambient_light_color {
  r: 0.50196081
  g: 0.50196081
  b: 0.50196081
}
allow_drawn_weapons: false
team_affiliations {
  team_name: "Shadowrunners"
  affiliation: 0
  affiliation: 1
  affiliation: 1
  affiliation: 0
  affiliation: 0
  affiliation: 0
}
team_affiliations {
  team_name: "Gangers"
  affiliation: 1
  affiliation: 0
  affiliation: 1
  affiliation: 0
  affiliation: 0
  affiliation: 0
}
team_affiliations {
  team_name: "LoneStar"
  affiliation: 1
  affiliation: 1
  affiliation: 0
  affiliation: 0
  affiliation: 0
  affiliation: 0
}
team_affiliations {
  team_name: "Civilians"
  affiliation: 0
  affiliation: 0
  affiliation: 0
  affiliation: 0
  affiliation: 0
  affiliation: 0
}
team_affiliations {
  team_name: "Mercurial"
  affiliation: 0
  affiliation: 0
  affiliation: 0
  affiliation: 0
  affiliation: 0
  affiliation: 0
}
team_affiliations {
  team_name: "Security"
  affiliation: 0
  affiliation: 0
  affiliation: 0
  affiliation: 0
  affiliation: 0
  affiliation: 0
}
scene_dimensions {
  dimension_name: "Default"
}
scene_dimensions {
  dimension_name: "Matrix"
  initial_alarm_state: 0
  turns_per_round: 3
}
character_roster {
}
show_hiring_screen_on_scene_load: false
scene_hiring_prerequisites {
  prereq_description: ""
  prereq_conditions {
  }
}
hiring_slot_count: 3
hiring_minimum_karma: 0
hiring_maximum_karma: 1
roster_overrides {
  roster_entries {
    reference_id: "NPC_Blight"
    hiring_conditions {
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "542848a8633464d816001ad5"
            }
            args {
              string_value: "int_NPC_Status_Blight"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 2
            }
          }
        }
        args {
          int_value: 0
        }
      }
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "NPC_ElJefe"
    hiring_conditions {
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "NPC_Gunner"
    hiring_conditions {
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "NPC_Luna"
    hiring_conditions {
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "NPC_Nebel"
    hiring_conditions {
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "542848a8633464d816001ad5"
            }
            args {
              string_value: "int_NPC_Status_Nebel"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 2
            }
          }
        }
        args {
          int_value: 0
        }
      }
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "NPC_Padre"
    hiring_conditions {
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "NPC_Shiver"
    hiring_conditions {
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "NPC_Sucio"
    hiring_conditions {
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
}
use_hiring_cost_warning: false
hiring_average_cost: 0
override_hiring_average_cost: false
show_equip_screen_on_scene_load: false
is_persistant: false
is_persistant_has_value: false
can_move_outside_camera_regions: false
can_start_before_triggers: false
can_use_team_advancement: false
