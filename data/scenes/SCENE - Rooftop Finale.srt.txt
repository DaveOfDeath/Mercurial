triggers {
  name: "---=== GENERAL TRIGGERS ===---"
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: false
  idRef {
    id: "557cd612663136d00c0059e7"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "General.Hernandez"
  events {
    ops {
      functionName: "On Map Start"
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "542848a8633464d816001ad5"
          }
          args {
            string_value: "int_NPC_Status_Hernandez"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 10
      }
    }
  }
  actions {
    ops {
      functionName: "Change Actor Team"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "55c793fc6631363811004d9c"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Change Actor Control"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "55c793fc6631363811004d9c"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "PlayerOrAI"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55c793906631363811004d9b"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "General.SpawnLocation"
  events {
    ops {
      functionName: "On Map Start"
    }
  }
  conditions {
    ops {
      functionName: "Comparison (string)"
      args {
        call_value {
          functionName: "Get Story Variable (string)"
          args {
          }
          args {
            string_value: "str_SpawnPoint"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        string_value: "ROOF-SPAWN3"
      }
    }
  }
  actions {
    ops {
      functionName: "Teleport Actor near Point"
      args {
        call_value {
          functionName: "All Actors on Team"
          args {
            call_value {
              functionName: "Get Preset Value (string)"
              args {
                string_value: "FactionList"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (SceneDimension)"
              args {
                string_value: "Default"
              }
            }
          }
        }
      }
      args {
        int_value: 1
      }
      args {
        call_value {
          functionName: "Current Location of Prop"
          args {
            call_value {
              functionName: "Get Map Item (Prop)"
              args {
                string_value: "55a20dbe6631365809003f3b"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 3
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Teleport Camera To Actor"
      args {
        call_value {
          functionName: "Get Map Item (Player)"
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "55c7946f6631363811004d9f"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "Berlin:General/standing_idle_sitting"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55a20d076631365809003f39"
  }
  elseActions {
    ops {
      functionName: "Teleport Actor near Point"
      args {
        call_value {
          functionName: "All Actors on Team"
          args {
            call_value {
              functionName: "Get Preset Value (string)"
              args {
                string_value: "FactionList"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (SceneDimension)"
              args {
                string_value: "Default"
              }
            }
          }
        }
      }
      args {
        int_value: 1
      }
      args {
        call_value {
          functionName: "Current Location of Prop"
          args {
            call_value {
              functionName: "Get Map Item (Prop)"
              args {
                string_value: "55a20e0f6631365809003f3c"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 5
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Teleport Camera To Actor"
      args {
        call_value {
          functionName: "Get Map Item (Player)"
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "55c7946f6631363811004d9f"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "Berlin:General/standing_idle_sitting"
          }
        }
      }
    }
  }
  is_oneshot: true
}
triggers {
  name: "General.MapLoad"
  events {
    ops {
      functionName: "On Map Start"
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Set Environmental Effect Amount"
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "EnvironmentalEffects"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 999
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "Melee"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "PreFire"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "Fire"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Team\'s Turn"
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isDragon"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Set Waypoint on Actor"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "PrimaryOrSecondary"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "557cfed1663136e40e004cae"
          }
        }
      }
    }
    ops {
      functionName: "Set Variable (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "542848a8633464d816001ad5"
          }
          args {
            string_value: "int_NPC_Status_KyleMorgan"
          }
        }
      }
      args {
        int_value: 1
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isCircle"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "557bdf79663136ac09005010"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "General.TripWire"
  events {
    ops {
      functionName: "On Region Enter"
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "55a20a1b6631365809003f34"
          }
        }
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (Actor)"
      args {
        call_value {
          functionName: "Triggering Actor"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Player)"
          args {
            int_value: 0
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Add Camera Point of Interest (Actors)"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "557cfed1663136e40e004cae"
              }
            }
          }
          args {
          }
        }
      }
      args {
        float_value: -1
      }
    }
    ops {
      functionName: "Start Conversation Between Actors"
      args {
        call_value {
          functionName: "Get Map Item (Conversation)"
          args {
            string_value: "557cb852393066e00a00090b"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Player)"
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "557cfed1663136e40e004cae"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Change Actor Team"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "55a210356631365809003fe6"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Set Region Enabled"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "55a20a1b6631365809003f34"
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Trigger"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "55a20e546631365809003f3d"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55a20e546631365809003f3d"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "General.PlayerDeath"
  events {
    ops {
      functionName: "On Actor Death"
    }
  }
  conditions {
    ops {
      functionName: "Comparison (Actor)"
      args {
        call_value {
          functionName: "Triggering Target Actor"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Player)"
          args {
            int_value: 0
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Set Goal Status"
      args {
        call_value {
          functionName: "Get Map Item (Goal)"
          args {
            string_value: "Survive"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "GoalStatus"
          }
          args {
            int_value: 3
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55a224c26631365809004127"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "General.HernandezDeath"
  events {
    ops {
      functionName: "On Actor Death"
    }
  }
  conditions {
    ops {
      functionName: "Comparison (Actor)"
      args {
        call_value {
          functionName: "Triggering Target Actor"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "55c793fc6631363811004d9c"
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Story Variable (bool)"
          args {
            string_value: "542848a8633464d816001ad5"
          }
          args {
            string_value: "bool_HernandezDead"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Display Text over Actor"
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "55c7946f6631363811004d9f"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TextPopupStyle"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        string_value: "ARMANDO!!!"
      }
      args {
        float_value: 0
      }
      args {
        float_value: 255
      }
      args {
        float_value: 0
      }
      args {
        float_value: 128
      }
      args {
        float_value: 13
      }
      args {
        float_value: 3
      }
      args {
        float_value: 0
      }
    }
  }
  isActive: true
  idRef {
    id: "55c794216631363811004d9d"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "General.MariaDeath"
  events {
    ops {
      functionName: "On Actor Death"
    }
  }
  conditions {
    ops {
      functionName: "Comparison (Actor)"
      args {
        call_value {
          functionName: "Triggering Target Actor"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "55c7946f6631363811004d9f"
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Story Variable (bool)"
          args {
            string_value: "542848a8633464d816001ad5"
          }
          args {
            string_value: "bool_MercurialDead"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Display Text over Actor"
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "55c793fc6631363811004d9c"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TextPopupStyle"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        string_value: "MARIA!!!"
      }
      args {
        float_value: 0
      }
      args {
        float_value: 255
      }
      args {
        float_value: 0
      }
      args {
        float_value: 128
      }
      args {
        float_value: 13
      }
      args {
        float_value: 3
      }
      args {
        float_value: 0
      }
    }
  }
  isActive: true
  idRef {
    id: "55c794246631363811004d9e"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "General.MariasMoods"
  events {
    ops {
      functionName: "On Curtains Up"
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Set Actor Display Name"
      args {
        call_value {
          functionName: "All Actors With Tag"
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "isMaria"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        string_value: "Maria Mercurial"
      }
    }
  }
  isActive: true
  idRef {
    id: "55c795876631363811004da3"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: " "
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: false
  idRef {
    id: "557cd607663136d00c0059e6"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "---=== DRAGON FIGHT  TRIGGERS ===---"
  events {
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Set Variable (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iTargetArmorValue"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Actor Attribute"
          args {
            call_value {
              functionName: "Nearest Tagged Actor to Prop"
              args {
                call_value {
                  functionName: "Get Map Item (SenseTagList)"
                  args {
                    string_value: "isTarget"
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Map Item (Prop)"
                  args {
                    string_value: "55a2121f6631365809004091"
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "BaseOrCurrent"
              }
              args {
                int_value: 1
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "ActorAttributes"
              }
              args {
                int_value: 10
              }
            }
          }
        }
      }
    }
    ops {
      functionName: "Cause Damage"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Nearest Tagged Actor to Actor"
              args {
                call_value {
                  functionName: "Get Map Item (SenseTagList)"
                  args {
                    string_value: "isTarget"
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Map Item (Actor)"
                  args {
                    string_value: "557bdeac663136ac0900500f"
                  }
                }
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Arithmetic (int)"
          args {
            call_value {
              functionName: "Random (int)"
              args {
                int_value: 15
              }
              args {
                int_value: 30
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "Arithmetic Ops"
              }
              args {
                int_value: 1
              }
            }
          }
          args {
            call_value {
              functionName: "Arithmetic (int)"
              args {
                call_value {
                  functionName: "Get Variable (int)"
                  args {
                    string_value: "iTargetArmorValue"
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Preset Value (int)"
                  args {
                    string_value: "Arithmetic Ops"
                  }
                  args {
                    int_value: 3
                  }
                }
              }
              args {
                int_value: 2
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "HPOrAP"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  isActive: false
  idRef {
    id: "557cd627663136d00c0059e8"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Dragon.Arrival"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eDragonArrive"
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Enable/Disable Team\'s Turn"
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Order Actor to Move To (Prop)"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "557cfed1663136e40e004cae"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "55a2121f6631365809004091"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Move Prop with Speed"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "557bf6f9663136c010003150"
          }
        }
      }
      args {
        call_value {
          functionName: "Specified Point (3D)"
          args {
            float_value: 35
          }
          args {
            float_value: 0
          }
          args {
            float_value: -22
          }
        }
      }
      args {
        float_value: 20
      }
    }
    ops {
      functionName: "Send Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eDragonUpdate"
          }
        }
      }
    }
    ops {
      functionName: "Teleport Actor"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "55a210356631365809003fe6"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Current Location of Prop"
          args {
            call_value {
              functionName: "Get Map Item (Prop)"
              args {
                string_value: "55a210ac6631365809003fe8"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 7
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "557cf82d663136a41200003a"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Dragon.Landing"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eDragonUpdate"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (float)"
      args {
        call_value {
          functionName: "Point Component (float)"
          args {
            call_value {
              functionName: "Current Location of Prop"
              args {
                call_value {
                  functionName: "Get Map Item (Prop)"
                  args {
                    string_value: "557bf6f9663136c010003150"
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "VectorComponent"
              }
              args {
                int_value: 2
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 3
          }
        }
      }
      args {
        float_value: -25
      }
    }
  }
  actions {
    ops {
      functionName: "Apply Camera Shake"
      args {
        float_value: 4
      }
      args {
        float_value: 2
      }
    }
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "557bf6f9663136c010003150"
          }
        }
      }
      args {
        call_value {
          functionName: "Specified Point (2D)"
          args {
            float_value: 37
          }
          args {
            float_value: -67
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "Snarl"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Send Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eFightTheDragon"
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Trigger"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "557cf906663136a41200003b"
          }
        }
      }
    }
    ops {
      functionName: "Kill Actor"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "55a210356631365809003fe6"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DeathMethod"
          }
          args {
            int_value: 3
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Team\'s Turn"
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "557cf906663136a41200003b"
  }
  elseActions {
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eDragonUpdate"
          }
        }
      }
      args {
        float_value: 0.05
      }
    }
  }
  is_oneshot: false
}
triggers {
  name: "Dragon.Activate"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eFightTheDragon"
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Activate Actor Spawner"
      args {
        call_value {
          functionName: "Get Map Item (Actor Reference)"
          args {
            string_value: "557bdeac663136ac0900500f"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Set Actor Body Prefab"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "557bdeac663136ac0900500f"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Actor Reference)"
          args {
            string_value: "557d9f3d353733801b0076f1"
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Trigger"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "557cd832663136d00c0059eb"
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Trigger"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "557dd59e663136c80b00016b"
          }
        }
      }
    }
    ops {
      functionName: "Change Actor Team"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "557cfed1663136e40e004cae"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Apply Condition Status Effect to Actor"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "557bdeac663136ac0900500f"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "StatusCondition"
          }
          args {
            int_value: 2
          }
        }
      }
      args {
        string_value: "Fight!"
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "BuffDebuffType"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: -1
      }
    }
    ops {
      functionName: "Suspend Team\'s Turn"
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        int_value: 1
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "557ccd0d663136d00c0059e3"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Dragon.DetermineAttack"
  events {
    ops {
      functionName: "On New Round"
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "bDragonAttacked"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Remove Tag from Actor"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isTarget"
          }
        }
      }
      args {
        call_value {
          functionName: "All Actors"
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
        }
      }
    }
    ops {
      functionName: "Add Tag to Actor"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isTarget"
          }
        }
      }
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Random Actor on Team"
              args {
                call_value {
                  functionName: "Get Preset Value (string)"
                  args {
                    string_value: "FactionList"
                  }
                  args {
                    int_value: 0
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Map Item (SceneDimension)"
                  args {
                    string_value: "Default"
                  }
                }
              }
            }
          }
          args {
          }
        }
      }
    }
    ops {
      functionName: "Set Variable (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iDragonAttack"
          }
        }
      }
      args {
        call_value {
          functionName: "Random (int)"
          args {
            int_value: 1
          }
          args {
            int_value: 2
          }
        }
      }
    }
    ops {
      functionName: "Send Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eDragonAttacks"
          }
        }
      }
    }
  }
  isActive: false
  idRef {
    id: "557cd832663136d00c0059eb"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Dragon.DelayFirstAttack"
  events {
    ops {
      functionName: "On New Round"
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "bDragonAttacked"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "bDragonAttacked"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: false
  idRef {
    id: "557dd59e663136c80b00016b"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Dragon.ClawSwipe"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eDragonAttacks"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iDragonAttack"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 1
      }
    }
  }
  actions {
    ops {
      functionName: "Send Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eClawSwipe"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "557cc2ed663136d00c0059e0"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "     ClawSwipe Proximity Eval"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eClawSwipe"
      }
    }
  }
  conditions {
    ops {
      functionName: "Evaluate If Actor is Inside Region"
      args {
        call_value {
          functionName: "All Actors on Team"
          args {
            call_value {
              functionName: "Get Preset Value (string)"
              args {
                string_value: "FactionList"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 1
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (SceneDimension)"
              args {
                string_value: "Default"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "AreOrAreNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "557cc3b9663136d00c0059e2"
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Remove Tag from Actor"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isTarget"
          }
        }
      }
      args {
        call_value {
          functionName: "All Actors"
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
        }
      }
    }
    ops {
      functionName: "Add Tag to Actor"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isTarget"
          }
        }
      }
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Random Actor within Area"
              args {
                call_value {
                  functionName: "Area: Region"
                  args {
                    call_value {
                      functionName: "Get Map Item (Region)"
                      args {
                        string_value: "557cc3b9663136d00c0059e2"
                      }
                    }
                  }
                }
              }
            }
          }
          args {
          }
        }
      }
    }
    ops {
      functionName: "Play Sound"
      args {
        call_value {
          functionName: "Get Map Item (Sound)"
          args {
            string_value: "chicasting"
          }
          args {
            string_value: "ChiCast_MagicPunch"
          }
        }
      }
      args {
        float_value: 10
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "Melee"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "Snarl"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eClawSwipe"
          }
        }
      }
      args {
        float_value: 0.85
      }
    }
    ops {
      functionName: "Cause Damage"
      args {
        call_value {
          functionName: "All Actors With Tag"
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "isTarget"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Random (int)"
          args {
            int_value: 5
          }
          args {
            int_value: 25
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "HPOrAP"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Nearest Tagged Actor to Actor"
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "isTarget"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "557bdeac663136ac0900500f"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "Seattle:General/standing_hitreaction_bigfront"
          }
        }
      }
    }
    ops {
      functionName: "Play FX on Actor"
      args {
        string_value: "CriticalSquibRedBlood"
      }
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Nearest Tagged Actor to Actor"
              args {
                call_value {
                  functionName: "Get Map Item (SenseTagList)"
                  args {
                    string_value: "isTarget"
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Map Item (Actor)"
                  args {
                    string_value: "557bdeac663136ac0900500f"
                  }
                }
              }
            }
          }
          args {
          }
        }
      }
    }
    ops {
      functionName: "Trigger: Wait Until Triggered Again"
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "Melee"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "Snarl"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Remove Tag from Actor"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isTarget"
          }
        }
      }
      args {
        call_value {
          functionName: "All Actors"
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "557cc329663136d00c0059e1"
  }
  elseActions {
    ops {
      functionName: "Set Variable (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iDragonAttack"
          }
        }
      }
      args {
        int_value: 2
      }
    }
  }
  is_oneshot: false
}
triggers {
  name: "Dragon.BreathWeapon"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eBreathWeapon"
      }
    }
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eDragonAttacks"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iDragonAttack"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 2
      }
    }
  }
  actions {
    ops {
      functionName: "Activate Actor Spawner"
      args {
        call_value {
          functionName: "Get Map Item (Actor Reference)"
          args {
            string_value: "55ec86126631362401003821"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "Snarl"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "PreFire"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eBreathWeapon"
          }
        }
      }
      args {
        float_value: 0.1
      }
    }
    ops {
      functionName: "Trigger: Wait Until Triggered Again"
    }
    ops {
      functionName: "Play Sound"
      args {
        call_value {
          functionName: "Get Map Item (Sound)"
          args {
            string_value: "Berlin:creatures"
          }
          args {
            string_value: "Dragon_Fire"
          }
        }
      }
      args {
        float_value: 10
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "Fire"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "PreFire"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eBreathWeapon"
          }
        }
      }
      args {
        float_value: 0.75
      }
    }
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Nearest Tagged Actor to Actor"
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "isTarget"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "557bdeac663136ac0900500f"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "Seattle:General/standing_hitreaction_bigfront"
          }
        }
      }
    }
    ops {
      functionName: "Teleport Actor"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "55ec86126631362401003821"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Current Location of Actor"
          args {
            call_value {
              functionName: "Nearest Tagged Actor to Actor"
              args {
                call_value {
                  functionName: "Get Map Item (SenseTagList)"
                  args {
                    string_value: "isTarget"
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Map Item (Actor)"
                  args {
                    string_value: "557bdeac663136ac0900500f"
                  }
                }
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Cause Damage"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Nearest Tagged Actor to Actor"
              args {
                call_value {
                  functionName: "Get Map Item (SenseTagList)"
                  args {
                    string_value: "isBreathWeapon"
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Map Item (Actor)"
                  args {
                    string_value: "557bdeac663136ac0900500f"
                  }
                }
              }
            }
          }
          args {
          }
        }
      }
      args {
        int_value: 20
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "HPOrAP"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Trigger: Wait Until Triggered Again"
    }
    ops {
      functionName: "Set Variable (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iRubble"
          }
        }
      }
      args {
        call_value {
          functionName: "Random (int)"
          args {
            int_value: 1
          }
          args {
            int_value: 4
          }
        }
      }
    }
    ops {
      functionName: "Clone Prop"
      args {
        call_value {
          functionName: "Nearest Tagged Prop to Actor"
          args {
            call_value {
              functionName: "Tag From String"
              args {
                call_value {
                  functionName: "Append (string)"
                  args {
                    call_value {
                      functionName: "Convert (int) to (string)"
                      args {
                        call_value {
                          functionName: "Get Variable (int)"
                          args {
                            string_value: "iRubble"
                          }
                        }
                      }
                    }
                  }
                  args {
                    string_value: "isRubble"
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "557bdeac663136ac0900500f"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Current Location of Prop"
          args {
            call_value {
              functionName: "Nearest Tagged Prop to Actor"
              args {
                call_value {
                  functionName: "Get Map Item (SenseTagList)"
                  args {
                    string_value: "isCover"
                  }
                }
              }
              args {
                call_value {
                  functionName: "Nearest Tagged Actor to Actor"
                  args {
                    call_value {
                      functionName: "Get Map Item (SenseTagList)"
                      args {
                        string_value: "isTarget"
                      }
                    }
                  }
                  args {
                    call_value {
                      functionName: "Get Map Item (Actor)"
                      args {
                        string_value: "557bdeac663136ac0900500f"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    ops {
      functionName: "Delete Prop"
      args {
        call_value {
          functionName: "Nearest Tagged Prop to Actor"
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "isCover"
              }
            }
          }
          args {
            call_value {
              functionName: "Nearest Tagged Actor to Actor"
              args {
                call_value {
                  functionName: "Get Map Item (SenseTagList)"
                  args {
                    string_value: "isTarget"
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Map Item (Actor)"
                  args {
                    string_value: "557bdeac663136ac0900500f"
                  }
                }
              }
            }
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "Snarl"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "Fire"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "557bf7e7663136c010003153"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Dragon.Death"
  events {
    ops {
      functionName: "On Actor Death"
    }
  }
  conditions {
    ops {
      functionName: "Comparison (Actor)"
      args {
        call_value {
          functionName: "Triggering Target Actor"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "557bdeac663136ac0900500f"
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Enable/Disable Trigger"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "557bf7e7663136c010003153"
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Trigger"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "557cc2ed663136d00c0059e0"
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Trigger"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "557cd832663136d00c0059eb"
          }
        }
      }
    }
    ops {
      functionName: "Play Sound"
      args {
        call_value {
          functionName: "Get Map Item (Sound)"
          args {
            string_value: "Berlin:creatures"
          }
          args {
            string_value: "Dragon_Roar"
          }
        }
      }
      args {
        float_value: 10
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Kill Actor"
      args {
        call_value {
          functionName: "All Actors With Tag"
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "isSpirit"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DeathMethod"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Delete Props by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isDragon"
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
    }
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "557bf6f9663136c010003150"
          }
        }
      }
      args {
        call_value {
          functionName: "Specified Point (2D)"
          args {
            float_value: 38
          }
          args {
            float_value: -27
          }
        }
      }
    }
    ops {
      functionName: "Move Prop with Speed"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "557bf6f9663136c010003150"
          }
        }
      }
      args {
        call_value {
          functionName: "Specified Point (3D)"
          args {
            float_value: 38
          }
          args {
            float_value: 10
          }
          args {
            float_value: 50
          }
        }
      }
      args {
        float_value: 20
      }
    }
    ops {
      functionName: "Move Prop with Speed"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "557dad8c353733801b0076f3"
          }
        }
      }
      args {
        call_value {
          functionName: "Specified Point (3D)"
          args {
            float_value: 32
          }
          args {
            float_value: 0
          }
          args {
            float_value: 50
          }
        }
      }
      args {
        float_value: 20
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eEndGame"
          }
        }
      }
      args {
        float_value: 3
      }
    }
  }
  isActive: true
  idRef {
    id: "557cd7ee663136d00c0059ea"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Debugger.KillDragon"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "557bdda1663136ac09005008"
          }
        }
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (bool)"
      args {
        call_value {
          functionName: "Get Story Variable (bool)"
          args {
            string_value: "542848a8633464d816001ad5"
          }
          args {
            string_value: "DEBUGGERMODE"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Kill Actor"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "557bdeac663136ac0900500f"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DeathMethod"
          }
          args {
            int_value: 2
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "557ce4a3663136d00c0059f3"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Debugger.LevelNPC"
  events {
    ops {
      functionName: "On Curtains Up"
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "542848a8633464d816001ad5"
          }
          args {
            string_value: "int_CrewProgression"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 3
      }
    }
  }
  actions {
  }
  isActive: false
  idRef {
    id: "55eca1da66313624010038e9"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: " "
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: false
  idRef {
    id: "557d02cc663136e40e004cb0"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "---=== END GAME TRIGGERS ===---"
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: false
  idRef {
    id: "557d02cc663136e40e004cb1"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "EndGame.Eval [Happy Ending]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eEndGame"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (bool)"
      args {
        call_value {
          functionName: "Get Story Variable (bool)"
          args {
            string_value: "542848a8633464d816001ad5"
          }
          args {
            string_value: "bool_MercurialDead"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Comparison (bool)"
      args {
        call_value {
          functionName: "Get Story Variable (bool)"
          args {
            string_value: "542848a8633464d816001ad5"
          }
          args {
            string_value: "bool_HernandezDead"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Comparison (bool)"
      args {
        call_value {
          functionName: "Get Story Variable (bool)"
          args {
            string_value: "542848a8633464d816001ad5"
          }
          args {
            string_value: "bool_MariaUsesBTLChip"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "End Story With Epilogue"
      args {
        string_value: "Epilogue_SuperHappy"
      }
    }
  }
  isActive: true
  idRef {
    id: "557d02d6663136e40e004cb2"
  }
  elseActions {
    ops {
      functionName: "Trigger: Run Alternate Trigger"
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "55a21df466313658090040d0"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WaitOrNot"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  is_oneshot: true
}
triggers {
  name: "EndGame.Eval [Maria BurnOut]"
  events {
  }
  conditions {
    ops {
      functionName: "Comparison (bool)"
      args {
        call_value {
          functionName: "Get Story Variable (bool)"
          args {
            string_value: "542848a8633464d816001ad5"
          }
          args {
            string_value: "bool_MercurialDead"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "OR"
      args {
        call_value {
          functionName: "Comparison (bool)"
          args {
            call_value {
              functionName: "Get Story Variable (bool)"
              args {
                string_value: "542848a8633464d816001ad5"
              }
              args {
                string_value: "bool_HernandezDead"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "IsOrIsNot"
              }
              args {
                int_value: 1
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "bool"
              }
              args {
                int_value: 1
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Comparison (bool)"
          args {
            call_value {
              functionName: "Get Story Variable (bool)"
              args {
                string_value: "542848a8633464d816001ad5"
              }
              args {
                string_value: "bool_MariaUsesBTLChip"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "IsOrIsNot"
              }
              args {
                int_value: 1
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "bool"
              }
              args {
                int_value: 1
              }
            }
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "End Story With Epilogue"
      args {
        string_value: "Epilogue_Unhappy"
      }
    }
  }
  isActive: true
  idRef {
    id: "55a21df466313658090040d0"
  }
  elseActions {
    ops {
      functionName: "Trigger: Run Alternate Trigger"
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "55a21df666313658090040d1"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WaitOrNot"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  is_oneshot: true
}
triggers {
  name: "EndGame.Eval [Unhappy Ending]"
  events {
  }
  conditions {
  }
  actions {
    ops {
      functionName: "End Story With Epilogue"
      args {
        string_value: "Epilogue_Bad"
      }
    }
  }
  isActive: true
  idRef {
    id: "55a21df666313658090040d1"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Disable.isChecked"
  events {
    ops {
      functionName: "On Actor Alive"
    }
    ops {
      functionName: "On Combat Entered"
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Remove Tag from Actor"
      args {
        call_value {
          functionName: "Tag From String"
          args {
            string_value: "isChecked"
          }
        }
      }
      args {
        call_value {
          functionName: "All Actors"
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55c7d691663136c412001c7a"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: " "
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: false
  idRef {
    id: "55ea84dc663136c40f001768"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "---=== BOSS FIGHT TRIGGERS ===---"
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: false
  idRef {
    id: "55ea84dc663136c40f001769"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Kyle.WiredReflexes"
  events {
    ops {
      functionName: "On Actor Damage"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "HPOrAP"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "On Actor Damage"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "HPOrAP"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (Actor)"
      args {
        call_value {
          functionName: "Triggering Target Actor"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "557cfed1663136e40e004cae"
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Apply Skill Status Effect to Actor"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "557cfed1663136e40e004cae"
              }
            }
          }
          args {
          }
        }
      }
      args {
        int_value: -2
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "ActorSkills"
          }
          args {
            int_value: 12
          }
        }
      }
      args {
        string_value: "Staggered"
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "BuffDebuffType"
          }
          args {
            int_value: 2
          }
        }
      }
      args {
        int_value: 0
      }
    }
  }
  isActive: true
  idRef {
    id: "55ea84f3663136c40f00176a"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Maria.Idle"
  events {
    ops {
      functionName: "On New Round"
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "bMariaActive"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "55c7946f6631363811004d9f"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "Seattle:General/standing_idle_cower"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55ec914c6631362401003853"
  }
  elseActions {
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "55c7946f6631363811004d9f"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "Seattle:General/standing_idle_pistol"
          }
        }
      }
    }
  }
  is_oneshot: false
}
triggers {
  name: "Kyle.Downed"
  events {
    ops {
      functionName: "On Actor Death"
    }
  }
  conditions {
    ops {
      functionName: "Comparison (Actor)"
      args {
        call_value {
          functionName: "Triggering Target Actor"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "557cfed1663136e40e004cae"
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Kill Actor"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "557cfed1663136e40e004cae"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DeathMethod"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Display Text at Screen Position"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TextPopupStyle"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        string_value: "The scream from the dragon in almost unbearable... Even though you feel as you\'ve done the world a great service, the dragon\'s anguish assures you that you\'ve just made a cataclysmic mistake."
      }
      args {
        float_value: 0
      }
      args {
        float_value: 0
      }
      args {
        float_value: 0
      }
      args {
        float_value: 0
      }
      args {
        float_value: 0
      }
      args {
        float_value: 0
      }
      args {
        float_value: 5
      }
      args {
        float_value: 3
      }
      args {
        float_value: 0
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isCircle"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Activate Actor Spawner By Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isSpirit"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Order Actor to Hunt And Destroy (Team)"
      args {
        call_value {
          functionName: "All Actors With Tag"
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "isSpirit"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Apply Camera Shake"
      args {
        float_value: 4
      }
      args {
        float_value: 1.25
      }
    }
    ops {
      functionName: "Play Sound"
      args {
        call_value {
          functionName: "Get Map Item (Sound)"
          args {
            string_value: "Berlin:creatures"
          }
          args {
            string_value: "Dragon_RoarFree"
          }
        }
      }
      args {
        float_value: 1
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Trigger: Wait for Rounds"
      args {
        int_value: 1
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isCircle"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Start Conversation Between Actors"
      args {
        call_value {
          functionName: "Get Map Item (Conversation)"
          args {
            string_value: "55c79d586631363811004fa5"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Player)"
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "55c7946f6631363811004d9f"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55ec9972663136240100385e"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Banished.Spirits"
  events {
    ops {
      functionName: "On Actor Death"
    }
  }
  conditions {
    ops {
      functionName: "Evaluate Tag for Actor"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Triggering Target Actor"
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "HasOrHasNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isSpirit"
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Add To Variable (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iSpiritsKilled"
          }
        }
      }
      args {
        int_value: 1
      }
    }
    ops {
      functionName: "Trigger: Run Alternate Trigger"
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "55eca9c26631362401003900"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WaitOrNot"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55eca4d166313624010038ea"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "     Respawn"
  events {
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iSpiritsKilled"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 2
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iSpiritsKilled"
          }
        }
      }
      args {
        int_value: 0
      }
    }
    ops {
      functionName: "Trigger: Wait for Rounds"
      args {
        int_value: 1
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isCircle"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Activate Actor Spawner By Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isSpirit"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Order Actor to Hunt And Destroy (Team)"
      args {
        call_value {
          functionName: "All Actors With Tag"
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "isSpirit"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Trigger: Wait for Rounds"
      args {
        int_value: 1
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isCircle"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55eca9c26631362401003900"
  }
  elseActions {
  }
  is_oneshot: false
}
regions {
  name: "cRooftop"
  position {
    x: -22
    y: -34
    width: 69
    height: 55
  }
  enabledAtStart: true
  is_camera_region: true
  idRef {
    id: "557ca3a0663136cc0d003d89"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.29803923
    g: 0.28627452
    b: 0.42352942
    a: 1
  }
  ambient_light_color {
    r: 0.031372551
    g: 0.33725491
    b: 0.4509804
    a: 1
  }
  ambience_template: "barrens-night"
  combat_music: ""
  default_music: "Seattle-TitleTheme"
  loop_combat_music: true
  loop_default_music: true
  no_fow_in_region: false
}
regions {
  name: "rClawSwipeZone"
  position {
    x: 32
    y: -20
    width: 7
    height: 5
  }
  enabledAtStart: true
  is_camera_region: false
  idRef {
    id: "557cc3b9663136d00c0059e2"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
}
regions {
  name: "rFinaleTripLine"
  position {
    x: 25
    y: -25
    width: 1
    height: 46
  }
  enabledAtStart: true
  is_camera_region: false
  idRef {
    id: "55a20a1b6631365809003f34"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
}
regions {
  name: "rBattleStart"
  position {
    x: 32
    y: -13
    width: 7
    height: 9
  }
  enabledAtStart: true
  is_camera_region: false
  idRef {
    id: "55a20bc86631365809003f36"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
}
regions {
  name: "cHoldingPen"
  position {
    x: 30
    y: 54
    width: 6
    height: 6
  }
  enabledAtStart: true
  is_camera_region: true
  idRef {
    id: "55a20bd96631365809003f37"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
}
characters {
  name: "system_spawner_playerSpawner"
  gridPoint {
    x: 33
    y: 0
    z: 56
  }
  orientation: ORIENTATION_W
  idRef {
    id: "557bdda1663136ac09005008"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 1
    prerequisites {
      ops {
        functionName: "Comparison (bool)"
        args {
          call_value {
            functionName: "Get Story Variable (bool)"
            args {
              string_value: "542848a8633464d816001ad5"
            }
            args {
              string_value: "DEBUGGERMODE"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "IsOrIsNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "bool"
            }
            args {
              int_value: 1
            }
          }
        }
      }
    }
    interactionIcon: InteractionIcon_Generic
    interaction_info_text: ""
  }
  lod: 0
  character_instance {
    character_mod {
      archetypeName: "Player"
    }
    team_id: "Shadowrunners"
    char_name: "New Actor"
    enabled_at_start: true
    pc_spawn_number: 0
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: 34
    y: 0
    z: -20
  }
  orientation: ORIENTATION_E
  GeneralTags: "isBurnt"
  displayName: "Dragon"
  idRef {
    id: "557bdeac663136ac0900500f"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 1
    dummyInteraciton {
    }
    interaction_info_text: ""
  }
  lod: 0
  character_instance {
    prefab_name: "Berlin:Drone/DroneApex"
    character_sheet_id: "Lvl6_Elf_Mage"
    character_mod {
      stats {
        body: 0
        quickness: -2
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 2
        essence: 0
        magic: 0
        hp: 240
        ap: -2
        armor: 1
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 20
        authority: 0
        protect_tether_range: 25
        move_speed: -5
        vision_peripheral_distance: 0
        vision_cone_distance: 7
        vision_cone_angle: 90
        is_fearless: 1
      }
      skills {
        ranged_combat: -5
        close_combat: 0
        throwing_weapons: 0
        spellcasting: -6
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: -3
        dodge: -1
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: -2
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Guard - Protect"
      attitude: AttitudeAggressive
      attackRandom: AttackStyle_CycleAll
      vulnerabilities {
        magic: VulnerabilityLevel_Less
        fire: VulnerabilityLevel_Less
        stun: VulnerabilityLevel_Less
        actionpoints: VulnerabilityLevel_Immune
        disarm: VulnerabilityLevel_Immune
        mental: VulnerabilityLevel_Less
      }
    }
    team_id: "Gangers"
    char_name: "Perianwyr"
    GeneralTags: "isBurnt"
    enabled_at_start: false
    pc_spawn_number: -1
    spawn_type: SpawnType_Normal
    hiring_type: HiringType_None
    disable_pickups: true
    can_combat_shove: true
    portrait {
      filename: "Perianwyr"
    }
    karma: 96
    hiring_cost_override: 1000
    is_prop_character: false
    hide_floaties: false
    has_fist: false
  }
}
characters {
  name: "system_spawner_playerSpawner"
  gridPoint {
    x: 32
    y: 0
    z: 56
  }
  orientation: ORIENTATION_W
  idRef {
    id: "557cdf79663136d00c0059ed"
  }
  lod: 0
  character_instance {
    character_mod {
      archetypeName: "Player"
    }
    team_id: "Shadowrunners"
    char_name: "New Actor"
    enabled_at_start: true
    pc_spawn_number: 2
  }
}
characters {
  name: "system_spawner_playerSpawner"
  gridPoint {
    x: 32
    y: 0
    z: 57
  }
  orientation: ORIENTATION_W
  idRef {
    id: "557cdf7b663136d00c0059ee"
  }
  lod: 0
  character_instance {
    character_mod {
      archetypeName: "Player"
    }
    team_id: "Shadowrunners"
    char_name: "New Actor"
    enabled_at_start: true
    pc_spawn_number: 1
  }
}
characters {
  name: "system_spawner_playerSpawner"
  gridPoint {
    x: 33
    y: 0
    z: 57
  }
  orientation: ORIENTATION_W
  idRef {
    id: "557cdf7d663136d00c0059ef"
  }
  lod: 0
  character_instance {
    character_mod {
      archetypeName: "Player"
    }
    team_id: "Shadowrunners"
    char_name: "New Actor"
    enabled_at_start: true
    pc_spawn_number: 3
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: 34
    y: 0
    z: -6
  }
  orientation: ORIENTATION_N
  GeneralTags: "isMorgan"
  displayName: "Assassin"
  idRef {
    id: "557cfed1663136e40e004cae"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Security/HumanMaleExecSecurity"
    character_sheet_id: "Lvl6_Merc_Human_Assassin"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 2
        intelligence: 0
        willpower: 0
        essence: 1
        magic: -6
        hp: 50
        ap: 0
        armor: 2
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 20
        authority: 0
        protect_tether_range: 0
        move_speed: 3
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 90
        is_fearless: 1
      }
      skills {
        ranged_combat: 2
        close_combat: 1
        throwing_weapons: -5
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 2
        dodge: 2
        etiquette_corporate: 1
        etiquette_security: 0
        etiquette_gang: 1
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 1
      }
      specializations {
        pistol: 3
        rifle: 0
        shotgun: 0
        smg: -3
        edged: -3
        unarmed: 6
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Guard - Seek And Destroy"
      attitude: AttitudeBoss
      attackRandom: AttackStyle_BestOnly
      vulnerabilities {
        normal: VulnerabilityLevel_Default
        magic: VulnerabilityLevel_Less
        stun: VulnerabilityLevel_Less
        actionpoints: VulnerabilityLevel_Less
        disarm: VulnerabilityLevel_Immune
        mental: VulnerabilityLevel_Less
      }
    }
    equipment {
      prefab_name: "Kyles Cannon"
    }
    equipment {
      prefab_name: "Berlin_Ex 2 ArmTech MGL-6 (Errant)"
    }
    equipment {
      prefab_name: "Berlin_Pi 1 Taser"
    }
    team_id: "Civilians"
    char_name: "Kyle Morgan"
    GeneralTags: "isMorgan"
    pc_spawn_number: -1
    hiring_type: HiringType_None
    cyberware_eyes: "Vision Magnification Eyes 2"
    cyberware_jack: "Cerebral Booster"
    cyberware_body: "Morgan Wired Reflexes"
    cyberware_left_arm: "Obvious Cyberarm 2"
    cyberware_right_arm: "Obvious Cyberarm 2"
    cyberware_left_leg: "Berlin_Hydraulic Jack Mk 2"
    cyberware_right_leg: "Enhanced Articulation"
    portrait {
      filename: "backer_humanmale_winterhawk_dralastairstone"
    }
    description_bio: "Kyle is one of the world\'s premier assassins. Never heard of him? That\'s just proof of how good he is."
    karma: 193
    hiring_cost_override: 1000
    persistent_body: true
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -18
    y: 0
    z: 10
  }
  orientation: ORIENTATION_S
  displayName: "PrefabSwap"
  idRef {
    id: "557d9f3d353733801b0076f1"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Objects/InvisibleActor"
    character_sheet_id: "AGChemie_Cyberzombie_Lv1"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        hp: 0
        ap: 0
        armor: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        dodge: 0
      }
      specializations {
        rifle: 0
        edged: 0
        unarmed: 0
      }
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "InvisibleActor"
    pc_spawn_number: -1
    portrait {
      filename: "NPC_TrollMale_CyberZombie"
    }
    karma: 174
    is_prop_character: true
    has_fist: true
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: 32
    y: 0
    z: -6
  }
  orientation: ORIENTATION_S
  displayName: "Watcher"
  idRef {
    id: "55a210356631365809003fe6"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Objects/InvisibleActor"
    character_sheet_id: "BaseCivilian"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Non-Combatant"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "Camera"
    pc_spawn_number: -1
    portrait {
      filename: ""
    }
    karma: 6
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: 34
    y: 0
    z: 56
  }
  orientation: ORIENTATION_W
  displayName: "Fixer"
  idRef {
    id: "55c793fc6631363811004d9c"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Story/MrJohnson"
    character_sheet_id: "Lvl2_Merc_Human_Assassin"
    character_mod {
      stats {
        body: 1
        quickness: -1
        strength: -1
        charisma: 1
        intelligence: 1
        willpower: -1
        essence: 0
        magic: -6
        hp: 0
        ap: 0
        armor: 3
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
      }
      skills {
        ranged_combat: 1
        close_combat: -1
        throwing_weapons: -2
        spellcasting: 0
        decking: 2
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 2
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 1
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 1
        etiquette_academic: 0
      }
      specializations {
        pistol: 3
        rifle: 0
        shotgun: 0
        smg: -1
        edged: -1
        unarmed: 1
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Guard - Protect"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    equipment {
      prefab_name: "SamuraiTrenchcoat"
    }
    equipment {
      prefab_name: "Berlin_Pi 2 Ares Predator (Errant)"
    }
    team_id: "Civilians"
    char_name: "Armando Hernandez"
    GeneralTags: "isHernandez"
    pc_spawn_number: -1
    hiring_type: HiringType_None
    portrait {
      filename: "Hernandez2"
    }
    description_bio: ""
    portrait_code_override: "s4h1c4"
    karma: 86
    hiring_cost_override: 1500
    hiring_tag: "Marias Manager"
    is_backer: true
    persistent_body: true
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: 42
    y: 0
    z: -12
  }
  orientation: ORIENTATION_N
  displayName: "Amazon"
  idRef {
    id: "55c7946f6631363811004d9f"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Core/HumanFemale"
    character_sheet_id: "Lvl3_Elf_Samurai"
    equipment_sheet_id: "NPC_MariaMercurial_OffRUN"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 2
        magic: 0
        hp: 0
        ap: 1
        armor: 4
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 3
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
        is_fearless: 0
      }
      skills {
        ranged_combat: 5
        close_combat: 1
        throwing_weapons: -3
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 1
        etiquette_corporate: 1
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 1
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 6
        rifle: 0
        shotgun: 0
        smg: 4
        edged: -3
        unarmed: 5
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Guard - Protect"
      attitude: AttitudeBoss
      attackRandom: AttackStyle_BestOnly
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "Maria Mercurial"
    GeneralTags: "isMercurial"
    pc_spawn_number: -1
    hiring_type: HiringType_None
    can_combat_shove: true
    cyberware_jack: "Datajack"
    cyberware_left_arm: "Obvious Cyberarm"
    cyberware_right_arm: "Obvious Cyberarm"
    cyberware_left_leg: "Obvious Cyberleg 2"
    cyberware_right_leg: "Obvious Cyberleg 2"
    portrait {
      filename: "geeked_maria_amazon"
    }
    portrait_code_override: "s4h7c1"
    karma: 150
    hiring_cost_override: 1000
    persistent_body: true
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: 30
    y: 0
    z: 59
  }
  orientation: ORIENTATION_E
  GeneralTags: "isMaria"
  displayName: "Mood"
  idRef {
    id: "55c794e16631363811004da0"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Objects/InvisibleActor"
    character_sheet_id: "BaseCivilian"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Guard - Protect"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "Wasted"
    GeneralTags: "isMaria"
    pc_spawn_number: -1
    portrait {
      filename: "geeked_maria_wasted"
    }
    karma: 6
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: 31
    y: 0
    z: 59
  }
  orientation: ORIENTATION_E
  GeneralTags: "isMaria"
  displayName: "Mood"
  idRef {
    id: "55c794e96631363811004da1"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Objects/InvisibleActor"
    character_sheet_id: "BaseCivilian"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Guard - Protect"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "SchoolTeacher"
    GeneralTags: "isMaria"
    pc_spawn_number: -1
    portrait {
      filename: "geeked_maria_teacher"
    }
    karma: 6
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: 32
    y: 0
    z: 59
  }
  orientation: ORIENTATION_E
  GeneralTags: "isMaria"
  displayName: "Mood"
  idRef {
    id: "55c794ea6631363811004da2"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Objects/InvisibleActor"
    character_sheet_id: "BaseCivilian"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Guard - Protect"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "Innocent"
    GeneralTags: "isMaria"
    pc_spawn_number: -1
    portrait {
      filename: "geeked_maria_innocent"
    }
    karma: 6
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: 45
    y: 0
    z: -33
  }
  orientation: ORIENTATION_S
  GeneralTags: "isBreathWeapon"
  displayName: "BreathWeapon"
  idRef {
    id: "55ec86126631362401003821"
  }
  lod: 0
  character_instance {
    prefab_name: "Berlin:Objects/ExplosiveBarrel"
    character_sheet_id: "Environment_Barrel_Explosive"
    equipment_sheet_id: "Environment_Barrel_Explosive"
    character_mod {
      stats {
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
      }
      specializations {
      }
      archetypeName: "Non-Combatant"
      vulnerabilities {
      }
    }
    team_id: "Shadowrunners"
    char_name: "Target_AOE"
    GeneralTags: "isBreathWeapon"
    enabled_at_start: false
    pc_spawn_number: -1
    ai_ignores: true
    portrait {
      filename: ""
    }
    karma: 9
    is_prop_character: true
    hide_floaties: true
    has_fist: false
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: 41
    y: 0
    z: -17
  }
  orientation: ORIENTATION_E
  GeneralTags: "isSpirit"
  displayName: "Spirit"
  idRef {
    id: "55ec9898663136240100385c"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Spirit/SpiritFire"
    character_sheet_id: "ShrineSpirit_Lv4"
    equipment_sheet_id: "Spirit Fire F4 Gear"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 20
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
        is_fearless: 1
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: -2
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Guard - Seek And Destroy"
      attitude: AttitudeAggressive
      attackRandom: AttackStyle_BestOnly
      vulnerabilities {
        normal: VulnerabilityLevel_Normal
        magic: VulnerabilityLevel_Less
        fire: VulnerabilityLevel_Immune
        actionpoints: VulnerabilityLevel_Less
        shock: VulnerabilityLevel_More
      }
    }
    team_id: "Gangers"
    char_name: "Infernus"
    GeneralTags: "isSpirit"
    enabled_at_start: false
    pc_spawn_number: -1
    portrait {
      filename: "generic_spirit_fire"
    }
    karma: 102
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: 28
    y: 0
    z: -17
  }
  orientation: ORIENTATION_E
  GeneralTags: "isSpirit"
  displayName: "Spirit"
  idRef {
    id: "55ec98e8663136240100385d"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Spirit/SpiritWater"
    character_sheet_id: "ShrineSpirit_Lv4"
    equipment_sheet_id: "Spirit Water F4 Gear"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 20
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
        is_fearless: 1
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: -2
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Guard - Seek And Destroy"
      attitude: AttitudeBoss
      attackRandom: AttackStyle_BestOnly
      vulnerabilities {
        magic: VulnerabilityLevel_Less
        fire: VulnerabilityLevel_More
        stun: VulnerabilityLevel_Less
        actionpoints: VulnerabilityLevel_Less
      }
    }
    team_id: "Gangers"
    char_name: "Riptide"
    GeneralTags: "isSpirit"
    enabled_at_start: false
    pc_spawn_number: -1
    portrait {
      filename: "generic_spirit_water"
    }
    karma: 102
  }
}
variables {
  int_value: 1
  variableref_value {
    scope: TsVariableScope_Scene
    name: "iDragonAttack"
    typeName: "int"
  }
}
variables {
  bool_value: true
  variableref_value {
    scope: TsVariableScope_Scene
    name: "bDragonAttacked"
    typeName: "bool"
  }
}
variables {
  int_value: 0
  variableref_value {
    scope: TsVariableScope_Scene
    name: "iTargetArmorValue"
    typeName: "int"
  }
}
variables {
  int_value: 0
  variableref_value {
    scope: TsVariableScope_Scene
    name: "iRubble"
    typeName: "int"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "bMariaActive"
    typeName: "bool"
  }
}
variables {
  int_value: 0
  variableref_value {
    scope: TsVariableScope_Scene
    name: "iSpiritsKilled"
    typeName: "int"
  }
}
mapEvents: "eBreathWeapon"
mapEvents: "eClawSwipe"
mapEvents: "eFightTheDragon"
mapEvents: "eDragonAttacks"
mapEvents: "eDragonArrive"
mapEvents: "eDragonUpdate"
mapEvents: "eClawedReaction"
mapEvents: "eEndGame"
senseTags: "isTarget"
goals {
  name: "Survive"
  type: GoalType_Primary
  status: GoalStatus_Hidden
  description: "You failed to survive..."
}
worldMapLocation {
  filename: ""
  location {
    x: 0
    y: 0
  }
}
mapName: "SCENE - Rooftop Finale"
parentStory: ""
scene_title: "Taetzel Rooftop"
scene_subtitle: "The End!"
scene_synopsis: "You find an old Taetzel cardkey on Mixacopotec\'s corpse, and you use it to unlock the door to the roof access stairs. You push the grumbling about even more stairs from your mind, and ascend the last few steps in silence. There\'s no real way to know what awaits you on the roof. \n\nKyle Morgan is up there. The mastermind behind all of this, behind Hotoda, the evidence against Armando Hernandez, the rise and fall of Max Foley, all the death and destruction you\'ve seen over the last few days. Now he\'s on this rooftop, in the dark, with Maria. \nHe\'s been commanded to kill her and take the information out of her brain.\n\nYou open a door and step into the rain. It\'s cold, and the wind whips it around you as you leave the doorway. It feels surprisingly clean at this height, none of the bitter sting of acid rain you sometimes get in Puyallup. It almost feels right, and you can imagine the rain washing Maria\'s tears away. \n\nTime to kill the villain and save the asset."
scene_image: "marialoading"
scene_continue_button_skip: false
scene_restore_runner_health: true
directional_light_dir {
  x: -0.5
  y: -1
  z: -0.75
}
directional_light_color {
  r: 0.50196081
  g: 0.50196081
  b: 0.50196081
}
ambient_light_color {
  r: 0.50196081
  g: 0.50196081
  b: 0.50196081
}
allow_drawn_weapons: false
team_affiliations {
  team_name: "Shadowrunners"
  affiliation: 0
  affiliation: 1
  affiliation: 1
  affiliation: 0
}
team_affiliations {
  team_name: "Gangers"
  affiliation: 1
  affiliation: 0
  affiliation: 1
  affiliation: 0
}
team_affiliations {
  team_name: "LoneStar"
  affiliation: 1
  affiliation: 1
  affiliation: 0
  affiliation: 0
}
team_affiliations {
  team_name: "Civilians"
  affiliation: 0
  affiliation: 0
  affiliation: 0
  affiliation: 0
}
scene_dimensions {
  dimension_name: "Default"
}
show_hiring_screen_on_scene_load: false
scene_hiring_prerequisites {
  prereq_description: ""
  prereq_conditions {
  }
}
hiring_slot_count: 3
hiring_minimum_karma: 0
hiring_maximum_karma: 0
roster_overrides {
  roster_entries {
    reference_id: "MERCURIAL_Crew_Blight_Lv3"
    hiring_conditions {
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "MERCURIAL_Crew_ElJefe_Lv3"
    hiring_conditions {
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "MERCURIAL_Crew_Gunner_Lv3"
    hiring_conditions {
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "MERCURIAL_Crew_Luna_Lv3"
    hiring_conditions {
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "MERCURIAL_Crew_Nebel_Lv3"
    hiring_conditions {
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "MERCURIAL_Crew_Padre_Lv3"
    hiring_conditions {
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "MERCURIAL_Crew_Shiver_Lv3"
    hiring_conditions {
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "MERCURIAL_Crew_SilverArrow_Lv3"
    hiring_conditions {
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "MERCURIAL_Crew_Sucio_Lv3"
    hiring_conditions {
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "NPC_Blight"
    hiring_conditions {
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "NPC_ElJefe"
    hiring_conditions {
    }
    hiring_cost: -1
    content_pack_source: ""
  }
  roster_entries {
    reference_id: "NPC_Gunner"
    hiring_conditions {
    }
    hiring_cost: -1
    content_pack_source: ""
  }
  roster_entries {
    reference_id: "NPC_Luna"
    hiring_conditions {
    }
    hiring_cost: -1
    content_pack_source: ""
  }
  roster_entries {
    reference_id: "NPC_Nebel"
    hiring_conditions {
    }
    hiring_cost: -1
    content_pack_source: ""
  }
  roster_entries {
    reference_id: "NPC_Padre"
    hiring_conditions {
    }
    hiring_cost: -1
    content_pack_source: ""
  }
  roster_entries {
    reference_id: "NPC_Shiver"
    hiring_conditions {
    }
    hiring_cost: -1
    content_pack_source: ""
  }
  roster_entries {
    reference_id: "NPC_SilverArrow"
    hiring_conditions {
    }
    hiring_cost: -1
    content_pack_source: ""
  }
  roster_entries {
    reference_id: "NPC_Sucio"
    hiring_conditions {
    }
    hiring_cost: -1
    content_pack_source: ""
  }
}
use_hiring_cost_warning: false
hiring_average_cost: 99999
override_hiring_average_cost: true
show_equip_screen_on_scene_load: false
is_persistant: false
is_persistant_has_value: false
can_move_outside_camera_regions: false
can_start_before_triggers: false
can_use_team_advancement: false
