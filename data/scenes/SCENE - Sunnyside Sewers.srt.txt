triggers {
  name: "--== General Triggers ==--"
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: false
  idRef {
    id: "55addcb16631362008006ccb"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "OnMapLoad"
  events {
    ops {
      functionName: "On Map Start"
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Send Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eUpdateFlashlights"
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "55add5ac6631362008006c79"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55addde16631362008006ccf"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Player.Death"
  events {
    ops {
      functionName: "On Actor Death"
    }
  }
  conditions {
    ops {
      functionName: "Comparison (Actor)"
      args {
        call_value {
          functionName: "Triggering Target Actor"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Player)"
          args {
            int_value: 0
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Set Goal Status"
      args {
        call_value {
          functionName: "Get Map Item (Goal)"
          args {
            string_value: "Survive"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "GoalStatus"
          }
          args {
            int_value: 3
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55a22597663136580900412a"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Sewer.TaetzelBasement"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "55ade7516631362008006d0a"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Story Variable (string)"
          args {
            string_value: "542848a8633464d816001ad5"
          }
          args {
            string_value: "str_SpawnPoint"
          }
        }
      }
      args {
        string_value: "TAETZEL-BASEMENT"
      }
    }
  }
  isActive: true
  idRef {
    id: "55ade7646631362008006d0b"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Sewer.SunnysideReturn"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "555b4fc33733616c10003506"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Story Variable (string)"
          args {
            string_value: "542848a8633464d816001ad5"
          }
          args {
            string_value: "str_SpawnPoint"
          }
        }
      }
      args {
        string_value: "SUNNYSIDE-SEWERS"
      }
    }
  }
  isActive: true
  idRef {
    id: "55ade7c56631362008006d0d"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: " "
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: false
  idRef {
    id: "55addca86631362008006cca"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "--== Bridge Control Triggers ==--"
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: false
  idRef {
    id: "55add4796631362008006c75"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Bridge1.Up"
  events {
    ops {
      functionName: "On Map Start"
    }
  }
  conditions {
    ops {
      functionName: "Comparison (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "bBridge1Up"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isBridgeDn1"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isBridgeUp1"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55add4906631362008006c76"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Bridge1.Dn"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "55add5ac6631362008006c79"
          }
        }
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "bBridge1Up"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Delete Prop"
      args {
        call_value {
          functionName: "Nearest Tagged Prop to Prop"
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "isWaterUnderTheBridge"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (Prop)"
              args {
                string_value: "55add5ac6631362008006c79"
              }
            }
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isBridgeDn1"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isBridgeUp1"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Interactable Object"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "55add5ac6631362008006c79"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55add5376631362008006c77"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Bridge1.MissingWheel"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "55addc616631362008006c96"
          }
        }
      }
    }
  }
  conditions {
    ops {
      functionName: "Evaluate If Actor Has Item"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Triggering Actor"
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "HasOrHasNot"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Item)"
          args {
            string_value: "item_Sewers_BridgeWheel"
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Display Text over Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "55addc616631362008006c96"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TextPopupStyle"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        string_value: "A splined shaft sticks out of the mechanism, but whatever attaches to it is missing."
      }
      args {
        float_value: 0
      }
      args {
        float_value: 0
      }
      args {
        float_value: 0
      }
      args {
        float_value: 0
      }
      args {
        float_value: 10
      }
      args {
        float_value: 3
      }
      args {
        float_value: 0
      }
    }
    ops {
      functionName: "Enable/Disable Interactable Object"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "55addc9c6631362008006cc9"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55addcd36631362008006ccc"
  }
  elseActions {
    ops {
      functionName: "Set Prop Visible"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "55add5ac6631362008006c79"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "bWheelPlaced"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  is_oneshot: false
}
triggers {
  name: "Bridge2.Up"
  events {
    ops {
      functionName: "On Map Start"
    }
  }
  conditions {
    ops {
      functionName: "Comparison (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "bBridge2Up"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isBridgeDn2"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isBridgeUp2"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55ade2096631362008006cdb"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Bridge2.Dn"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "55ade24d6631362008006cde"
          }
        }
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "bBridge2Up"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Delete Prop"
      args {
        call_value {
          functionName: "Nearest Tagged Prop to Prop"
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "isWaterUnderTheBridge"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (Prop)"
              args {
                string_value: "55ade24d6631362008006cde"
              }
            }
          }
        }
      }
    }
    ops {
      functionName: "Delete Prop"
      args {
        call_value {
          functionName: "Nearest Tagged Prop to Prop"
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "isWaterUnderTheBridge"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (Prop)"
              args {
                string_value: "55ade24d6631362008006cde"
              }
            }
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isBridgeDn2"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isBridgeUp2"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Interactable Object"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "55ade24d6631362008006cde"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55ade2096631362008006cdc"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: ""
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: false
  idRef {
    id: "550272f1663136ac0d00129f"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "---=== Flashlight Triggers ===---"
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: false
  idRef {
    id: "54f12061663136dc16002310"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "PC0 - FlashLigjht"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eUpdateFlashlights"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "bShowLights"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isFlashLight"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: false
  idRef {
    id: "54f221b46631369414002223"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "  FlashLight.Offset [0]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eUpdateFlashlights"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Current Rotation of Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 0
      }
    }
  }
  actions {
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "55adef916631362008006d0f"
          }
        }
      }
      args {
        call_value {
          functionName: "Arithmetic (Point)"
          args {
            call_value {
              functionName: "Current Location of Actor"
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 0
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "Arithmetic Ops"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Specified Point (3D)"
              args {
                float_value: 0
              }
              args {
                float_value: 0
              }
              args {
                float_value: 2
              }
            }
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "54f222056631369414002224"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "  FlashLight.Offset [1]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eUpdateFlashlights"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Current Rotation of Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 1
      }
    }
  }
  actions {
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "55adef916631362008006d0f"
          }
        }
      }
      args {
        call_value {
          functionName: "Arithmetic (Point)"
          args {
            call_value {
              functionName: "Current Location of Actor"
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 0
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "Arithmetic Ops"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Specified Point (3D)"
              args {
                float_value: 1.5
              }
              args {
                float_value: 0
              }
              args {
                float_value: 1.5
              }
            }
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "54f2231c6631369414002226"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "  FlashLight.Offset [2]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eUpdateFlashlights"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Current Rotation of Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 2
      }
    }
  }
  actions {
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "55adef916631362008006d0f"
          }
        }
      }
      args {
        call_value {
          functionName: "Arithmetic (Point)"
          args {
            call_value {
              functionName: "Current Location of Actor"
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 0
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "Arithmetic Ops"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Specified Point (3D)"
              args {
                float_value: 2
              }
              args {
                float_value: 0
              }
              args {
                float_value: 0
              }
            }
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "54f2231d6631369414002227"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "  FlashLight.Offset [3]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eUpdateFlashlights"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Current Rotation of Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 3
      }
    }
  }
  actions {
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "55adef916631362008006d0f"
          }
        }
      }
      args {
        call_value {
          functionName: "Arithmetic (Point)"
          args {
            call_value {
              functionName: "Current Location of Actor"
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 0
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "Arithmetic Ops"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Specified Point (3D)"
              args {
                float_value: 1.5
              }
              args {
                float_value: 0
              }
              args {
                float_value: -1.5
              }
            }
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "54f2231f6631369414002228"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "  FlashLight.Offset [4]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eUpdateFlashlights"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Current Rotation of Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 4
      }
    }
  }
  actions {
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "55adef916631362008006d0f"
          }
        }
      }
      args {
        call_value {
          functionName: "Arithmetic (Point)"
          args {
            call_value {
              functionName: "Current Location of Actor"
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 0
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "Arithmetic Ops"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Specified Point (3D)"
              args {
                float_value: 0
              }
              args {
                float_value: 0
              }
              args {
                float_value: -2
              }
            }
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "54f223236631369414002229"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "  FlashLight.Offset [5]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eUpdateFlashlights"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Current Rotation of Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 5
      }
    }
  }
  actions {
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "55adef916631362008006d0f"
          }
        }
      }
      args {
        call_value {
          functionName: "Arithmetic (Point)"
          args {
            call_value {
              functionName: "Current Location of Actor"
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 0
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "Arithmetic Ops"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Specified Point (3D)"
              args {
                float_value: -1.5
              }
              args {
                float_value: 0
              }
              args {
                float_value: -1.5
              }
            }
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "54f22323663136941400222a"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "  FlashLight.Offset [6]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eUpdateFlashlights"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Current Rotation of Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 6
      }
    }
  }
  actions {
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "55adef916631362008006d0f"
          }
        }
      }
      args {
        call_value {
          functionName: "Arithmetic (Point)"
          args {
            call_value {
              functionName: "Current Location of Actor"
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 0
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "Arithmetic Ops"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Specified Point (3D)"
              args {
                float_value: -2
              }
              args {
                float_value: 0
              }
              args {
                float_value: 0
              }
            }
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "54f22323663136941400222b"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "  FlashLight.Offset [7]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eUpdateFlashlights"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Current Rotation of Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 7
      }
    }
  }
  actions {
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "55adef916631362008006d0f"
          }
        }
      }
      args {
        call_value {
          functionName: "Arithmetic (Point)"
          args {
            call_value {
              functionName: "Current Location of Actor"
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 0
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "Arithmetic Ops"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Specified Point (3D)"
              args {
                float_value: -1.5
              }
              args {
                float_value: 0
              }
              args {
                float_value: 1.5
              }
            }
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "54f22323663136941400222c"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: " "
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: false
  idRef {
    id: "55ade8a36631362008006d0e"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "PC1 - FlashLigjht"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eUpdateFlashlights"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "bShowLights"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isFlashLight"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: false
  idRef {
    id: "55adf24e6631362008006d13"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "  FlashLight.Offset [0]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eUpdateFlashlights"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Current Rotation of Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 1
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 0
      }
    }
  }
  actions {
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "55adef986631362008006d10"
          }
        }
      }
      args {
        call_value {
          functionName: "Arithmetic (Point)"
          args {
            call_value {
              functionName: "Current Location of Actor"
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 1
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "Arithmetic Ops"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Specified Point (3D)"
              args {
                float_value: 0
              }
              args {
                float_value: 0
              }
              args {
                float_value: 2
              }
            }
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55adf24e6631362008006d14"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "  FlashLight.Offset [1]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eUpdateFlashlights"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Current Rotation of Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 1
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 1
      }
    }
  }
  actions {
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "55adef986631362008006d10"
          }
        }
      }
      args {
        call_value {
          functionName: "Arithmetic (Point)"
          args {
            call_value {
              functionName: "Current Location of Actor"
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 1
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "Arithmetic Ops"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Specified Point (3D)"
              args {
                float_value: 1.5
              }
              args {
                float_value: 0
              }
              args {
                float_value: 1.5
              }
            }
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55adf24e6631362008006d15"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "  FlashLight.Offset [2]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eUpdateFlashlights"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Current Rotation of Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 1
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 2
      }
    }
  }
  actions {
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "55adef986631362008006d10"
          }
        }
      }
      args {
        call_value {
          functionName: "Arithmetic (Point)"
          args {
            call_value {
              functionName: "Current Location of Actor"
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 1
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "Arithmetic Ops"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Specified Point (3D)"
              args {
                float_value: 2
              }
              args {
                float_value: 0
              }
              args {
                float_value: 0
              }
            }
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55adf24e6631362008006d16"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "  FlashLight.Offset [3]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eUpdateFlashlights"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Current Rotation of Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 1
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 3
      }
    }
  }
  actions {
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "55adef986631362008006d10"
          }
        }
      }
      args {
        call_value {
          functionName: "Arithmetic (Point)"
          args {
            call_value {
              functionName: "Current Location of Actor"
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 1
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "Arithmetic Ops"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Specified Point (3D)"
              args {
                float_value: 1.5
              }
              args {
                float_value: 0
              }
              args {
                float_value: -1.5
              }
            }
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55adf24e6631362008006d17"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "  FlashLight.Offset [4]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eUpdateFlashlights"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Current Rotation of Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 1
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 4
      }
    }
  }
  actions {
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "55adef986631362008006d10"
          }
        }
      }
      args {
        call_value {
          functionName: "Arithmetic (Point)"
          args {
            call_value {
              functionName: "Current Location of Actor"
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 1
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "Arithmetic Ops"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Specified Point (3D)"
              args {
                float_value: 0
              }
              args {
                float_value: 0
              }
              args {
                float_value: -2
              }
            }
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55adf24e6631362008006d18"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "  FlashLight.Offset [5]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eUpdateFlashlights"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Current Rotation of Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 1
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 5
      }
    }
  }
  actions {
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "55adef986631362008006d10"
          }
        }
      }
      args {
        call_value {
          functionName: "Arithmetic (Point)"
          args {
            call_value {
              functionName: "Current Location of Actor"
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 1
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "Arithmetic Ops"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Specified Point (3D)"
              args {
                float_value: -1.5
              }
              args {
                float_value: 0
              }
              args {
                float_value: -1.5
              }
            }
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55adf24e6631362008006d19"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "  FlashLight.Offset [6]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eUpdateFlashlights"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Current Rotation of Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 1
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 6
      }
    }
  }
  actions {
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "55adef986631362008006d10"
          }
        }
      }
      args {
        call_value {
          functionName: "Arithmetic (Point)"
          args {
            call_value {
              functionName: "Current Location of Actor"
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 1
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "Arithmetic Ops"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Specified Point (3D)"
              args {
                float_value: -2
              }
              args {
                float_value: 0
              }
              args {
                float_value: 0
              }
            }
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55adf24e6631362008006d1a"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "  FlashLight.Offset [7]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eUpdateFlashlights"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Current Rotation of Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 1
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 7
      }
    }
  }
  actions {
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "55adef986631362008006d10"
          }
        }
      }
      args {
        call_value {
          functionName: "Arithmetic (Point)"
          args {
            call_value {
              functionName: "Current Location of Actor"
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 1
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "Arithmetic Ops"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Specified Point (3D)"
              args {
                float_value: -1.5
              }
              args {
                float_value: 0
              }
              args {
                float_value: 1.5
              }
            }
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55adf24e6631362008006d1b"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: " "
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: false
  idRef {
    id: "55adf25f6631362008006d1d"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "PC2 - FlashLigjht"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eUpdateFlashlights"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "bShowLights"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isFlashLight"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: false
  idRef {
    id: "55adf25f6631362008006d1e"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "  FlashLight.Offset [0]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eUpdateFlashlights"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Current Rotation of Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 2
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 0
      }
    }
  }
  actions {
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "55adef9d6631362008006d12"
          }
        }
      }
      args {
        call_value {
          functionName: "Arithmetic (Point)"
          args {
            call_value {
              functionName: "Current Location of Actor"
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 2
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "Arithmetic Ops"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Specified Point (3D)"
              args {
                float_value: 0
              }
              args {
                float_value: 0
              }
              args {
                float_value: 2
              }
            }
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55adf25f6631362008006d1f"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "  FlashLight.Offset [1]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eUpdateFlashlights"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Current Rotation of Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 2
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 1
      }
    }
  }
  actions {
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "55adef9d6631362008006d12"
          }
        }
      }
      args {
        call_value {
          functionName: "Arithmetic (Point)"
          args {
            call_value {
              functionName: "Current Location of Actor"
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 2
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "Arithmetic Ops"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Specified Point (3D)"
              args {
                float_value: 1.5
              }
              args {
                float_value: 0
              }
              args {
                float_value: 1.5
              }
            }
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55adf25f6631362008006d20"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "  FlashLight.Offset [2]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eUpdateFlashlights"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Current Rotation of Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 2
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 2
      }
    }
  }
  actions {
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "55adef9d6631362008006d12"
          }
        }
      }
      args {
        call_value {
          functionName: "Arithmetic (Point)"
          args {
            call_value {
              functionName: "Current Location of Actor"
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 2
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "Arithmetic Ops"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Specified Point (3D)"
              args {
                float_value: 2
              }
              args {
                float_value: 0
              }
              args {
                float_value: 0
              }
            }
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55adf25f6631362008006d21"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "  FlashLight.Offset [3]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eUpdateFlashlights"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Current Rotation of Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 2
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 3
      }
    }
  }
  actions {
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "55adef9d6631362008006d12"
          }
        }
      }
      args {
        call_value {
          functionName: "Arithmetic (Point)"
          args {
            call_value {
              functionName: "Current Location of Actor"
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 2
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "Arithmetic Ops"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Specified Point (3D)"
              args {
                float_value: 1.5
              }
              args {
                float_value: 0
              }
              args {
                float_value: -1.5
              }
            }
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55adf25f6631362008006d22"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "  FlashLight.Offset [4]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eUpdateFlashlights"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Current Rotation of Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 2
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 4
      }
    }
  }
  actions {
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "55adef9d6631362008006d12"
          }
        }
      }
      args {
        call_value {
          functionName: "Arithmetic (Point)"
          args {
            call_value {
              functionName: "Current Location of Actor"
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 2
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "Arithmetic Ops"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Specified Point (3D)"
              args {
                float_value: 0
              }
              args {
                float_value: 0
              }
              args {
                float_value: -2
              }
            }
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55adf25f6631362008006d23"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "  FlashLight.Offset [5]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eUpdateFlashlights"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Current Rotation of Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 2
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 5
      }
    }
  }
  actions {
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "55adef9d6631362008006d12"
          }
        }
      }
      args {
        call_value {
          functionName: "Arithmetic (Point)"
          args {
            call_value {
              functionName: "Current Location of Actor"
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 2
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "Arithmetic Ops"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Specified Point (3D)"
              args {
                float_value: -1.5
              }
              args {
                float_value: 0
              }
              args {
                float_value: -1.5
              }
            }
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55adf25f6631362008006d24"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "  FlashLight.Offset [6]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eUpdateFlashlights"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Current Rotation of Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 2
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 6
      }
    }
  }
  actions {
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "55adef9d6631362008006d12"
          }
        }
      }
      args {
        call_value {
          functionName: "Arithmetic (Point)"
          args {
            call_value {
              functionName: "Current Location of Actor"
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 2
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "Arithmetic Ops"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Specified Point (3D)"
              args {
                float_value: -2
              }
              args {
                float_value: 0
              }
              args {
                float_value: 0
              }
            }
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55adf25f6631362008006d25"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "  FlashLight.Offset [7]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eUpdateFlashlights"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Current Rotation of Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 2
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 7
      }
    }
  }
  actions {
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "55adef9d6631362008006d12"
          }
        }
      }
      args {
        call_value {
          functionName: "Arithmetic (Point)"
          args {
            call_value {
              functionName: "Current Location of Actor"
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 2
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "Arithmetic Ops"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Specified Point (3D)"
              args {
                float_value: -1.5
              }
              args {
                float_value: 0
              }
              args {
                float_value: 1.5
              }
            }
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55adf25f6631362008006d26"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: " "
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: false
  idRef {
    id: "55adf2926631362008006d36"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "PC3 - FlashLigjht"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eUpdateFlashlights"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "bShowLights"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isFlashLight"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: false
  idRef {
    id: "55adf2926631362008006d37"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "  FlashLight.Offset [0]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eUpdateFlashlights"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Current Rotation of Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 3
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 0
      }
    }
  }
  actions {
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "55adef9a6631362008006d11"
          }
        }
      }
      args {
        call_value {
          functionName: "Arithmetic (Point)"
          args {
            call_value {
              functionName: "Current Location of Actor"
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 3
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "Arithmetic Ops"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Specified Point (3D)"
              args {
                float_value: 0
              }
              args {
                float_value: 0
              }
              args {
                float_value: 2
              }
            }
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55adf2926631362008006d38"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "  FlashLight.Offset [1]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eUpdateFlashlights"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Current Rotation of Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 3
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 1
      }
    }
  }
  actions {
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "55adef9a6631362008006d11"
          }
        }
      }
      args {
        call_value {
          functionName: "Arithmetic (Point)"
          args {
            call_value {
              functionName: "Current Location of Actor"
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 3
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "Arithmetic Ops"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Specified Point (3D)"
              args {
                float_value: 1.5
              }
              args {
                float_value: 0
              }
              args {
                float_value: 1.5
              }
            }
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55adf2926631362008006d39"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "  FlashLight.Offset [2]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eUpdateFlashlights"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Current Rotation of Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 3
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 2
      }
    }
  }
  actions {
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "55adef9a6631362008006d11"
          }
        }
      }
      args {
        call_value {
          functionName: "Arithmetic (Point)"
          args {
            call_value {
              functionName: "Current Location of Actor"
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 3
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "Arithmetic Ops"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Specified Point (3D)"
              args {
                float_value: 2
              }
              args {
                float_value: 0
              }
              args {
                float_value: 0
              }
            }
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55adf2926631362008006d3a"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "  FlashLight.Offset [3]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eUpdateFlashlights"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Current Rotation of Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 3
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 3
      }
    }
  }
  actions {
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "55adef9a6631362008006d11"
          }
        }
      }
      args {
        call_value {
          functionName: "Arithmetic (Point)"
          args {
            call_value {
              functionName: "Current Location of Actor"
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 3
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "Arithmetic Ops"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Specified Point (3D)"
              args {
                float_value: 1.5
              }
              args {
                float_value: 0
              }
              args {
                float_value: -1.5
              }
            }
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55adf2926631362008006d3b"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "  FlashLight.Offset [4]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eUpdateFlashlights"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Current Rotation of Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 3
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 4
      }
    }
  }
  actions {
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "55adef9a6631362008006d11"
          }
        }
      }
      args {
        call_value {
          functionName: "Arithmetic (Point)"
          args {
            call_value {
              functionName: "Current Location of Actor"
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 3
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "Arithmetic Ops"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Specified Point (3D)"
              args {
                float_value: 0
              }
              args {
                float_value: 0
              }
              args {
                float_value: -2
              }
            }
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55adf2926631362008006d3c"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "  FlashLight.Offset [5]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eUpdateFlashlights"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Current Rotation of Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 3
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 5
      }
    }
  }
  actions {
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "55adef9a6631362008006d11"
          }
        }
      }
      args {
        call_value {
          functionName: "Arithmetic (Point)"
          args {
            call_value {
              functionName: "Current Location of Actor"
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 3
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "Arithmetic Ops"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Specified Point (3D)"
              args {
                float_value: -1.5
              }
              args {
                float_value: 0
              }
              args {
                float_value: -1.5
              }
            }
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55adf2926631362008006d3d"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "  FlashLight.Offset [6]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eUpdateFlashlights"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Current Rotation of Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 3
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 6
      }
    }
  }
  actions {
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "55adef9a6631362008006d11"
          }
        }
      }
      args {
        call_value {
          functionName: "Arithmetic (Point)"
          args {
            call_value {
              functionName: "Current Location of Actor"
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 3
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "Arithmetic Ops"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Specified Point (3D)"
              args {
                float_value: -2
              }
              args {
                float_value: 0
              }
              args {
                float_value: 0
              }
            }
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55adf2926631362008006d3e"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "  FlashLight.Offset [7]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eUpdateFlashlights"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Current Rotation of Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 3
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 7
      }
    }
  }
  actions {
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "55adef9a6631362008006d11"
          }
        }
      }
      args {
        call_value {
          functionName: "Arithmetic (Point)"
          args {
            call_value {
              functionName: "Current Location of Actor"
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 3
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "Arithmetic Ops"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Specified Point (3D)"
              args {
                float_value: -1.5
              }
              args {
                float_value: 0
              }
              args {
                float_value: 1.5
              }
            }
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55adf2926631362008006d3f"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "FlashLight.Update"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eUpdateFlashlights"
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eUpdateFlashlights"
          }
        }
      }
      args {
        float_value: 0.06
      }
    }
  }
  isActive: true
  idRef {
    id: "55adf2926631362008006d40"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Disable.isChecked"
  events {
    ops {
      functionName: "On Actor Alive"
    }
  }
  conditions {
    ops {
      functionName: "Evaluate Tag for Actor"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Triggering Actor"
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "HasOrHasNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Tag From String"
          args {
            string_value: "isChecked"
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Remove Tag from Actor"
      args {
        call_value {
          functionName: "Tag From String"
          args {
            string_value: "isChecked"
          }
        }
      }
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Triggering Actor"
            }
          }
          args {
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55b083fc663136fc12001830"
  }
  elseActions {
  }
  is_oneshot: false
}
regions {
  name: "cSewers"
  position {
    x: 119
    y: -46
    width: -199
    height: 202
  }
  enabledAtStart: true
  is_camera_region: true
  idRef {
    id: "555b46bf3733616c100034c0"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.1882353
    g: 0.1882353
    b: 0
    a: 1
  }
  ambient_light_color {
    r: 0.098039217
    g: 0.098039217
    b: 0.098039217
    a: 1
  }
  ambience_template: "sewer-busy"
  combat_music: "Berlin-Set3-Combat"
  default_music: "Seattle-Set3-Legwork"
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
}
characters {
  name: "system_spawner_playerSpawner"
  gridPoint {
    x: 46
    y: 0
    z: 2
  }
  orientation: ORIENTATION_E
  idRef {
    id: "55589824373361f00c005514"
  }
  lod: 0
  character_instance {
    character_mod {
      archetypeName: "Player"
    }
    team_id: "Shadowrunners"
    char_name: "New Actor"
    enabled_at_start: true
    pc_spawn_number: 2
  }
}
characters {
  name: "system_spawner_playerSpawner"
  gridPoint {
    x: 45
    y: 0
    z: 0
  }
  orientation: ORIENTATION_E
  idRef {
    id: "55589824373361f00c00551d"
  }
  lod: 0
  character_instance {
    character_mod {
      archetypeName: "Player"
    }
    team_id: "Shadowrunners"
    char_name: "New Actor"
    enabled_at_start: true
    pc_spawn_number: 3
  }
}
characters {
  name: "system_spawner_playerSpawner"
  gridPoint {
    x: 43
    y: 0
    z: 0
  }
  orientation: ORIENTATION_E
  idRef {
    id: "55589824373361f00c00551e"
  }
  lod: 0
  character_instance {
    character_mod {
      archetypeName: "Player"
    }
    team_id: "Shadowrunners"
    char_name: "New Actor"
    enabled_at_start: true
    pc_spawn_number: 1
  }
}
characters {
  name: "system_spawner_playerSpawner"
  gridPoint {
    x: 42
    y: 0
    z: 2
  }
  orientation: ORIENTATION_E
  idRef {
    id: "55589824373361f00c00552f"
  }
  lod: 0
  character_instance {
    character_mod {
      archetypeName: "Player"
    }
    team_id: "Shadowrunners"
    char_name: "New Actor"
    enabled_at_start: true
    pc_spawn_number: 0
  }
}
variables {
  bool_value: true
  variableref_value {
    scope: TsVariableScope_Scene
    name: "bBridge1Up"
    typeName: "bool"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "bWheelPlaced"
    typeName: "bool"
  }
}
variables {
  bool_value: true
  variableref_value {
    scope: TsVariableScope_Scene
    name: "bBridge2Up"
    typeName: "bool"
  }
}
variables {
  bool_value: true
  variableref_value {
    scope: TsVariableScope_Scene
    name: "bShowLights"
    typeName: "bool"
  }
}
mapEvents: "eUpdateFlashlights"
goals {
  name: "Survive"
  type: GoalType_Primary
  status: GoalStatus_Hidden
  description: "Seriously?  You\'re gonna let them kill you down here?"
}
worldMapLocation {
  filename: ""
  location {
    x: 0
    y: 0
  }
}
mapName: "SCENE - Sunnyside Sewers"
parentStory: ""
scene_title: "Sunnyside Sewers"
scene_subtitle: ""
scene_synopsis: "You punch in the code that Matthews gave you: \"Code6Bravo\" and the hatch unseals, letting out a terrible smell.\n\nApparently the sewers here are still active. \n\nIt only makes sense, there were smugglers working down here until very recently, and there is a working neighborhood above it. You try not to think about every horror story you\'ve ever heard about going into the sewers- ghouls eating people, devil rats the size of a dwarf. \n\nYou briefly wish that you\'d brought a change of clothes with you, because you\'d like to get out of here and get rid of this smell as quickly as possible. Next time you have to enter the sewers, gasmasks and jumpsuits for everyone!\n\nThe sewer is dark, dank, and smells of raw offal. There are very real dangers here, so stay alert. On the other side of this fetid warren of tunnels is the Taetzel building- where Aztechnology is holding Maria. "
scene_image: "marialoading"
scene_continue_button_skip: false
scene_restore_runner_health: true
directional_light_dir {
  x: -0.5
  y: -1
  z: -0.75
}
directional_light_color {
  r: 0.50196081
  g: 0.50196081
  b: 0.50196081
}
ambient_light_color {
  r: 0.50196081
  g: 0.50196081
  b: 0.50196081
}
allow_drawn_weapons: false
team_affiliations {
  team_name: "Shadowrunners"
  affiliation: 0
  affiliation: 1
  affiliation: 1
  affiliation: 0
}
team_affiliations {
  team_name: "Gangers"
  affiliation: 1
  affiliation: 0
  affiliation: 1
  affiliation: 0
}
team_affiliations {
  team_name: "LoneStar"
  affiliation: 1
  affiliation: 1
  affiliation: 0
  affiliation: 0
}
team_affiliations {
  team_name: "Civilians"
  affiliation: 0
  affiliation: 0
  affiliation: 0
  affiliation: 0
}
scene_dimensions {
  dimension_name: "Default"
}
character_roster {
}
show_hiring_screen_on_scene_load: false
scene_hiring_prerequisites {
  prereq_description: ""
  prereq_conditions {
  }
}
hiring_slot_count: 3
hiring_minimum_karma: 0
hiring_maximum_karma: 0
roster_overrides {
  roster_entries {
    reference_id: "MERCURIAL_Crew_Blight_Lv1"
    hiring_conditions {
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "542848a8633464d816001ad5"
            }
            args {
              string_value: "int_CrewProgression"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          int_value: 1
        }
      }
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "542848a8633464d816001ad5"
            }
            args {
              string_value: "int_NPC_Status_Blight"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 3
            }
          }
        }
        args {
          int_value: 0
        }
      }
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "MERCURIAL_Crew_ElJefe_Lv1"
    hiring_conditions {
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "542848a8633464d816001ad5"
            }
            args {
              string_value: "int_CrewProgression"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          int_value: 1
        }
      }
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "MERCURIAL_Crew_ElJefe_Lv2"
    hiring_conditions {
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "542848a8633464d816001ad5"
            }
            args {
              string_value: "int_CrewProgression"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          int_value: 2
        }
      }
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "MERCURIAL_Crew_Gunner_Lv1"
    hiring_conditions {
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "542848a8633464d816001ad5"
            }
            args {
              string_value: "int_CrewProgression"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          int_value: 1
        }
      }
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "MERCURIAL_Crew_Gunner_Lv2"
    hiring_conditions {
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "542848a8633464d816001ad5"
            }
            args {
              string_value: "int_CrewProgression"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          int_value: 2
        }
      }
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "MERCURIAL_Crew_Luna_Lv1"
    hiring_conditions {
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "542848a8633464d816001ad5"
            }
            args {
              string_value: "int_CrewProgression"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          int_value: 1
        }
      }
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "MERCURIAL_Crew_Luna_Lv2"
    hiring_conditions {
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "542848a8633464d816001ad5"
            }
            args {
              string_value: "int_CrewProgression"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          int_value: 2
        }
      }
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "MERCURIAL_Crew_Nebel_Lv1"
    hiring_conditions {
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "542848a8633464d816001ad5"
            }
            args {
              string_value: "int_CrewProgression"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          int_value: 1
        }
      }
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "542848a8633464d816001ad5"
            }
            args {
              string_value: "int_NPC_Status_Nebel"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 3
            }
          }
        }
        args {
          int_value: 0
        }
      }
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "MERCURIAL_Crew_Nebel_Lv2"
    hiring_conditions {
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "542848a8633464d816001ad5"
            }
            args {
              string_value: "int_CrewProgression"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          int_value: 2
        }
      }
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "542848a8633464d816001ad5"
            }
            args {
              string_value: "int_NPC_Status_Nebel"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 3
            }
          }
        }
        args {
          int_value: 0
        }
      }
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "MERCURIAL_Crew_Padre_Lv1"
    hiring_conditions {
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "542848a8633464d816001ad5"
            }
            args {
              string_value: "int_CrewProgression"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          int_value: 1
        }
      }
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "MERCURIAL_Crew_Padre_Lv2"
    hiring_conditions {
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "542848a8633464d816001ad5"
            }
            args {
              string_value: "int_CrewProgression"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          int_value: 2
        }
      }
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "MERCURIAL_Crew_Shiver_Lv1"
    hiring_conditions {
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "542848a8633464d816001ad5"
            }
            args {
              string_value: "int_CrewProgression"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          int_value: 1
        }
      }
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "MERCURIAL_Crew_Shiver_Lv2"
    hiring_conditions {
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "542848a8633464d816001ad5"
            }
            args {
              string_value: "int_CrewProgression"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          int_value: 2
        }
      }
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "MERCURIAL_Crew_SilverArrow_Lv1"
    hiring_conditions {
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "542848a8633464d816001ad5"
            }
            args {
              string_value: "int_CrewProgression"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          int_value: 1
        }
      }
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "MERCURIAL_Crew_SilverArrow_Lv2"
    hiring_conditions {
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "542848a8633464d816001ad5"
            }
            args {
              string_value: "int_CrewProgression"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          int_value: 2
        }
      }
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "MERCURIAL_Crew_Sucio_Lv1"
    hiring_conditions {
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "542848a8633464d816001ad5"
            }
            args {
              string_value: "int_CrewProgression"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          int_value: 1
        }
      }
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "MERCURIAL_Crew_Sucio_Lv2"
    hiring_conditions {
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "542848a8633464d816001ad5"
            }
            args {
              string_value: "int_CrewProgression"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          int_value: 2
        }
      }
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
}
use_hiring_cost_warning: false
hiring_average_cost: 99999
override_hiring_average_cost: true
show_equip_screen_on_scene_load: false
is_persistant: false
is_persistant_has_value: false
can_move_outside_camera_regions: false
can_start_before_triggers: false
can_use_team_advancement: false
