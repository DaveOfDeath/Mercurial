triggers {
  name: "--=== General Triggers ===--"
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: false
  idRef {
    id: "556ad02b663136fc0c00069b"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "General.MapLoad [Exterior]"
  events {
    ops {
      functionName: "On Map Start"
    }
  }
  conditions {
    ops {
      functionName: "Comparison (string)"
      args {
        call_value {
          functionName: "Get Story Variable (string)"
          args {
          }
          args {
            string_value: "str_SpawnPoint"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        string_value: "TAETZEL-SLUMS"
      }
    }
  }
  actions {
    ops {
      functionName: "Set Environmental Effect Amount"
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "EnvironmentalEffects"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 999
      }
    }
    ops {
      functionName: "Teleport Camera To Actor"
      args {
        call_value {
          functionName: "Get Map Item (Player)"
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Light Transition"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "5443d95e373361b816000358"
          }
        }
      }
      args {
        string_value: "Loop; Bounce:3:FFFF00; Cubic:1:FFFF00;"
      }
    }
  }
  isActive: true
  idRef {
    id: "54430ea1373361e002006e69"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "General.MapLoad [YakuzaSpawn]"
  events {
    ops {
      functionName: "On Map Start"
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "542848a8633464d816001ad5"
          }
          args {
            string_value: "int_Legwork"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 3
          }
        }
      }
      args {
        int_value: 6
      }
    }
    ops {
      functionName: "Comparison (string)"
      args {
        call_value {
          functionName: "Get Story Variable (string)"
          args {
          }
          args {
            string_value: "str_SpawnPoint"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        string_value: "TAETZEL-SLUMS"
      }
    }
  }
  actions {
    ops {
      functionName: "Activate Actor Spawner By Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isYakuza"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Start Conversation Between Actors"
      args {
        call_value {
          functionName: "Get Map Item (Conversation)"
          args {
            string_value: "55695bc7663136ac13004874"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Player)"
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "55695a59663136ac1300486d"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55695b8a663136ac13004873"
  }
  elseActions {
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eResetTrogWagon"
          }
        }
      }
      args {
        float_value: 10
      }
    }
  }
  is_oneshot: false
}
triggers {
  name: "General.YakuzaDefeated"
  events {
    ops {
      functionName: "On Actor Death"
    }
  }
  conditions {
    ops {
      functionName: "Evaluate Team Survival Percentage"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 100
      }
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eResetTrogWagon"
          }
        }
      }
      args {
        float_value: 10
      }
    }
  }
  isActive: true
  idRef {
    id: "5569f267663136800f00761c"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "General.RainDisable"
  events {
    ops {
      functionName: "On Region Exit"
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "544309b3373361e002006e5e"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Set Environmental Effect Amount"
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "EnvironmentalEffects"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 0
      }
    }
  }
  isActive: true
  idRef {
    id: "556ad031663136fc0c00069c"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "General.EnterTaetzel [Front Door]"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "5581e3c1663136ac0b005911"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Story Variable (string)"
          args {
            string_value: "542848a8633464d816001ad5"
          }
          args {
            string_value: "str_SpawnPoint"
          }
        }
      }
      args {
        string_value: "TAETZEL-LOBBY"
      }
    }
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Story Variable (string)"
          args {
            string_value: "542848a8633464d816001ad5"
          }
          args {
            string_value: "str_SceneDetails"
          }
        }
      }
      args {
      }
    }
  }
  isActive: true
  idRef {
    id: "5581dfd9663136ac0b00590f"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "General.EnterTaetzel [Side  Door]"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "54412dfe3733612c0a005a9c"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Story Variable (string)"
          args {
            string_value: "542848a8633464d816001ad5"
          }
          args {
            string_value: "str_SpawnPoint"
          }
        }
      }
      args {
        string_value: "TAETZEL-GARAGE"
      }
    }
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Story Variable (string)"
          args {
            string_value: "542848a8633464d816001ad5"
          }
          args {
            string_value: "str_SceneDetails"
          }
        }
      }
      args {
      }
    }
  }
  isActive: true
  idRef {
    id: "5581e7c4663136ac0b005914"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "General.PlayerDeath"
  events {
    ops {
      functionName: "On Actor Death"
    }
  }
  conditions {
    ops {
      functionName: "Comparison (Actor)"
      args {
        call_value {
          functionName: "Triggering Target Actor"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Player)"
          args {
            int_value: 0
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Set Goal Status"
      args {
        call_value {
          functionName: "Get Map Item (Goal)"
          args {
            string_value: "Survive"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "GoalStatus"
          }
          args {
            int_value: 3
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55a225d5663136580900412b"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "General.PenthouseReturn"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "5562d7b9663136a008006bc7"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Story Variable (string)"
          args {
            string_value: "542848a8633464d816001ad5"
          }
          args {
            string_value: "str_SceneDetails"
          }
        }
      }
      args {
        string_value: "You leave the Taetzel Slums, heading back to the safety of the Penthouse.\n\nLingering doubts remain in the back of your mind, questions that need answers.   Somewhere in the plascrete spire you\'ll find them..."
      }
    }
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Story Variable (string)"
          args {
            string_value: "542848a8633464d816001ad5"
          }
          args {
            string_value: "str_SpawnPoint"
          }
        }
      }
      args {
        string_value: "PENTHOUSE-RETURN"
      }
    }
  }
  isActive: true
  idRef {
    id: "55c42a49663136b410007661"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: " "
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: false
  idRef {
    id: "556399346631363003007fc1"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "--=== Drone BackDoor ===--"
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: false
  idRef {
    id: "556399426631363003007fc2"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "BackGate.DroneDetected"
  events {
    ops {
      functionName: "On Region Enter"
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "556399116631363003007fc0"
          }
        }
      }
    }
  }
  conditions {
    ops {
      functionName: "Compare Actor Race"
      args {
        call_value {
          functionName: "Triggering Actor"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Race"
          }
          args {
            int_value: 8
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Display Text over Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "54412d193733612c0a005a8f"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TextPopupStyle"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        string_value: "       -WARNING-\nUnauthorized Delivery\n          Detected"
      }
      args {
        float_value: 255
      }
      args {
        float_value: 0
      }
      args {
        float_value: 0
      }
      args {
        float_value: 128
      }
      args {
        float_value: 15
      }
      args {
        float_value: 3
      }
      args {
        float_value: 0
      }
    }
    ops {
      functionName: "Set Region Enabled"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "556399116631363003007fc0"
          }
        }
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eRiggerBackGate"
          }
        }
      }
      args {
        float_value: 5
      }
    }
  }
  isActive: true
  idRef {
    id: "556399526631363003007fc3"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "BackGate.IdentifySystem"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eRiggerBackGate"
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Display Text over Actor"
      args {
        call_value {
          functionName: "Get Map Item (Player)"
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TextPopupStyle"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        string_value: "An automated system?   Should be a matrix port nearby... Maybe we can spoof the drone into the system..."
      }
      args {
        float_value: 0
      }
      args {
        float_value: 255
      }
      args {
        float_value: 0
      }
      args {
        float_value: 128
      }
      args {
        float_value: 10
      }
      args {
        float_value: 3
      }
      args {
        float_value: 0
      }
    }
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "bAutomationSystemAvailable"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Interactable Object"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "55639ca26631363003007fc6"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55639b5d6631363003007fc4"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "BackGate.SelectADecker"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "55639ca26631363003007fc6"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Enable/Disable Manual Turn Mode"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Display Text over Prop"
      args {
        call_value {
          functionName: "Nearest Tagged Prop to Actor"
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "isJackPoint"
              }
            }
          }
          args {
            call_value {
              functionName: "Triggering Actor"
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TextPopupStyle"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        string_value: "Select a Decker to jack in."
      }
      args {
        float_value: 0
      }
      args {
        float_value: 0
      }
      args {
        float_value: 0
      }
      args {
        float_value: 0
      }
      args {
        float_value: 5
      }
      args {
        float_value: 3
      }
      args {
        float_value: 0
      }
    }
    ops {
      functionName: "End Current Team Round"
    }
    ops {
      functionName: "Trigger: Wait for Rounds"
      args {
        int_value: 2
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Manual Turn Mode"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "523236fd3030311812004227"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "BackGate.TurnBaseMatrixAccess"
  events {
    ops {
      functionName: "On Turn Mode Enter"
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Enable/Disable Interactable Object"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "55639c9d6631363003007fc5"
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Interactable Object"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "55639ca26631363003007fc6"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "52e6e4053030317c15001aa7"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "BackGate.FreeMoveMatrixAccess"
  events {
    ops {
      functionName: "On Freemove Mode Enter"
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Enable/Disable Interactable Object"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "55639c9d6631363003007fc5"
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Interactable Object"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "55639ca26631363003007fc6"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "5563a78e6631363003008029"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "BackGate.IsActorADecker"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "55639c9d6631363003007fc5"
          }
        }
      }
    }
  }
  conditions {
    ops {
      functionName: "Compare Actor Skill"
      args {
        call_value {
          functionName: "Triggering Actor"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "BaseOrCurrent"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "ActorSkills"
          }
          args {
            int_value: 5
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 2
          }
        }
      }
      args {
        int_value: 0
      }
    }
  }
  actions {
  }
  isActive: true
  idRef {
    id: "55e758aa663136980900440d"
  }
  elseActions {
    ops {
      functionName: "Display Text over Actor"
      args {
        call_value {
          functionName: "Triggering Actor"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TextPopupStyle"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        string_value: "I\'m no decker... I can\'t do anything with this."
      }
      args {
        float_value: 0
      }
      args {
        float_value: 255
      }
      args {
        float_value: 0
      }
      args {
        float_value: 128
      }
      args {
        float_value: 10
      }
      args {
        float_value: 3
      }
      args {
        float_value: 0
      }
    }
  }
  is_oneshot: false
}
triggers {
  name: " "
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: false
  idRef {
    id: "556966046631360813002832"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "--=== TrogWagon Triggers  ===--"
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: false
  idRef {
    id: "556966046631360813002833"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "TrogWagon.Patrol [WestBound]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eResetTrogWagon"
      }
    }
  }
  conditions {
    ops {
      functionName: "Evaluate If Actor is Inside Region"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 0
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "AreOrAreNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "544309b3373361e002006e5e"
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "556a6013663136140c0018e3"
          }
        }
      }
      args {
        call_value {
          functionName: "Specified Point (2D)"
          args {
            float_value: 11.5
          }
          args {
            float_value: -84.4
          }
        }
      }
    }
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "556a5f3e663136140c0018e0"
          }
        }
      }
      args {
        call_value {
          functionName: "Specified Point (2D)"
          args {
            float_value: 13.5
          }
          args {
            float_value: -84.4
          }
        }
      }
    }
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "5569f674663136800f00761e"
          }
        }
      }
      args {
        call_value {
          functionName: "Specified Point (2D)"
          args {
            float_value: 12
          }
          args {
            float_value: -80
          }
        }
      }
    }
    ops {
      functionName: "Move Prop with Speed"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "556a6013663136140c0018e3"
          }
        }
      }
      args {
        call_value {
          functionName: "Specified Point (3D)"
          args {
            float_value: 11.5
          }
          args {
            float_value: 1.5
          }
          args {
            float_value: -223.4
          }
        }
      }
      args {
        float_value: 10
      }
    }
    ops {
      functionName: "Move Prop with Speed"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "556a5f3e663136140c0018e0"
          }
        }
      }
      args {
        call_value {
          functionName: "Specified Point (3D)"
          args {
            float_value: 13.5
          }
          args {
            float_value: 0.5
          }
          args {
            float_value: -223.4
          }
        }
      }
      args {
        float_value: 10
      }
    }
    ops {
      functionName: "Move Prop with Speed"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "5569f674663136800f00761e"
          }
        }
      }
      args {
        call_value {
          functionName: "Specified Point (3D)"
          args {
            float_value: 12
          }
          args {
            float_value: 0
          }
          args {
            float_value: -219
          }
        }
      }
      args {
        float_value: 10
      }
    }
  }
  isActive: true
  idRef {
    id: "556966566631360813002834"
  }
  elseActions {
    ops {
      functionName: "Enable/Disable Trigger"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "556966566631360813002834"
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Trigger"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "556a9661663136780e00435d"
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Trigger"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "556a99eb663136780e004360"
          }
        }
      }
    }
  }
  is_oneshot: false
}
triggers {
  name: "TrogWagon.SetLocation"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eResetTrogWagon"
      }
    }
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eMoveSearchArea"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (float)"
      args {
        call_value {
          functionName: "Point Component (float)"
          args {
            call_value {
              functionName: "Current Location of Prop"
              args {
                call_value {
                  functionName: "Get Map Item (Prop)"
                  args {
                    string_value: "5569f674663136800f00761e"
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "VectorComponent"
              }
              args {
                int_value: 2
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 2
          }
        }
      }
      args {
        float_value: -215
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (float)"
      args {
        call_value {
          functionName: "Get Variable (float)"
          args {
            string_value: "fPLayer_X"
          }
        }
      }
      args {
        call_value {
          functionName: "Point Component (float)"
          args {
            call_value {
              functionName: "Current Location of Actor"
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 0
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "VectorComponent"
              }
              args {
                int_value: 0
              }
            }
          }
        }
      }
    }
    ops {
      functionName: "Set Variable (float)"
      args {
        call_value {
          functionName: "Get Variable (float)"
          args {
            string_value: "fPlayer_Z"
          }
        }
      }
      args {
        call_value {
          functionName: "Point Component (float)"
          args {
            call_value {
              functionName: "Current Location of Actor"
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 0
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "VectorComponent"
              }
              args {
                int_value: 2
              }
            }
          }
        }
      }
    }
    ops {
      functionName: "Set Variable (float)"
      args {
        call_value {
          functionName: "Get Variable (float)"
          args {
            string_value: "fVanLocation_X"
          }
        }
      }
      args {
        call_value {
          functionName: "Point Component (float)"
          args {
            call_value {
              functionName: "Current Location of Prop"
              args {
                call_value {
                  functionName: "Get Map Item (Prop)"
                  args {
                    string_value: "5569f674663136800f00761e"
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "VectorComponent"
              }
              args {
                int_value: 0
              }
            }
          }
        }
      }
    }
    ops {
      functionName: "Set Variable (float)"
      args {
        call_value {
          functionName: "Get Variable (float)"
          args {
            string_value: "fVanLocation_Z"
          }
        }
      }
      args {
        call_value {
          functionName: "Point Component (float)"
          args {
            call_value {
              functionName: "Current Location of Prop"
              args {
                call_value {
                  functionName: "Get Map Item (Prop)"
                  args {
                    string_value: "5569f674663136800f00761e"
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "VectorComponent"
              }
              args {
                int_value: 2
              }
            }
          }
        }
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eMoveSearchArea"
          }
        }
      }
      args {
        float_value: 0.1
      }
    }
  }
  isActive: true
  idRef {
    id: "556a9661663136780e00435d"
  }
  elseActions {
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eResetTrogWagon"
          }
        }
      }
      args {
        call_value {
          functionName: "Random (float)"
          args {
            float_value: 45
          }
          args {
            float_value: 70
          }
        }
      }
    }
  }
  is_oneshot: false
}
triggers {
  name: "TrogWagon.ProximityEvaluate"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eMoveSearchArea"
      }
    }
  }
  conditions {
    ops {
      functionName: "AND"
      args {
        call_value {
          functionName: "Comparison (float)"
          args {
            call_value {
              functionName: "Absolute Value (float)"
              args {
                call_value {
                  functionName: "Arithmetic (float)"
                  args {
                    call_value {
                      functionName: "Get Variable (float)"
                      args {
                        string_value: "fPLayer_X"
                      }
                    }
                  }
                  args {
                    call_value {
                      functionName: "Get Preset Value (int)"
                      args {
                        string_value: "Arithmetic Ops"
                      }
                      args {
                        int_value: 1
                      }
                    }
                  }
                  args {
                    call_value {
                      functionName: "Get Variable (float)"
                      args {
                        string_value: "fVanLocation_X"
                      }
                    }
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "Comparison Ops"
              }
              args {
                int_value: 4
              }
            }
          }
          args {
            float_value: 5
          }
        }
      }
      args {
        call_value {
          functionName: "Comparison (float)"
          args {
            call_value {
              functionName: "Absolute Value (float)"
              args {
                call_value {
                  functionName: "Arithmetic (float)"
                  args {
                    call_value {
                      functionName: "Get Variable (float)"
                      args {
                        string_value: "fPlayer_Z"
                      }
                    }
                  }
                  args {
                    call_value {
                      functionName: "Get Preset Value (int)"
                      args {
                        string_value: "Arithmetic Ops"
                      }
                      args {
                        int_value: 1
                      }
                    }
                  }
                  args {
                    call_value {
                      functionName: "Get Variable (float)"
                      args {
                        string_value: "fVanLocation_Z"
                      }
                    }
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "Comparison Ops"
              }
              args {
                int_value: 4
              }
            }
          }
          args {
            float_value: 5
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Enable/Disable Trigger"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "556a9661663136780e00435d"
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Trigger"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "556966566631360813002834"
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Trigger"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "556a99eb663136780e004360"
          }
        }
      }
    }
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "556a9c34663136780e00436c"
          }
        }
      }
      args {
        call_value {
          functionName: "Current Location of Prop"
          args {
            call_value {
              functionName: "Get Map Item (Prop)"
              args {
                string_value: "556a6013663136140c0018e3"
              }
            }
          }
        }
      }
    }
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "556a9c34663136780e00436b"
          }
        }
      }
      args {
        call_value {
          functionName: "Current Location of Prop"
          args {
            call_value {
              functionName: "Get Map Item (Prop)"
              args {
                string_value: "556a5f3e663136140c0018e0"
              }
            }
          }
        }
      }
    }
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "556a9c34663136780e00436a"
          }
        }
      }
      args {
        call_value {
          functionName: "Current Location of Prop"
          args {
            call_value {
              functionName: "Get Map Item (Prop)"
              args {
                string_value: "5569f674663136800f00761e"
              }
            }
          }
        }
      }
    }
    ops {
      functionName: "Delete Props by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isTrogWagon"
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
    }
    ops {
      functionName: "Teleport Actor near Point"
      args {
        call_value {
          functionName: "All Actors With Tag"
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "isTroll"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        int_value: 3
      }
      args {
        call_value {
          functionName: "Current Location of Prop"
          args {
            call_value {
              functionName: "Get Map Item (Prop)"
              args {
                string_value: "556a9c34663136780e00436a"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Suspend Team\'s Turn"
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        int_value: 1
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Change Actor Team"
      args {
        call_value {
          functionName: "All Actors With Tag"
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "isTroll"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Order Actor to Hunt And Destroy (Team)"
      args {
        call_value {
          functionName: "All Actors With Tag"
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "isTroll"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Remove Tag from Actor"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isTroll"
          }
        }
      }
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "556aa2c2663136780e004371"
              }
            }
          }
          args {
          }
        }
      }
    }
    ops {
      functionName: "Display Text over Actor"
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "556aa2c2663136780e004371"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TextPopupStyle"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        string_value: "Fragging $(story.str_Sexism)... "
      }
      args {
        float_value: 255
      }
      args {
        float_value: 0
      }
      args {
        float_value: 0
      }
      args {
        float_value: 128
      }
      args {
        float_value: 8
      }
      args {
        float_value: 3
      }
      args {
        float_value: 0
      }
    }
    ops {
      functionName: "Display Text over Actor"
      args {
        call_value {
          functionName: "Get Random Actor on Team"
          args {
            call_value {
              functionName: "Get Preset Value (string)"
              args {
                string_value: "FactionList"
              }
              args {
                int_value: 1
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (SceneDimension)"
              args {
                string_value: "Default"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TextPopupStyle"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        string_value: "You\'re about to suck void buddy!"
      }
      args {
        float_value: 255
      }
      args {
        float_value: 0
      }
      args {
        float_value: 0
      }
      args {
        float_value: 128
      }
      args {
        float_value: 8
      }
      args {
        float_value: 3
      }
      args {
        float_value: 10
      }
    }
  }
  isActive: true
  idRef {
    id: "556a99eb663136780e004360"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: " "
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: false
  idRef {
    id: "556ac1d36631365c0d000679"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "--=== Baslisk Triggers  ===--"
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: false
  idRef {
    id: "556ac1d36631365c0d00067a"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Lizard.Awareness"
  events {
    ops {
      functionName: "On Actor Awareness of Another Actor"
    }
  }
  conditions {
    ops {
      functionName: "Comparison (Actor)"
      args {
        call_value {
          functionName: "Triggering Actor"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "556abf586631365c0d000678"
          }
        }
      }
    }
    ops {
      functionName: "Evaluate Tag for Actor"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Triggering Actor"
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "HasOrHasNot"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isAware"
          }
        }
      }
    }
    ops {
      functionName: "Compare Actor Team"
      args {
        call_value {
          functionName: "Triggering Target Actor"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Clear Actor Orders"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "556abf586631365c0d000678"
              }
            }
          }
          args {
          }
        }
      }
    }
    ops {
      functionName: "Change Actor Team"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "556abf586631365c0d000678"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Order Actor to Hunt And Destroy (Team)"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "556abf586631365c0d000678"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Play Sound"
      args {
        call_value {
          functionName: "Get Map Item (Sound)"
          args {
            string_value: "creatures"
          }
          args {
            string_value: "BasiliskAttack"
          }
        }
      }
      args {
        float_value: 4
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Add Tag to Actor"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isAware"
          }
        }
      }
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "556abf586631365c0d000678"
              }
            }
          }
          args {
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "556ac1e76631365c0d00067b"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Lizard.Death"
  events {
    ops {
      functionName: "On Actor Death"
    }
  }
  conditions {
    ops {
      functionName: "Comparison (Actor)"
      args {
        call_value {
          functionName: "Triggering Target Actor"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "556abf586631365c0d000678"
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "556ac3d06631365c0d00067e"
          }
        }
      }
      args {
        call_value {
          functionName: "Current Location of Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "556abf586631365c0d000678"
              }
            }
          }
        }
      }
    }
    ops {
      functionName: "Play Sound"
      args {
        call_value {
          functionName: "Get Map Item (Sound)"
          args {
            string_value: "conjuring"
          }
          args {
            string_value: "LightningBarrier"
          }
        }
      }
      args {
        float_value: 1
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Play FX at Point"
      args {
        string_value: "CriticalSquibYellowBlood"
      }
      args {
        call_value {
          functionName: "Current Location of Prop"
          args {
            call_value {
              functionName: "Get Map Item (Prop)"
              args {
                string_value: "556ac3d06631365c0d00067e"
              }
            }
          }
        }
      }
    }
    ops {
      functionName: "Play FX at Point"
      args {
        string_value: "CriticalSquibGreenBlood"
      }
      args {
        call_value {
          functionName: "Current Location of Prop"
          args {
            call_value {
              functionName: "Get Map Item (Prop)"
              args {
                string_value: "556ac3d06631365c0d00067e"
              }
            }
          }
        }
      }
    }
    ops {
      functionName: "Delete Props by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isBasliskDead"
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
    }
    ops {
      functionName: "Set Region Enabled"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "556ac7956631365c0d00067f"
          }
        }
      }
    }
    ops {
      functionName: "Set Region Enabled"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "556ac7c86631365c0d000680"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "556ac34e6631365c0d00067c"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Lizard.Facing"
  events {
    ops {
      functionName: "On Region Enter"
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "556ac7956631365c0d00067f"
          }
        }
      }
    }
    ops {
      functionName: "On Region Enter"
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "556ac7c86631365c0d000680"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Set Region Enabled"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "556ac7956631365c0d00067f"
          }
        }
      }
    }
    ops {
      functionName: "Set Region Enabled"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "556ac7c86631365c0d000680"
          }
        }
      }
    }
    ops {
      functionName: "Order Actor to Move To (Region)"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "556abf586631365c0d000678"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Triggering Region"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Suspend Team\'s Turn"
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 2
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Suspend Team\'s Turn"
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        int_value: 2
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Trigger: Wait for Rounds"
      args {
        int_value: 1
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "556ac8056631365c0d000681"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Turrets.Activate"
  events {
    ops {
      functionName: "On Region Enter"
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "556ac7c86631365c0d000680"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Change Actor Team"
      args {
        call_value {
          functionName: "All Actors With Tag"
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "isSentryGun"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Display Text over Actor"
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "55e766aa6631367c02005754"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TextPopupStyle"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        string_value: "TARGET ACQUIRED"
      }
      args {
        float_value: 0
      }
      args {
        float_value: 0
      }
      args {
        float_value: 0
      }
      args {
        float_value: 0
      }
      args {
        float_value: 9
      }
      args {
        float_value: 3
      }
      args {
        float_value: 0
      }
    }
    ops {
      functionName: "Display Text over Actor"
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "55e766b76631367c02005755"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TextPopupStyle"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        string_value: "TARGET ACQUIRED"
      }
      args {
        float_value: 0
      }
      args {
        float_value: 0
      }
      args {
        float_value: 0
      }
      args {
        float_value: 0
      }
      args {
        float_value: 9
      }
      args {
        float_value: 3
      }
      args {
        float_value: 0
      }
    }
    ops {
      functionName: "Order Actor to Hunt And Destroy (Team)"
      args {
        call_value {
          functionName: "All Actors With Tag"
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "isSentryGun"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Trigger"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "55e7681c6631367c02005756"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55e7681c6631367c02005756"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Turrets.ControlComputer"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "55e76f356631367c0200577d"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Start Conversation"
      args {
        call_value {
          functionName: "Get Map Item (Conversation)"
          args {
            string_value: "55e771386631367c02005780"
          }
        }
      }
      args {
        call_value {
          functionName: "Triggering Actor"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55e7935b6631367c020057ca"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Turrets.Destroyed [1]"
  events {
    ops {
      functionName: "On Actor Death"
    }
  }
  conditions {
    ops {
      functionName: "Comparison (Actor)"
      args {
        call_value {
          functionName: "Triggering Target Actor"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "55e766aa6631367c02005754"
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sTurret1"
          }
        }
      }
      args {
        string_value: "[NO CONNECTION FOUND]"
      }
    }
  }
  isActive: true
  idRef {
    id: "55e7939a6631367c020057cb"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Turrets.Destroyed [2]"
  events {
    ops {
      functionName: "On Actor Death"
    }
  }
  conditions {
    ops {
      functionName: "Comparison (Actor)"
      args {
        call_value {
          functionName: "Triggering Target Actor"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "55e766b76631367c02005755"
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sTurret2"
          }
        }
      }
      args {
        string_value: "[NO CONNECTION FOUND]"
      }
    }
  }
  isActive: true
  idRef {
    id: "55e793e46631367c020057cc"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: " "
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: false
  idRef {
    id: "55a201776631365809003f2a"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "--=== Matrix Triggers ===--"
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: false
  idRef {
    id: "559069e2663136cc13004101"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Matrix.PostTeleportRegion"
  events {
    ops {
      functionName: "On Actor Movement Finished"
    }
  }
  conditions {
    ops {
      functionName: "Actor is Player Controlled"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Triggering Actor"
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Actor Has Run Speed"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Triggering Actor"
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "HasOrHasNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "RunSpeedMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Teleport Camera To Actor"
      args {
        call_value {
          functionName: "Triggering Actor"
        }
      }
    }
  }
  isActive: false
  idRef {
    id: "5356af9837393714170025b0"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: " "
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: false
  idRef {
    id: "55906a4a663136cc13004103"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Matrix.Unsecured.AutomationNode"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "5563a0326631363003007fe5"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Start Conversation Between Actors"
      args {
        call_value {
          functionName: "Get Map Item (Conversation)"
          args {
            string_value: "5563a0656631363003007fe9"
          }
        }
      }
      args {
        call_value {
          functionName: "Triggering Actor"
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "5563a1086631363003007ff0"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "5563a0506631363003007fe8"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Matrix.Unsecured.Public Matrix [LOAD]"
  events {
    ops {
      functionName: "On Region Enter"
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "55639fba6631363003007fe1"
          }
        }
      }
    }
  }
  conditions {
    ops {
      functionName: "Evaluate If Actor is Inside Region"
      args {
        call_value {
          functionName: "All Actors on Team"
          args {
            call_value {
              functionName: "Get Preset Value (string)"
              args {
                string_value: "FactionList"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 1
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (SceneDimension)"
              args {
                string_value: "Matrix"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "AreOrAreNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "55639fba6631363003007fe1"
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Set Environmental Effect Amount"
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "EnvironmentalEffects"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 0
      }
    }
    ops {
      functionName: "Enable/Disable Team\'s Turn"
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eUnusedMatrix"
          }
        }
      }
      args {
        float_value: 3
      }
    }
    ops {
      functionName: "Enable/Disable Trigger"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "5356af9837393714170025b0"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "5563a94c663136300300802a"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Matrix.Unsecured.Private Matrix [LOAD]"
  events {
    ops {
      functionName: "On Region Enter"
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "55e72fd06631363c090043d1"
          }
        }
      }
    }
  }
  conditions {
    ops {
      functionName: "Evaluate If Actor is Inside Region"
      args {
        call_value {
          functionName: "All Actors on Team"
          args {
            call_value {
              functionName: "Get Preset Value (string)"
              args {
                string_value: "FactionList"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 1
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (SceneDimension)"
              args {
                string_value: "Matrix"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "AreOrAreNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "55639fba6631363003007fe1"
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Set Environmental Effect Amount"
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "EnvironmentalEffects"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 0
      }
    }
    ops {
      functionName: "Enable/Disable Team\'s Turn"
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eUnusedMatrix"
          }
        }
      }
      args {
        float_value: 3
      }
    }
    ops {
      functionName: "Enable/Disable Trigger"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "5356af9837393714170025b0"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55a095ef663136fc0a000d5e"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Matrix.JackOut"
  events {
    ops {
      functionName: "On Host Jacked Out"
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Set Environmental Effect Amount"
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "EnvironmentalEffects"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 999
      }
    }
    ops {
      functionName: "Enable/Disable Team\'s Turn"
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Trigger"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "5356af9837393714170025b0"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55e75b1e6631369809004412"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: " "
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: false
  idRef {
    id: "55906a50663136cc13004104"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Matrix.Unsecured.UnusedWarning"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eUnusedMatrix"
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Display Text In Popup"
      args {
        string_value: "The stark whiteness of the matrix indicates that something is very wrong here.  As if all of the color was drained, and you\'re left with a dormant node.\n\nTheres nothing as mundane as dust laying around, or an \'under construction\' banner... But this place has an oppressive feel of being stagnant for quite some time.\n\nNobody has been in this system in who knows how long..."
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "PopupType"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        string_value: " Long Dormant Matrix"
      }
    }
  }
  isActive: true
  idRef {
    id: "5563ab04663136300300802d"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Matrix.Unsecured.HideVioletAccess"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "556514186131314c140060a2"
          }
        }
      }
    }
    ops {
      functionName: "On Map Start"
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isVioletMatrixEnabled"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Set Region Enabled"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "55651eaf6131314c140060fa"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55905bc6663136cc130040e7"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Matrix.Unsecured.ShowVioletAccess"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "556512306131314c1400607b"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isVioletMatrixEnabled"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Set Region Enabled"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "55651eaf6131314c140060fa"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55905be8663136cc130040e8"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: " "
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: false
  idRef {
    id: "55c668d5663136f80e004e27"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "--=== Dragon Knight Randomizer ===--"
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: false
  idRef {
    id: "55c6c1ad663136a013004b3f"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Randomizer.GetKnight"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eRandomKnight"
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Set Variable (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iRND_Knight"
          }
        }
      }
      args {
        call_value {
          functionName: "Random (int)"
          args {
            int_value: 1
          }
          args {
            int_value: 11
          }
        }
      }
    }
    ops {
      functionName: "Activate Actor Spawner By Tag"
      args {
        call_value {
          functionName: "Tag From String"
          args {
            call_value {
              functionName: "Append (string)"
              args {
                call_value {
                  functionName: "Convert (int) to (string)"
                  args {
                    call_value {
                      functionName: "Get Variable (int)"
                      args {
                        string_value: "iRND_Knight"
                      }
                    }
                  }
                }
              }
              args {
                string_value: "isDK"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Add Tag to Actor"
      args {
        call_value {
          functionName: "Tag From String"
          args {
            call_value {
              functionName: "Get Variable (string)"
              args {
                string_value: "sTag"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Last Created Actor"
            }
          }
          args {
          }
        }
      }
    }
    ops {
      functionName: "Teleport Actor"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Last Created Actor"
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Center of Region"
          args {
            call_value {
              functionName: "Get Map Item (Region)"
              args {
                string_value: "55c6c231663136a013004b41"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55c6c1bc663136a013004b40"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Disable.isChecked"
  events {
    ops {
      functionName: "On Actor Alive"
    }
    ops {
      functionName: "On Combat Entered"
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Remove Tag from Actor"
      args {
        call_value {
          functionName: "Tag From String"
          args {
            string_value: "isChecked"
          }
        }
      }
      args {
        call_value {
          functionName: "All Actors"
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55c7d6dc663136c412001c7d"
  }
  elseActions {
  }
  is_oneshot: false
}
regions {
  name: "ExteriorCamera"
  position {
    x: -117
    y: -211
    width: 170
    height: 122
  }
  enabledAtStart: true
  is_camera_region: true
  idRef {
    id: "544309b3373361e002006e5e"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.3882353
    g: 0.37254903
    b: 0.54509807
    a: 1
  }
  ambient_light_color {
    r: 0.38039216
    g: 0.38039216
    b: 0
    a: 1
  }
  ambience_template: "graveyard-night"
  combat_music: "Seattle-Set5-Combat"
  default_music: "Seattle-Set5-Stealth"
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
}
regions {
  name: "rDeliveryAuthorization"
  position {
    x: -109
    y: -118
    width: 15
    height: 1
  }
  enabledAtStart: true
  is_camera_region: false
  idRef {
    id: "556399116631363003007fc0"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
}
regions {
  name: "cPublicMatrix"
  position {
    x: -72
    y: -43
    width: 127
    height: 57
  }
  enabledAtStart: true
  is_camera_region: true
  idRef {
    id: "55639fba6631363003007fe1"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.45882353
    g: 0.45882353
    b: 0.45882353
    a: 1
  }
  ambient_light_color {
    r: 0.24313726
    g: 0.24313726
    b: 0.24313726
    a: 1
  }
  ambience_template: ""
  combat_music: "Seattle-Set8-Combat"
  default_music: "Seattle-Set8-MatrixLoop"
  loop_combat_music: true
  loop_default_music: true
  no_fow_in_region: false
}
regions {
  name: "Entrance-SPU"
  position {
    x: 31
    y: -1
    width: 1
    height: 4
  }
  enabledAtStart: false
  is_camera_region: false
  idRef {
    id: "55651ccb6131314c140060ea"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: true
  linked_teleporter_region: "55651d056131314c140060eb"
  teleport_facing: -1
  teleport_sound_fx: ""
  teleport_sound_volume: 0
  teleport_source_fx: ""
  teleport_destination_fx: ""
  teleport_pc_only: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
}
regions {
  name: "SPU-Entrance"
  position {
    x: 4
    y: 0
    width: 1
    height: 4
  }
  enabledAtStart: true
  is_camera_region: false
  idRef {
    id: "55651d056131314c140060eb"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: true
  linked_teleporter_region: "55651ccb6131314c140060ea"
  teleport_facing: -1
  teleport_sound_fx: ""
  teleport_sound_volume: 0
  teleport_source_fx: ""
  teleport_destination_fx: ""
  teleport_pc_only: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
}
regions {
  name: "SPU-Datastore"
  position {
    x: -20
    y: 0
    width: 1
    height: 4
  }
  enabledAtStart: true
  is_camera_region: false
  idRef {
    id: "55651d526131314c140060ec"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: true
  linked_teleporter_region: "55651d7d6131314c140060ee"
  teleport_facing: -1
  teleport_sound_fx: ""
  teleport_sound_volume: 0
  teleport_source_fx: ""
  teleport_destination_fx: ""
  teleport_pc_only: true
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
}
regions {
  name: "Datastore-SPU"
  position {
    x: -50
    y: -3
    width: 1
    height: 4
  }
  enabledAtStart: true
  is_camera_region: false
  idRef {
    id: "55651d7d6131314c140060ee"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: true
  linked_teleporter_region: "55651d526131314c140060ec"
  teleport_facing: -1
  teleport_sound_fx: ""
  teleport_sound_volume: 0
  teleport_source_fx: ""
  teleport_destination_fx: ""
  teleport_pc_only: true
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
}
regions {
  name: "Abandoned-28th"
  position {
    x: -18
    y: -24
    width: 1
    height: 4
  }
  enabledAtStart: false
  is_camera_region: false
  idRef {
    id: "55651eaf6131314c140060fa"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: true
  linked_teleporter_region: "55651efe6131314c140060fb"
  teleport_facing: -1
  teleport_sound_fx: ""
  teleport_sound_volume: 0
  teleport_source_fx: ""
  teleport_destination_fx: ""
  teleport_pc_only: true
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
}
regions {
  name: "28th-Abandoned"
  position {
    x: -90
    y: -50
    width: 1
    height: 4
  }
  enabledAtStart: true
  is_camera_region: false
  idRef {
    id: "55651efe6131314c140060fb"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: true
  linked_teleporter_region: "55651eaf6131314c140060fa"
  teleport_facing: -1
  teleport_sound_fx: ""
  teleport_sound_volume: 0
  teleport_source_fx: ""
  teleport_destination_fx: ""
  teleport_pc_only: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
}
regions {
  name: "28-Security"
  position {
    x: -101
    y: -39
    width: 4
    height: 1
  }
  enabledAtStart: true
  is_camera_region: false
  idRef {
    id: "556523a16131314c14006177"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: true
  linked_teleporter_region: "556524416131314c14006178"
  teleport_facing: -1
  teleport_sound_fx: ""
  teleport_sound_volume: 0
  teleport_source_fx: ""
  teleport_destination_fx: ""
  teleport_pc_only: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
}
regions {
  name: "Security-28"
  position {
    x: -101
    y: -29
    width: 4
    height: 1
  }
  enabledAtStart: true
  is_camera_region: false
  idRef {
    id: "556524416131314c14006178"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: true
  linked_teleporter_region: "556523a16131314c14006177"
  teleport_facing: -1
  teleport_sound_fx: ""
  teleport_sound_volume: 0
  teleport_source_fx: ""
  teleport_destination_fx: ""
  teleport_pc_only: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
}
regions {
  name: "rNorthBasliskTripwire"
  position {
    x: -89
    y: -141
    width: 3
    height: 22
  }
  enabledAtStart: true
  is_camera_region: false
  idRef {
    id: "556ac7956631365c0d00067f"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
}
regions {
  name: "rSouthBasliskTripwire"
  position {
    x: -13
    y: -163
    width: 1
    height: 11
  }
  enabledAtStart: true
  is_camera_region: false
  idRef {
    id: "556ac7c86631365c0d000680"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
}
regions {
  name: "rFoeCloset"
  position {
    x: -111
    y: -207
    width: 10
    height: 12
  }
  enabledAtStart: true
  is_camera_region: true
  idRef {
    id: "5580e1ec663136a80b005e91"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
}
regions {
  name: "HubNode"
  position {
    x: -109
    y: -50
    width: 1
    height: 4
  }
  enabledAtStart: true
  is_camera_region: false
  idRef {
    id: "55906b94663136cc13004106"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: true
  linked_teleporter_region: "55906bc5663136cc13004107"
  teleport_facing: -1
  teleport_sound_fx: ""
  teleport_sound_volume: 0
  teleport_source_fx: ""
  teleport_destination_fx: ""
  teleport_pc_only: true
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
}
regions {
  name: "CentralNode"
  position {
    x: -117
    y: -54
    width: 1
    height: 4
  }
  enabledAtStart: true
  is_camera_region: false
  idRef {
    id: "55906bc5663136cc13004107"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: true
  linked_teleporter_region: "55906b94663136cc13004106"
  teleport_facing: -1
  teleport_sound_fx: ""
  teleport_sound_volume: 0
  teleport_source_fx: ""
  teleport_destination_fx: ""
  teleport_pc_only: true
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
}
regions {
  name: "PrivateExit"
  position {
    x: -148
    y: -54
    width: 1
    height: 4
  }
  enabledAtStart: true
  is_camera_region: false
  idRef {
    id: "55906be0663136cc13004108"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: true
  linked_teleporter_region: "55906bf3663136cc13004109"
  teleport_facing: -1
  teleport_sound_fx: ""
  teleport_sound_volume: 0
  teleport_source_fx: ""
  teleport_destination_fx: ""
  teleport_pc_only: true
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
}
regions {
  name: "PrivateEnter"
  position {
    x: -88
    y: -6
    width: 1
    height: 4
  }
  enabledAtStart: true
  is_camera_region: false
  idRef {
    id: "55906bf3663136cc13004109"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: true
  linked_teleporter_region: "55906be0663136cc13004108"
  teleport_facing: -1
  teleport_sound_fx: ""
  teleport_sound_volume: 0
  teleport_source_fx: ""
  teleport_destination_fx: ""
  teleport_pc_only: true
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
}
regions {
  name: "rHoldingPen"
  position {
    x: -111
    y: -193
    width: 4
    height: 4
  }
  enabledAtStart: true
  is_camera_region: false
  idRef {
    id: "55c6c231663136a013004b41"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
}
regions {
  name: "rCrewUpgradeSpawn"
  position {
    x: -99
    y: -206
    width: 4
    height: 4
  }
  enabledAtStart: true
  is_camera_region: false
  idRef {
    id: "55cc17b3663136d800003cf5"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
}
regions {
  name: "cSecuredMatrix"
  position {
    x: -168
    y: -71
    width: 84
    height: 81
  }
  enabledAtStart: true
  is_camera_region: true
  idRef {
    id: "55e72fd06631363c090043d1"
  }
  highlight_color {
    r: 0.58039218
    g: 0.28235295
    b: 0.63137257
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.078431375
    b: 0.30588236
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: "dvd"
  combat_music: "Seattle-Set8-Combat"
  default_music: "Seattle-Set8-MatrixLoop"
  loop_combat_music: true
  loop_default_music: true
  no_fow_in_region: false
}
patrolRoutes {
  name: "pVanRoute"
  pathType: 1
  can_move_beyond_node: false
  idRef {
    id: "556a8d92663136c00900209c"
  }
}
characters {
  name: "system_spawner_playerSpawner"
  gridPoint {
    x: 45
    y: 0
    z: -199
  }
  orientation: ORIENTATION_E
  GeneralTags: "isTeamTalker"
  idRef {
    id: "54fcbd8a613131e41f00284a"
  }
  lod: 0
  character_instance {
    character_mod {
      archetypeName: "Player"
    }
    team_id: "Shadowrunners"
    char_name: "New Actor"
    GeneralTags: "isTeamTalker"
    enabled_at_start: true
    pc_spawn_number: 0
    spawn_type: SpawnType_Normal
    dimension_name: "Default"
  }
}
characters {
  name: "system_spawner_playerSpawner"
  gridPoint {
    x: 44
    y: 0
    z: -199
  }
  orientation: ORIENTATION_E
  GeneralTags: "isTeamTalker"
  idRef {
    id: "5562d857663136a008006bce"
  }
  lod: 0
  character_instance {
    character_mod {
      archetypeName: "Player"
    }
    team_id: "Shadowrunners"
    char_name: "New Actor"
    GeneralTags: "isTeamTalker"
    enabled_at_start: true
    pc_spawn_number: 1
  }
}
characters {
  name: "system_spawner_playerSpawner"
  gridPoint {
    x: 46
    y: 0
    z: -200
  }
  orientation: ORIENTATION_E
  GeneralTags: "isTeamTalker"
  idRef {
    id: "5562d85a663136a008006bcf"
  }
  lod: 0
  character_instance {
    character_mod {
      archetypeName: "Player"
    }
    team_id: "Shadowrunners"
    char_name: "New Actor"
    GeneralTags: "isTeamTalker"
    enabled_at_start: true
    pc_spawn_number: 3
  }
}
characters {
  name: "system_spawner_playerSpawner"
  gridPoint {
    x: 43
    y: 0
    z: -200
  }
  orientation: ORIENTATION_E
  GeneralTags: "isTeamTalker"
  idRef {
    id: "5562d85c663136a008006bd0"
  }
  lod: 0
  character_instance {
    character_mod {
      archetypeName: "Player"
    }
    team_id: "Shadowrunners"
    char_name: "New Actor"
    GeneralTags: "isTeamTalker"
    enabled_at_start: true
    pc_spawn_number: 2
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: 39
    y: 0
    z: -9
  }
  orientation: ORIENTATION_S
  displayName: "MatrixNode"
  idRef {
    id: "5563a1086631363003007ff0"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Objects/InvisibleActor"
    character_sheet_id: "BaseCivilian"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "Automated Delivery System"
    pc_spawn_number: -1
    portrait {
      filename: "moregeeked_plainhack"
    }
    karma: 6
    is_prop_character: true
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: 45
    y: 0
    z: -197
  }
  orientation: ORIENTATION_W
  GeneralTags: "isYakuza"
  displayName: "Yakuza"
  idRef {
    id: "55695a59663136ac1300486d"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Core/HumanMale"
    character_sheet_id: "Errant_Lv5_Captain"
    equipment_sheet_id: "Errant_Lv5_Captain"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Guard - Seek And Destroy"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    equipment {
      prefab_name: "Berlin_Fist 1 Spiked Fist"
    }
    equipment {
      prefab_name: "SamuraiTrenchcoat"
    }
    team_id: "LoneStar"
    char_name: "Yakuza Underboss"
    GeneralTags: "isYakuza"
    enabled_at_start: false
    pc_spawn_number: -1
    hiring_type: HiringType_None
    cyberware_body: "Bone Lacing Kevlar"
    portrait {
      filename: "Traxx"
    }
    portrait_code_override: "s3h7c2b0t0"
    karma: 114
    hiring_cost_override: 1000
    has_fist: false
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: 39
    y: 0
    z: -200
  }
  orientation: ORIENTATION_S
  GeneralTags: "isYakuza"
  displayName: "Yakuza"
  idRef {
    id: "55695abb663136ac1300486e"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Wealthy/HumanMaleTurquoisePonyJacket"
    character_sheet_id: "Errant_Lv3_Heavy_Explosive"
    equipment_sheet_id: "Errant_Lv3_Explosive"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
        is_fearless: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Guard - Seek And Destroy"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    team_id: "LoneStar"
    char_name: "Yakuza Henchman"
    GeneralTags: "isYakuza"
    enabled_at_start: false
    pc_spawn_number: -1
    portrait {
      filename: ""
    }
    karma: 69
    has_fist: false
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: 41
    y: 0
    z: -195
  }
  orientation: ORIENTATION_W
  GeneralTags: "isYakuza"
  displayName: "Yakuza"
  idRef {
    id: "55695b73663136ac1300486f"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Wealthy/HumanMaleTurquoisePonyJacket"
    character_sheet_id: "Errant_Lv3_Elf_Shaman"
    equipment_sheet_id: "Errant_Lv3_Shaman_Water"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
        is_fearless: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Guard - Seek And Destroy"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    equipment {
      prefab_name: "Pi 1 Fichetti Security 500"
    }
    team_id: "LoneStar"
    char_name: "Yakuza Henchman"
    GeneralTags: "isYakuza"
    enabled_at_start: false
    pc_spawn_number: -1
    portrait {
      filename: ""
    }
    karma: 71
    has_fist: false
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: 50
    y: 0
    z: -200
  }
  orientation: ORIENTATION_N
  GeneralTags: "isYakuza"
  displayName: "Yakuza"
  idRef {
    id: "55695b76663136ac13004870"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Wealthy/HumanMaleTurquoisePonyJacket"
    character_sheet_id: "Errant_Lv3_Ork_Shotgun"
    equipment_sheet_id: "Errant_Lv3_Shotgun"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
        is_fearless: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Guard - Seek And Destroy"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    team_id: "LoneStar"
    char_name: "Yakuza Henchman"
    GeneralTags: "isYakuza"
    enabled_at_start: false
    pc_spawn_number: -1
    portrait {
      filename: ""
    }
    karma: 59
    has_fist: false
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: 50
    y: 0
    z: -194
  }
  orientation: ORIENTATION_W
  GeneralTags: "isYakuza"
  displayName: "Yakuza"
  idRef {
    id: "55695b79663136ac13004871"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Wealthy/HumanMaleTurquoisePonyJacket"
    character_sheet_id: "Errant_Lv3_Human_Pistol"
    equipment_sheet_id: "Errant_Lv3_Pistol_NoGrenade"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
        is_fearless: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Guard - Seek And Destroy"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    team_id: "LoneStar"
    char_name: "Yakuza Henchman"
    GeneralTags: "isYakuza"
    enabled_at_start: false
    pc_spawn_number: -1
    portrait {
      filename: ""
    }
    karma: 61
    has_fist: false
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -116
    y: 0
    z: -210
  }
  orientation: ORIENTATION_S
  GeneralTags: "isTroll"
  displayName: "TrogWagon"
  idRef {
    id: "556aa2c2663136780e004371"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Core/TrollMale"
    character_sheet_id: "Errant_Lv3_Ork_Shotgun"
    equipment_sheet_id: "Errant_Lv3_Shotgun"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Guard - Seek And Destroy"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    equipment {
      prefab_name: "SamuraiMilitary"
    }
    team_id: "Civilians"
    char_name: "Jurrassic"
    GeneralTags: "isTroll"
    pc_spawn_number: -1
    portrait {
      filename: ""
    }
    portrait_code_override: "s5h2c13b12c13t2"
    karma: 59
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -116
    y: 0
    z: -209
  }
  orientation: ORIENTATION_N
  GeneralTags: "isTroll"
  displayName: "TrogWagon"
  idRef {
    id: "556aa4c4663136780e004372"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Security/TrollMalesSecurityNVG"
    character_sheet_id: "Lvl3_Troll_Samurai"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: -1
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: -1
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: -1
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Guard - Protect"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    equipment {
      prefab_name: "Berlin_Sh 2 Remington 990"
    }
    team_id: "Civilians"
    char_name: "RagnaRock"
    GeneralTags: "isTroll"
    pc_spawn_number: -1
    portrait {
      filename: ""
    }
    karma: 93
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -115
    y: 0
    z: -210
  }
  orientation: ORIENTATION_N
  GeneralTags: "isTroll"
  displayName: "TrogWagon"
  idRef {
    id: "556aa544663136780e004373"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Story/Loate"
    character_sheet_id: "Lvl3_Ork_Adept"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    equipment {
      prefab_name: "Berlin_Killing Hands"
    }
    equipment {
      prefab_name: "Mystic Armor"
    }
    equipment {
      prefab_name: "Quick Strike"
    }
    team_id: "Civilians"
    char_name: "Mr. Death"
    GeneralTags: "isTroll"
    pc_spawn_number: -1
    portrait {
      filename: ""
    }
    karma: 70
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -115
    y: 0
    z: -209
  }
  orientation: ORIENTATION_W
  GeneralTags: "isTroll"
  displayName: "TrogWagon"
  idRef {
    id: "556aa696663136780e004374"
  }
  lod: 0
  character_instance {
    prefab_name: "Berlin:HavenCivilians/TrollMaleHavenCivilian_2"
    character_sheet_id: "Errant_Lv2_Elf_Shaman"
    equipment_sheet_id: "Errant_Lv2_Shaman_Water"
    character_mod {
      stats {
        body: 2
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 20
        ap: 0
        armor: 1
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Guard - Seek And Destroy"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "Tsunami"
    GeneralTags: "isTroll"
    pc_spawn_number: -1
    portrait {
      filename: ""
    }
    karma: 69
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -19
    y: 0
    z: -131
  }
  orientation: ORIENTATION_W
  displayName: "Critters"
  idRef {
    id: "556abf586631365c0d000678"
  }
  lod: 0
  character_instance {
    prefab_name: "Berlin:Creatures/CreatureBillyBasilisk"
    character_sheet_id: "Basilisk (tough)"
    equipment_sheet_id: "Basilisk Critter Powers"
    character_mod {
      stats {
        body: 3
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 30
        ap: 0
        armor: 2
        force: 0
        morale: -1
        discipline: 0
        awareness: 0
        perception: 20
        authority: 0
        protect_tether_range: 0
        move_speed: 4
        vision_peripheral_distance: 1
        vision_cone_distance: 0
        vision_cone_angle: 90
        is_fearless: 1
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Guard - Seek And Destroy"
      attitude: AttitudeBoss
      attackRandom: AttackStyle_BestOnly
      vulnerabilities {
      }
    }
    equipment {
      prefab_name: "Berlin_Hellhound Low Chomp"
    }
    equipment {
      prefab_name: "Venom Spit"
    }
    team_id: "Civilians"
    char_name: "Basilisk"
    pc_spawn_number: -1
    portrait {
      filename: ""
    }
    karma: 173
    persistent_body: false
    has_fist: false
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -24
    y: 0
    z: -151
  }
  orientation: ORIENTATION_S
  GeneralTags: "isSentryGun"
  displayName: "1"
  idRef {
    id: "55e766aa6631367c02005754"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Objects/CorpTurret"
    character_sheet_id: "Turret_Lv5"
    equipment_sheet_id: "Turret_Lv5_Burst_Gear"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Guard - Protect"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    equipment {
      prefab_name: "Mercurial_ex 1 m203"
    }
    team_id: "Civilians"
    char_name: "Sentry Turret"
    GeneralTags: "isSentryGun"
    enabled_at_start: true
    pc_spawn_number: -1
    portrait {
      filename: ""
    }
    karma: 89
    persistent_body: true
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -24
    y: 0
    z: -166
  }
  orientation: ORIENTATION_S
  GeneralTags: "isSentryGun"
  displayName: "2"
  idRef {
    id: "55e766b76631367c02005755"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Objects/CorpTurret"
    character_sheet_id: "Turret_Lv5"
    equipment_sheet_id: "Turret_Lv5_Burst_Gear"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Guard - Protect"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    equipment {
      prefab_name: "Mercurial_ex 1 m203"
    }
    team_id: "Civilians"
    char_name: "Sentry Turret"
    GeneralTags: "isSentryGun"
    pc_spawn_number: -1
    portrait {
      filename: ""
    }
    karma: 89
    persistent_body: true
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "bAutomationSystemAvailable"
    typeName: "bool"
  }
}
variables {
  float_value: 0
  variableref_value {
    scope: TsVariableScope_Scene
    name: "fVanLocation_X"
    typeName: "float"
  }
}
variables {
  float_value: 0
  variableref_value {
    scope: TsVariableScope_Scene
    name: "fVanLocation_Z"
    typeName: "float"
  }
}
variables {
  float_value: 0
  variableref_value {
    scope: TsVariableScope_Scene
    name: "fPLayer_X"
    typeName: "float"
  }
}
variables {
  float_value: 0
  variableref_value {
    scope: TsVariableScope_Scene
    name: "fPlayer_Z"
    typeName: "float"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "bLobbyScannerDisabled"
    typeName: "bool"
  }
}
variables {
  int_value: -1
  variableref_value {
    scope: TsVariableScope_Scene
    name: "iLiftSet"
    typeName: "int"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "bStairsAvailable"
    typeName: "bool"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "bDroneTaken"
    typeName: "bool"
  }
}
variables {
  int_value: 0
  variableref_value {
    scope: TsVariableScope_Scene
    name: "iCombat1-3"
    typeName: "int"
  }
}
variables {
  int_value: 0
  variableref_value {
    scope: TsVariableScope_Scene
    name: "iCombat2-3"
    typeName: "int"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "bSpoofedDelivery"
    typeName: "bool"
  }
}
variables {
  int_value: 0
  variableref_value {
    scope: TsVariableScope_Scene
    name: "iFirewall_Visible"
    typeName: "int"
  }
}
variables {
  int_value: 0
  variableref_value {
    scope: TsVariableScope_Scene
    name: "iRNDEnemySpawnPoint"
    typeName: "int"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "bJorgeDead"
    typeName: "bool"
  }
}
variables {
  int_value: 0
  variableref_value {
    scope: TsVariableScope_Scene
    name: "iElevatorBank"
    typeName: "int"
  }
}
variables {
  string_value: ""
  variableref_value {
    scope: TsVariableScope_Scene
    name: "sTerminalID"
    typeName: "string"
  }
}
variables {
  string_value: "[PASSIVE]"
  variableref_value {
    scope: TsVariableScope_Scene
    name: "sAlarmStatus"
    typeName: "string"
  }
}
variables {
  int_value: 4
  variableref_value {
    scope: TsVariableScope_Scene
    name: "iDronesLeft"
    typeName: "int"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "bBasliskReleased"
    typeName: "bool"
  }
}
variables {
  string_value: "[Normal]"
  variableref_value {
    scope: TsVariableScope_Scene
    name: "sCreature1"
    typeName: "string"
  }
}
variables {
  string_value: "[Normal]"
  variableref_value {
    scope: TsVariableScope_Scene
    name: "sCreature2"
    typeName: "string"
  }
}
variables {
  string_value: ""
  variableref_value {
    scope: TsVariableScope_Scene
    name: "sTag"
    typeName: "string"
  }
}
variables {
  int_value: 0
  variableref_value {
    scope: TsVariableScope_Scene
    name: "iRND_Knight"
    typeName: "int"
  }
}
variables {
  int_value: 0
  variableref_value {
    scope: TsVariableScope_Scene
    name: "iFacing"
    typeName: "int"
  }
}
variables {
  int_value: 0
  variableref_value {
    scope: TsVariableScope_Scene
    name: "iBossFightRounds"
    typeName: "int"
  }
}
variables {
  string_value: ""
  variableref_value {
    scope: TsVariableScope_Scene
    name: "sMixtapePassword"
    typeName: "string"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "bMixTapeUnlocked"
    typeName: "bool"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "bHernandezCellUnlocked"
    typeName: "bool"
  }
}
variables {
  string_value: "[Secure]"
  variableref_value {
    scope: TsVariableScope_Scene
    name: "sHernandezCell"
    typeName: "string"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "bTurretsHacked"
    typeName: "bool"
  }
}
variables {
  string_value: "[ACTIVE]"
  variableref_value {
    scope: TsVariableScope_Scene
    name: "sTurret1"
    typeName: "string"
  }
}
variables {
  string_value: "[ACTIVE]"
  variableref_value {
    scope: TsVariableScope_Scene
    name: "sTurret2"
    typeName: "string"
  }
}
mapEvents: "eRiggerBackGate"
mapEvents: "eUnusedMatrix"
mapEvents: "eResetTrogWagon"
mapEvents: "eMoveSearchArea"
mapEvents: "eRunnerSpotted"
mapEvents: "eFrontDoor"
mapEvents: "eSideDoor"
mapEvents: "eMixacopotecDowned"
mapEvents: "eDropPlayer [FRONT]"
mapEvents: "eDropPlayer [REAR]"
mapEvents: "eStairsDone"
mapEvents: "e1/3CombatChance"
mapEvents: "e2/3CombatChance"
mapEvents: "eMatrixFirewall"
mapEvents: "eKylesLoot"
mapEvents: "eKyleStormOff"
mapEvents: "eSecurityDrone"
mapEvents: "eRandomKnight"
mapEvents: "eRandomTagged"
mapEvents: "eSuperFriends"
senseTags: "isAware"
senseTags: "isSecurityDrone"
senseTags: "is1/3RND"
senseTags: "is2/3RND"
senseTags: "is3/3RND"
senseTags: "isBlight"
senseTags: "isElJefe"
senseTags: "isGunner"
senseTags: "isLuna"
senseTags: "isNebel"
senseTags: "isPadre"
senseTags: "isShiver"
senseTags: "isSilverArrow"
senseTags: "isSucio"
goals {
  name: "Survive"
  type: GoalType_Primary
  status: GoalStatus_Hidden
  description: "You failed your assault on Taetzel."
}
worldMapLocation {
  filename: ""
  location {
    x: 0
    y: 0
  }
}
mapName: "SCENE - Taetzel Exterior"
parentStory: ""
scene_title: "Taetzel Exterior"
scene_subtitle: "Taetzel Building"
scene_synopsis: "$(story.str_SceneDetails)"
scene_image: "marialoading"
scene_continue_button_skip: false
scene_restore_runner_health: true
directional_light_dir {
  x: -0.5
  y: -1
  z: -0.75
}
directional_light_color {
  r: 0.50196081
  g: 0.50196081
  b: 0.50196081
}
ambient_light_color {
  r: 0.50196081
  g: 0.50196081
  b: 0.50196081
}
allow_drawn_weapons: false
team_affiliations {
  team_name: "Shadowrunners"
  affiliation: 0
  affiliation: 1
  affiliation: 1
  affiliation: 0
  affiliation: 0
  affiliation: 0
}
team_affiliations {
  team_name: "Gangers"
  affiliation: 1
  affiliation: 0
  affiliation: 1
  affiliation: 0
  affiliation: 0
  affiliation: 0
}
team_affiliations {
  team_name: "LoneStar"
  affiliation: 1
  affiliation: 1
  affiliation: 0
  affiliation: 0
  affiliation: 0
  affiliation: 0
}
team_affiliations {
  team_name: "Civilians"
  affiliation: 0
  affiliation: 0
  affiliation: 0
  affiliation: 0
  affiliation: 0
  affiliation: 0
}
team_affiliations {
  team_name: "DragonKnight"
  affiliation: 0
  affiliation: 0
  affiliation: 0
  affiliation: 0
  affiliation: 0
  affiliation: 0
}
team_affiliations {
  team_name: "MixTape"
  affiliation: 0
  affiliation: 0
  affiliation: 0
  affiliation: 0
  affiliation: 0
  affiliation: 0
}
scene_dimensions {
  dimension_name: "Default"
}
scene_dimensions {
  dimension_name: "Matrix"
  initial_alarm_state: 25
  turns_per_round: 3
}
character_roster {
}
show_hiring_screen_on_scene_load: false
scene_hiring_prerequisites {
  prereq_description: ""
  prereq_conditions {
  }
}
hiring_slot_count: 3
hiring_minimum_karma: 0
hiring_maximum_karma: 8
roster_overrides {
  roster_entries {
    reference_id: "MERCURIAL_Crew_Blight_Lv1"
    hiring_conditions {
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "542848a8633464d816001ad5"
            }
            args {
              string_value: "int_NPC_Status_Blight"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 3
            }
          }
        }
        args {
          int_value: 0
        }
      }
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "542848a8633464d816001ad5"
            }
            args {
              string_value: "int_CrewProgression"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          int_value: 1
        }
      }
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "MERCURIAL_Crew_ElJefe_Lv1"
    hiring_conditions {
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "542848a8633464d816001ad5"
            }
            args {
              string_value: "int_CrewProgression"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          int_value: 1
        }
      }
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "MERCURIAL_Crew_ElJefe_Lv2"
    hiring_conditions {
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "542848a8633464d816001ad5"
            }
            args {
              string_value: "int_CrewProgression"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          int_value: 2
        }
      }
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "MERCURIAL_Crew_Gunner_Lv1"
    hiring_conditions {
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "542848a8633464d816001ad5"
            }
            args {
              string_value: "int_CrewProgression"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          int_value: 1
        }
      }
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "MERCURIAL_Crew_Gunner_Lv2"
    hiring_conditions {
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "542848a8633464d816001ad5"
            }
            args {
              string_value: "int_CrewProgression"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          int_value: 2
        }
      }
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "MERCURIAL_Crew_Luna_Lv1"
    hiring_conditions {
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "542848a8633464d816001ad5"
            }
            args {
              string_value: "int_CrewProgression"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          int_value: 1
        }
      }
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "MERCURIAL_Crew_Luna_Lv2"
    hiring_conditions {
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "542848a8633464d816001ad5"
            }
            args {
              string_value: "int_CrewProgression"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          int_value: 2
        }
      }
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "MERCURIAL_Crew_Nebel_Lv1"
    hiring_conditions {
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "542848a8633464d816001ad5"
            }
            args {
              string_value: "int_NPC_Status_Nebel"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 3
            }
          }
        }
        args {
          int_value: 0
        }
      }
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "542848a8633464d816001ad5"
            }
            args {
              string_value: "int_CrewProgression"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          int_value: 1
        }
      }
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "MERCURIAL_Crew_Nebel_Lv2"
    hiring_conditions {
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "542848a8633464d816001ad5"
            }
            args {
              string_value: "int_CrewProgression"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          int_value: 2
        }
      }
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "542848a8633464d816001ad5"
            }
            args {
              string_value: "int_NPC_Status_Nebel"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 3
            }
          }
        }
        args {
          int_value: 0
        }
      }
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "MERCURIAL_Crew_Padre_Lv1"
    hiring_conditions {
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "542848a8633464d816001ad5"
            }
            args {
              string_value: "int_CrewProgression"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          int_value: 1
        }
      }
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "MERCURIAL_Crew_Padre_Lv2"
    hiring_conditions {
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "542848a8633464d816001ad5"
            }
            args {
              string_value: "int_CrewProgression"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          int_value: 2
        }
      }
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "MERCURIAL_Crew_Shiver_Lv1"
    hiring_conditions {
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "542848a8633464d816001ad5"
            }
            args {
              string_value: "int_CrewProgression"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          int_value: 1
        }
      }
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "MERCURIAL_Crew_Shiver_Lv2"
    hiring_conditions {
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "542848a8633464d816001ad5"
            }
            args {
              string_value: "int_CrewProgression"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          int_value: 2
        }
      }
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "MERCURIAL_Crew_SilverArrow_Lv1"
    hiring_conditions {
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "542848a8633464d816001ad5"
            }
            args {
              string_value: "int_CrewProgression"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          int_value: 1
        }
      }
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "MERCURIAL_Crew_SilverArrow_Lv2"
    hiring_conditions {
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "542848a8633464d816001ad5"
            }
            args {
              string_value: "int_CrewProgression"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          int_value: 2
        }
      }
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "MERCURIAL_Crew_Sucio_Lv1"
    hiring_conditions {
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "542848a8633464d816001ad5"
            }
            args {
              string_value: "int_CrewProgression"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          int_value: 1
        }
      }
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
  roster_entries {
    reference_id: "MERCURIAL_Crew_Sucio_Lv2"
    hiring_conditions {
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "542848a8633464d816001ad5"
            }
            args {
              string_value: "int_CrewProgression"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          int_value: 2
        }
      }
    }
    hiring_cost: -1
    content_pack_source: "542848a8633464d816001ad5"
  }
}
use_hiring_cost_warning: false
hiring_average_cost: 99999
override_hiring_average_cost: true
show_equip_screen_on_scene_load: false
is_persistant: false
is_persistant_has_value: false
can_move_outside_camera_regions: false
can_start_before_triggers: false
can_use_team_advancement: false
